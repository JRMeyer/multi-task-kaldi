# nnet3-info MTL/exp/nnet3/multitask/14.raw && nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/13.raw MTL/exp/nnet3/multitask/14.raw 
# Started at Tue Jul 24 11:15:20 UTC 2018
#
nnet3-info MTL/exp/nnet3/multitask/14.raw 
num-parameters: 1486432
modulus: 1
input-node name=input dim=13
component-node name=tdnn1.affine component=tdnn1.affine input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=65 output-dim=256
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=256 output-dim=256
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=256 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=tdnn1.renorm input-dim=256 output-dim=256
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=256 output-dim=256
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=256 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -1), Offset(tdnn2.renorm, 2)) input-dim=512 output-dim=256
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=256 output-dim=256
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=256 output-dim=256
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -3), Offset(tdnn3.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=256 output-dim=256
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=256 output-dim=256
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -3), Offset(tdnn4.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.renorm, -3), Offset(tdnn5.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=256 output-dim=256
component-node name=tdnn6.renorm component=tdnn6.renorm input=tdnn6.relu input-dim=256 output-dim=256
component-node name=tdnn7.affine component=tdnn7.affine input=Append(Offset(tdnn6.renorm, -3), Offset(tdnn6.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn7.relu component=tdnn7.relu input=tdnn7.affine input-dim=256 output-dim=256
component-node name=tdnn7.renorm component=tdnn7.renorm input=tdnn7.relu input-dim=256 output-dim=256
component-node name=tdnn8.affine component=tdnn8.affine input=Append(Offset(tdnn7.renorm, -3), Offset(tdnn7.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn8.relu component=tdnn8.relu input=tdnn8.affine input-dim=256 output-dim=256
component-node name=tdnn8.renorm component=tdnn8.renorm input=tdnn8.relu input-dim=256 output-dim=256
component-node name=tdnn9.affine component=tdnn9.affine input=Append(Offset(tdnn8.renorm, -3), Offset(tdnn8.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn9.relu component=tdnn9.relu input=tdnn9.affine input-dim=256 output-dim=256
component-node name=tdnn9.renorm component=tdnn9.renorm input=tdnn9.relu input-dim=256 output-dim=256
component-node name=tdnn10.affine component=tdnn10.affine input=Append(Offset(tdnn9.renorm, -3), Offset(tdnn9.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn10.relu component=tdnn10.relu input=tdnn10.affine input-dim=256 output-dim=256
component-node name=tdnn10.renorm component=tdnn10.renorm input=tdnn10.relu input-dim=256 output-dim=256
component-node name=tdnn11.affine component=tdnn11.affine input=Append(Offset(tdnn10.renorm, -3), Offset(tdnn10.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn11.relu component=tdnn11.relu input=tdnn11.affine input-dim=256 output-dim=256
component-node name=tdnn11.renorm component=tdnn11.renorm input=tdnn11.relu input-dim=256 output-dim=256
component-node name=tdnnFINAL.affine component=tdnnFINAL.affine input=Append(Offset(tdnn11.renorm, -3), Offset(tdnn11.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnnFINAL.relu component=tdnnFINAL.relu input=tdnnFINAL.affine input-dim=256 output-dim=256
component-node name=tdnnFINAL.renorm component=tdnnFINAL.renorm input=tdnnFINAL.relu input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.affine component=prefinal-affine-task-0.affine input=tdnnFINAL.renorm input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.relu component=prefinal-affine-task-0.relu input=prefinal-affine-task-0.affine input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.renorm component=prefinal-affine-task-0.renorm input=prefinal-affine-task-0.relu input-dim=256 output-dim=256
component-node name=output-0.affine component=output-0.affine input=prefinal-affine-task-0.renorm input-dim=256 output-dim=96
component-node name=output-0.log-softmax component=output-0.log-softmax input=output-0.affine input-dim=96 output-dim=96
output-node name=output-0 input=output-0.log-softmax dim=96 objective=linear
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=65, output-dim=256, learning-rate=0.000709727, max-change=0.75, linear-params-rms=0.1442, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.85,0.86,0.90 0.93,0.99,1.1,1.3,1.4 1.5,1.6,1.6,1.7), mean=1.15, stddev=0.186], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,1.9,2.0 2.0,2.1,2.2,2.6,2.6 2.7,2.8,2.9,3.0), mean=2.29, stddev=0.263], bias-{mean,stddev}=0.01677,1.098, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.02e+05, self-repaired-proportion=0.0579427, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.02,0.02 0.04,0.07,0.39,1.5,2.0 2.6,3.2,3.8,6.0), mean=0.808, stddev=0.96], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.06 0.09,0.13,0.44,0.87,0.92 0.94,0.95,0.96,0.98), mean=0.471, stddev=0.319], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.003 0.003,0.003,0.004,0.005,0.007 0.007,0.008,0.009,0.01), mean=0.00438, stddev=0.00152], oderiv-count=153600
component name=tdnn1.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=256, learning-rate=0.000709727, max-change=0.75, linear-params-rms=0.06422, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.89,0.91,0.94 0.96,0.98,1.0,1.1,1.1 1.1,1.1,1.2,1.2), mean=1.03, stddev=0.0553], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.92,0.92,0.93 0.95,0.98,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.03, stddev=0.0545], bias-{mean,stddev}=0.03406,1.089, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.13e+05, self-repaired-proportion=0.0582217, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.004,0.008,0.01 0.03,0.05,0.33,0.81,1.2 1.5,1.7,1.9,3.5), mean=0.487, stddev=0.542], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.03,0.05,0.06 0.09,0.16,0.44,0.75,0.86 0.93,0.95,0.97,1.0), mean=0.459, stddev=0.284], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.004 0.004,0.005,0.006,0.008,0.009 0.01,0.01,0.01,0.02), mean=0.0064, stddev=0.0021], oderiv-count=138240
component name=tdnn2.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000709727, max-change=0.75, linear-params-rms=0.04637, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.94,0.95,0.97 0.98,1.0,1.0,1.1,1.1 1.2,1.2,1.2,1.3), mean=1.05, stddev=0.0547], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.65,0.65,0.67 0.69,0.70,0.74,0.78,0.80 0.82,0.84,0.86,0.90), mean=0.741, stddev=0.0449], bias-{mean,stddev}=0.07215,0.9826, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.1e+04, self-repaired-proportion=0.0881454, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,4e-06,0.002,0.005 0.02,0.06,0.36,1.1,1.5 2.0,2.3,2.6,3.1), mean=0.61, stddev=0.658], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0001,0.01,0.04 0.09,0.15,0.42,0.75,0.83 0.91,0.94,0.98,1.0), mean=0.458, stddev=0.289], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.004 0.004,0.005,0.007,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.00762, stddev=0.00314], oderiv-count=69120
component name=tdnn3.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000709727, max-change=0.75, linear-params-rms=0.04636, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.96,0.97 0.98,1.0,1.0,1.1,1.1 1.1,1.2,1.2,1.3), mean=1.05, stddev=0.0557], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.65,0.67 0.68,0.70,0.74,0.78,0.81 0.82,0.85,0.86,0.89), mean=0.74, stddev=0.0476], bias-{mean,stddev}=-0.04937,1.016, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.61e+04, self-repaired-proportion=0.0898438, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,1e-05,0.0004,0.005 0.02,0.04,0.28,1.1,1.5 2.1,2.3,3.1,3.5), mean=0.581, stddev=0.698], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0002,0.004,0.03 0.07,0.12,0.35,0.72,0.82 0.90,0.94,0.96,1.0), mean=0.414, stddev=0.285], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.004 0.004,0.005,0.006,0.009,0.01 0.01,0.02,0.02,0.02), mean=0.00744, stddev=0.0031], oderiv-count=55296
component name=tdnn4.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000709727, max-change=0.75, linear-params-rms=0.04609, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.93,0.94,0.97 0.98,1.0,1.0,1.1,1.1 1.1,1.2,1.2,1.3), mean=1.04, stddev=0.0514], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.65,0.66,0.67 0.68,0.70,0.73,0.77,0.80 0.82,0.84,0.85,0.90), mean=0.736, stddev=0.0452], bias-{mean,stddev}=-0.1217,0.9713, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=3.07e+04, self-repaired-proportion=0.121094, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0001,0.003 0.01,0.05,0.31,1.0,1.6 2.2,2.8,3.1,4.3), mean=0.601, stddev=0.747], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.001,0.02 0.05,0.14,0.41,0.74,0.85 0.91,0.94,0.95,0.98), mean=0.426, stddev=0.288], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.004 0.004,0.005,0.006,0.009,0.01 0.01,0.02,0.02,0.02), mean=0.00722, stddev=0.003], oderiv-count=61440
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000709727, max-change=0.75, linear-params-rms=0.04615, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.96,0.97 0.98,1.0,1.0,1.1,1.1 1.1,1.1,1.2,1.2), mean=1.04, stddev=0.0504], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.65,0.66,0.67 0.68,0.70,0.73,0.77,0.79 0.82,0.85,0.85,0.87), mean=0.737, stddev=0.0437], bias-{mean,stddev}=0.08847,1.067, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=3.58e+04, self-repaired-proportion=0.104779, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,5e-06,0.0002,0.001 0.009,0.05,0.34,1.2,1.7 2.3,2.5,2.7,3.3), mean=0.633, stddev=0.72], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,3e-05,0.001,0.01 0.05,0.13,0.39,0.78,0.86 0.91,0.94,0.95,1.0), mean=0.439, stddev=0.306], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.005,0.005,0.007,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.0075, stddev=0.00276], oderiv-count=51968
component name=tdnn6.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn7.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000709727, max-change=0.75, linear-params-rms=0.04617, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.94,0.96,0.97 0.99,1.0,1.0,1.1,1.1 1.1,1.1,1.2,1.2), mean=1.04, stddev=0.046], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.64,0.65,0.67 0.68,0.70,0.73,0.77,0.80 0.81,0.83,0.84,0.89), mean=0.737, stddev=0.0443], bias-{mean,stddev}=-0.02725,1.022, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn7.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=2.76e+04, self-repaired-proportion=0.116678, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0001 0.01,0.04,0.32,1.2,1.6 2.1,2.5,2.7,3.6), mean=0.625, stddev=0.717], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0008 0.05,0.12,0.43,0.76,0.85 0.88,0.93,0.97,0.99), mean=0.436, stddev=0.295], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.005,0.005 0.005,0.006,0.007,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.00807, stddev=0.00298], oderiv-count=46080
component name=tdnn7.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn8.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000709727, max-change=0.75, linear-params-rms=0.0458, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.93,0.95,0.97 0.98,0.99,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.04, stddev=0.0469], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.65,0.66,0.67 0.68,0.69,0.73,0.77,0.78 0.80,0.82,0.83,0.89), mean=0.732, stddev=0.0401], bias-{mean,stddev}=-0.003117,1.066, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn8.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.92e+04, self-repaired-proportion=0.218967, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,9e-07 0.001,0.01,0.34,1.1,1.7 2.1,2.7,3.0,3.5), mean=0.644, stddev=0.748], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,5e-05 0.007,0.06,0.40,0.77,0.85 0.91,0.95,0.97,0.99), mean=0.42, stddev=0.317], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.006,0.006 0.006,0.006,0.008,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.00914, stddev=0.00299], oderiv-count=33280
component name=tdnn8.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn9.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000709727, max-change=0.75, linear-params-rms=0.04594, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.94,0.95,0.97 0.99,1.0,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.04, stddev=0.0455], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.65,0.66,0.67 0.69,0.70,0.73,0.76,0.79 0.81,0.83,0.83,0.86), mean=0.734, stddev=0.0409], bias-{mean,stddev}=-0.03458,0.9974, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn9.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.74e+04, self-repaired-proportion=0.152549, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0003 0.007,0.03,0.36,1.1,1.5 1.8,2.6,3.0,3.8), mean=0.607, stddev=0.703], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.002 0.04,0.11,0.41,0.74,0.84 0.90,0.93,0.96,1.0), mean=0.425, stddev=0.297], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.007,0.007,0.008 0.008,0.009,0.01,0.02,0.02 0.02,0.02,0.02,0.02), mean=0.0118, stddev=0.00343], oderiv-count=33792
component name=tdnn9.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn10.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000709727, max-change=0.75, linear-params-rms=0.04612, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.96,0.96 0.98,1.0,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.04, stddev=0.0473], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.65,0.66,0.67 0.68,0.70,0.73,0.77,0.79 0.81,0.84,0.85,0.87), mean=0.737, stddev=0.0431], bias-{mean,stddev}=0.0654,1.074, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn10.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.31e+04, self-repaired-proportion=0.213759, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,2e-05 0.003,0.04,0.39,1.4,1.8 2.1,2.5,2.6,3.3), mean=0.68, stddev=0.731], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0002 0.01,0.09,0.46,0.80,0.88 0.96,0.98,0.98,1.0), mean=0.455, stddev=0.322], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.009,0.01,0.01 0.01,0.01,0.01,0.02,0.02 0.02,0.02,0.03,0.03), mean=0.0149, stddev=0.004], oderiv-count=20736
component name=tdnn10.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn11.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000709727, max-change=0.75, linear-params-rms=0.04642, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.93,0.95,0.96 0.98,1.0,1.0,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.05, stddev=0.0523], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.66,0.67 0.68,0.70,0.73,0.78,0.81 0.82,0.86,0.87,0.89), mean=0.741, stddev=0.0473], bias-{mean,stddev}=-0.03501,1.048, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn11.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.18e+04, self-repaired-proportion=0.271484, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.0004,0.009,0.30,1.1,1.8 2.3,2.5,2.7,4.0), mean=0.628, stddev=0.763], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.003,0.05,0.38,0.74,0.90 0.96,0.98,1.0,1.0), mean=0.413, stddev=0.325], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.04,0.04,0.04), mean=0.0227, stddev=0.00599], oderiv-count=12800
component name=tdnn11.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnnFINAL.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000709727, max-change=0.75, linear-params-rms=0.04691, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.92,0.95,0.97 0.98,1.0,1.1,1.1,1.1 1.2,1.2,1.2,1.3), mean=1.06, stddev=0.0667], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.65,0.65,0.67 0.68,0.70,0.74,0.79,0.83 0.85,0.88,0.89,0.96), mean=0.748, stddev=0.056], bias-{mean,stddev}=-0.07706,0.9503, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnnFINAL.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=5.38e+03, self-repaired-proportion=0.284598, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 8e-05,0.006,0.26,1.2,1.7 2.2,2.5,3.2,4.0), mean=0.606, stddev=0.777], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.001,0.03,0.35,0.74,0.85 0.94,0.98,0.99,1.0), mean=0.389, stddev=0.324], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.03,0.05,0.05 0.06,0.06,0.06,0.07), mean=0.0378, stddev=0.0112], oderiv-count=7168
component name=tdnnFINAL.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=prefinal-affine-task-0.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=256, learning-rate=0.000709727, max-change=0.75, linear-params-rms=0.06561, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.92,0.93,0.94 0.96,0.99,1.0,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.05, stddev=0.0657], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.92,0.93,0.95 0.96,0.99,1.0,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.05, stddev=0.0671], bias-{mean,stddev}=-0.0004298,1.011, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-affine-task-0.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.61e+03, self-repaired-proportion=0.254395, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.0003,0.02,0.32,1.2,1.5 1.9,2.1,2.2,2.9), mean=0.584, stddev=0.645], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.003,0.07,0.41,0.82,0.92 0.96,0.98,0.99,0.99), mean=0.444, stddev=0.332], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-08,7e-08,8e-08,2e-07 0.0002,0.008,0.04,0.06,0.06 0.07,0.07,0.08,0.08), mean=0.0344, stddev=0.0233], oderiv-count=7680
component name=prefinal-affine-task-0.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output-0.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=96, learning-rate=0.000709727, max-change=1.5, linear-params-rms=0.05256, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.22,0.22,0.55 0.66,0.69,0.79,0.93,1.0 1.2,1.2,1.4,1.7), mean=0.817, stddev=0.201], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-07,9e-07,1e-06,3e-06 0.003,0.09,0.47,0.70,0.78 0.87,0.91,1.0,1.1), mean=0.422, stddev=0.295], bias-{mean,stddev}=-6.36e-08,0.0137, rank-in=20, rank-out=48, num-samples-history=2000, update-period=4, alpha=4
component name=output-0.log-softmax type=LogSoftmaxComponent, dim=96, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.04 0.06,0.07,0.09,0.11,0.14 0.15,0.22,0.27,0.29), mean=0.0925, stddev=0.0432], oderiv-count=7168
nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/13.raw MTL/exp/nnet3/multitask/14.raw 
LOG (nnet3-show-progress[5.4.217~1-8ae5]:SelectGpuId():cu-device.cc:123) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.709876 tdnn2.affine:0.414311 tdnn3.affine:0.516752 tdnn4.affine:0.470147 tdnn5.affine:0.437372 tdnn6.affine:0.39767 tdnn7.affine:0.382584 tdnn8.affine:0.388657 tdnn9.affine:0.41965 tdnn10.affine:0.463842 tdnn11.affine:0.545583 tdnnFINAL.affine:0.664687 prefinal-affine-task-0.affine:0.521905 output-0.affine:0.78086 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:25.5856 tdnn2.affine:23.9589 tdnn3.affine:23.0284 tdnn4.affine:23.381 tdnn5.affine:22.8864 tdnn6.affine:23.9296 tdnn7.affine:23.3813 tdnn8.affine:23.791 tdnn9.affine:23.0552 tdnn10.affine:23.9867 tdnn11.affine:23.7498 tdnnFINAL.affine:22.828 prefinal-affine-task-0.affine:23.3187 output-0.affine:8.24015 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0278545 tdnn2.affine:0.0173056 tdnn3.affine:0.022466 tdnn4.affine:0.020131 tdnn5.affine:0.019132 tdnn6.affine:0.0166343 tdnn7.affine:0.0163768 tdnn8.affine:0.0163504 tdnn9.affine:0.0182187 tdnn10.affine:0.0193553 tdnn11.affine:0.0229977 tdnnFINAL.affine:0.0291663 prefinal-affine-task-0.affine:0.0224147 output-0.affine:0.0967889 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Tue Jul 24 11:15:20 UTC 2018, elapsed time 0 seconds
