# nnet3-info MTL/exp/nnet3/multitask/21.raw && nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/20.raw MTL/exp/nnet3/multitask/21.raw 
# Started at Fri Jul 27 01:24:23 UTC 2018
#
nnet3-info MTL/exp/nnet3/multitask/21.raw 
num-parameters: 13891160
modulus: 1
input-node name=input dim=13
component-node name=tdnn1.affine component=tdnn1.affine input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=65 output-dim=768
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=768 output-dim=768
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=768 output-dim=768
component-node name=tdnn2.affine component=tdnn2.affine input=tdnn1.renorm input-dim=768 output-dim=768
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=768 output-dim=768
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=768 output-dim=768
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -1), Offset(tdnn2.renorm, 2)) input-dim=1536 output-dim=768
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=768 output-dim=768
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=768 output-dim=768
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -3), Offset(tdnn3.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=768 output-dim=768
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=768 output-dim=768
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -3), Offset(tdnn4.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=768 output-dim=768
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=768 output-dim=768
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.renorm, -3), Offset(tdnn5.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=768 output-dim=768
component-node name=tdnn6.renorm component=tdnn6.renorm input=tdnn6.relu input-dim=768 output-dim=768
component-node name=tdnn7.affine component=tdnn7.affine input=Append(Offset(tdnn6.renorm, -3), Offset(tdnn6.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn7.relu component=tdnn7.relu input=tdnn7.affine input-dim=768 output-dim=768
component-node name=tdnn7.renorm component=tdnn7.renorm input=tdnn7.relu input-dim=768 output-dim=768
component-node name=tdnn8.affine component=tdnn8.affine input=Append(Offset(tdnn7.renorm, -3), Offset(tdnn7.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn8.relu component=tdnn8.relu input=tdnn8.affine input-dim=768 output-dim=768
component-node name=tdnn8.renorm component=tdnn8.renorm input=tdnn8.relu input-dim=768 output-dim=768
component-node name=tdnn9.affine component=tdnn9.affine input=Append(Offset(tdnn8.renorm, -3), Offset(tdnn8.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn9.relu component=tdnn9.relu input=tdnn9.affine input-dim=768 output-dim=768
component-node name=tdnn9.renorm component=tdnn9.renorm input=tdnn9.relu input-dim=768 output-dim=768
component-node name=tdnn10.affine component=tdnn10.affine input=Append(Offset(tdnn9.renorm, -3), Offset(tdnn9.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn10.relu component=tdnn10.relu input=tdnn10.affine input-dim=768 output-dim=768
component-node name=tdnn10.renorm component=tdnn10.renorm input=tdnn10.relu input-dim=768 output-dim=768
component-node name=tdnn11.affine component=tdnn11.affine input=Append(Offset(tdnn10.renorm, -3), Offset(tdnn10.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn11.relu component=tdnn11.relu input=tdnn11.affine input-dim=768 output-dim=768
component-node name=tdnn11.renorm component=tdnn11.renorm input=tdnn11.relu input-dim=768 output-dim=768
component-node name=tdnnFINAL.affine component=tdnnFINAL.affine input=Append(Offset(tdnn11.renorm, -3), Offset(tdnn11.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnnFINAL.relu component=tdnnFINAL.relu input=tdnnFINAL.affine input-dim=768 output-dim=768
component-node name=tdnnFINAL.renorm component=tdnnFINAL.renorm input=tdnnFINAL.relu input-dim=768 output-dim=768
component-node name=prefinal-affine-task-0.affine component=prefinal-affine-task-0.affine input=tdnnFINAL.renorm input-dim=768 output-dim=768
component-node name=prefinal-affine-task-0.relu component=prefinal-affine-task-0.relu input=prefinal-affine-task-0.affine input-dim=768 output-dim=768
component-node name=prefinal-affine-task-0.renorm component=prefinal-affine-task-0.renorm input=prefinal-affine-task-0.relu input-dim=768 output-dim=768
component-node name=output-0.affine component=output-0.affine input=prefinal-affine-task-0.renorm input-dim=768 output-dim=152
component-node name=output-0.log-softmax component=output-0.log-softmax input=output-0.affine input-dim=152 output-dim=152
output-node name=output-0 input=output-0.log-softmax dim=152 objective=linear
component-node name=prefinal-affine-task-1.affine component=prefinal-affine-task-1.affine input=tdnnFINAL.renorm input-dim=768 output-dim=768
component-node name=prefinal-affine-task-1.relu component=prefinal-affine-task-1.relu input=prefinal-affine-task-1.affine input-dim=768 output-dim=768
component-node name=prefinal-affine-task-1.renorm component=prefinal-affine-task-1.renorm input=prefinal-affine-task-1.relu input-dim=768 output-dim=768
component-node name=output-1.affine component=output-1.affine input=prefinal-affine-task-1.renorm input-dim=768 output-dim=192
component-node name=output-1.log-softmax component=output-1.log-softmax input=output-1.affine input-dim=192 output-dim=192
output-node name=output-1 input=output-1.log-softmax dim=192 objective=linear
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=65, output-dim=768, learning-rate=0.000843512, max-change=0.75, linear-params-rms=0.1384, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.82,0.85,0.89 0.93,0.98,1.1,1.2,1.3 1.4,1.4,1.5,1.6), mean=1.11, stddev=0.144], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.1,3.1,3.4,3.5 3.6,3.6,3.8,4.0,4.0 4.2,4.2,4.3,4.5), mean=3.83, stddev=0.214], bias-{mean,stddev}=0.03044,1.03, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=1.89e+05, self-repaired-proportion=0.0386285, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.02,0.02 0.03,0.05,0.29,1.5,1.9 2.2,2.7,3.0,5.0), mean=0.695, stddev=0.81], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.06 0.07,0.10,0.37,0.88,0.93 0.94,0.95,0.95,0.96), mean=0.457, stddev=0.34], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.002,0.003,0.004 0.004,0.004,0.005,0.005), mean=0.00267, stddev=0.000728], oderiv-count=286720
component name=tdnn1.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=768, learning-rate=0.000843512, max-change=0.75, linear-params-rms=0.0373, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.96,0.96,0.98 0.99,1.0,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.03, stddev=0.0348], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.96,0.96,0.98 0.99,1.0,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.03, stddev=0.0397], bias-{mean,stddev}=0.01177,1.051, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=2.36e+05, self-repaired-proportion=0.020411, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.01,0.02,0.02 0.04,0.07,0.27,0.90,1.2 1.4,1.7,1.9,2.5), mean=0.484, stddev=0.486], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.07,0.08 0.11,0.18,0.43,0.79,0.87 0.91,0.93,0.94,0.95), mean=0.47, stddev=0.282], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.003 0.003,0.003,0.003,0.004,0.005 0.005,0.005,0.005,0.006), mean=0.00348, stddev=0.000715], oderiv-count=261120
component name=tdnn2.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000843512, max-change=0.75, linear-params-rms=0.02676, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.97,0.98,0.99 1.0,1.0,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.05, stddev=0.0346], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.67,0.68,0.69 0.70,0.71,0.74,0.77,0.79 0.80,0.82,0.83,0.89), mean=0.741, stddev=0.0331], bias-{mean,stddev}=0.01779,1.008, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=1.15e+05, self-repaired-proportion=0.00904605, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.01,0.02,0.03 0.04,0.09,0.35,0.96,1.4 1.7,2.0,2.1,2.5), mean=0.547, stddev=0.542], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.07,0.09 0.12,0.18,0.41,0.71,0.82 0.88,0.92,0.94,0.95), mean=0.444, stddev=0.254], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.003 0.003,0.004,0.004,0.005,0.006 0.006,0.007,0.007,0.008), mean=0.00454, stddev=0.00101], oderiv-count=143360
component name=tdnn3.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000843512, max-change=0.75, linear-params-rms=0.02686, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.97,0.98,1.0 1.0,1.0,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.05, stddev=0.0368], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.67,0.68,0.69 0.70,0.71,0.74,0.78,0.80 0.81,0.83,0.84,0.89), mean=0.743, stddev=0.0366], bias-{mean,stddev}=0.007432,1.004, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=8.06e+04, self-repaired-proportion=0.00548453, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.02,0.02,0.03 0.05,0.09,0.30,0.88,1.2 1.5,1.9,2.1,2.7), mean=0.497, stddev=0.501], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.06,0.07,0.09 0.11,0.19,0.38,0.66,0.77 0.84,0.90,0.93,0.96), mean=0.418, stddev=0.237], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.004,0.004,0.005,0.006,0.007 0.007,0.008,0.008,0.009), mean=0.00518, stddev=0.00106], oderiv-count=129024
component name=tdnn4.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000843512, max-change=0.75, linear-params-rms=0.02702, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.98,0.99,1.0 1.0,1.0,1.1,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.06, stddev=0.0382], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.68,0.69,0.70 0.70,0.71,0.74,0.78,0.80 0.82,0.84,0.85,0.90), mean=0.748, stddev=0.0383], bias-{mean,stddev}=0.02201,1.015, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=6.55e+04, self-repaired-proportion=0.0080819, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.02,0.02,0.04 0.06,0.13,0.37,0.83,1.2 1.5,1.7,2.0,2.3), mean=0.512, stddev=0.459], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.05,0.06,0.11 0.14,0.22,0.42,0.65,0.75 0.83,0.89,0.91,0.94), mean=0.437, stddev=0.223], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.005,0.005,0.006,0.007,0.007 0.007,0.008,0.008,0.009), mean=0.00568, stddev=0.000977], oderiv-count=102400
component name=tdnn5.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000843512, max-change=0.75, linear-params-rms=0.02718, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,0.98,0.99,1.0 1.0,1.0,1.1,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.06, stddev=0.0392], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.68,0.69,0.70 0.71,0.72,0.75,0.78,0.80 0.81,0.83,0.84,0.89), mean=0.752, stddev=0.0367], bias-{mean,stddev}=0.04585,1.007, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=8.24e+04, self-repaired-proportion=0.00998264, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.02,0.02,0.04 0.06,0.12,0.40,0.86,1.2 1.5,1.7,1.9,2.6), mean=0.524, stddev=0.466], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.06,0.07,0.10 0.13,0.21,0.44,0.66,0.78 0.84,0.90,0.92,0.99), mean=0.445, stddev=0.232], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.005,0.005 0.005,0.006,0.007,0.008,0.008 0.008,0.009,0.009,0.01), mean=0.00666, stddev=0.00108], oderiv-count=91392
component name=tdnn6.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn7.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000843512, max-change=0.75, linear-params-rms=0.02741, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,0.98,0.99,1.0 1.0,1.0,1.1,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.07, stddev=0.0432], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.68,0.69,0.70 0.71,0.72,0.76,0.80,0.81 0.83,0.84,0.85,0.90), mean=0.758, stddev=0.0402], bias-{mean,stddev}=0.01653,0.9738, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn7.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=5.68e+04, self-repaired-proportion=0.00987161, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.02,0.03,0.05 0.07,0.11,0.35,0.81,1.1 1.4,1.8,1.9,3.7), mean=0.497, stddev=0.459], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.06,0.08,0.11 0.15,0.22,0.41,0.64,0.74 0.84,0.90,0.93,0.97), mean=0.433, stddev=0.223], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.006,0.006 0.006,0.007,0.008,0.009,0.01 0.01,0.01,0.01,0.01), mean=0.008, stddev=0.00126], oderiv-count=89088
component name=tdnn7.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn8.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000843512, max-change=0.75, linear-params-rms=0.02754, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,0.98,0.99,1.0 1.0,1.0,1.1,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.08, stddev=0.0466], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.69,0.69,0.70 0.71,0.72,0.76,0.80,0.82 0.83,0.85,0.86,0.90), mean=0.762, stddev=0.0409], bias-{mean,stddev}=-0.05805,1.063, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn8.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=4.74e+04, self-repaired-proportion=0.0404369, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0005,0.005,0.02 0.04,0.10,0.37,0.85,1.2 1.4,1.8,2.0,2.7), mean=0.502, stddev=0.464], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.003,0.02,0.07 0.11,0.19,0.42,0.66,0.78 0.83,0.90,0.91,0.97), mean=0.43, stddev=0.243], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.007,0.007,0.007 0.007,0.008,0.009,0.01,0.01 0.01,0.01,0.01,0.01), mean=0.00947, stddev=0.00154], oderiv-count=67840
component name=tdnn8.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn9.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000843512, max-change=0.75, linear-params-rms=0.02765, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,0.98,0.99,1.0 1.0,1.0,1.1,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.08, stddev=0.0499], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.68,0.69,0.70 0.71,0.72,0.76,0.81,0.83 0.84,0.85,0.86,0.88), mean=0.765, stddev=0.0438], bias-{mean,stddev}=-0.05936,0.9981, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn9.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=3.58e+04, self-repaired-proportion=0.0582031, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0001,0.003,0.01 0.04,0.10,0.36,0.81,1.1 1.4,1.7,1.9,2.4), mean=0.49, stddev=0.45], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0008,0.01,0.05 0.10,0.19,0.42,0.66,0.77 0.85,0.89,0.93,0.99), mean=0.427, stddev=0.242], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.007,0.007,0.008 0.008,0.008,0.01,0.01,0.01 0.01,0.01,0.01,0.01), mean=0.0102, stddev=0.00171], oderiv-count=55296
component name=tdnn9.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn10.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000843512, max-change=0.75, linear-params-rms=0.02762, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,0.98,0.99,1.0 1.0,1.0,1.1,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.08, stddev=0.0492], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.68,0.69,0.70 0.71,0.72,0.76,0.80,0.82 0.83,0.85,0.85,0.89), mean=0.764, stddev=0.0423], bias-{mean,stddev}=0.0292,1.027, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn10.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=2.84e+04, self-repaired-proportion=0.0732422, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,1e-05,0.0008,0.01 0.04,0.09,0.37,0.88,1.2 1.5,1.8,2.0,2.5), mean=0.511, stddev=0.479], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0001,0.004,0.04 0.09,0.19,0.42,0.69,0.79 0.86,0.93,0.95,0.99), mean=0.437, stddev=0.255], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.008,0.008,0.009 0.009,0.009,0.01,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.0116, stddev=0.00208], oderiv-count=43008
component name=tdnn10.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn11.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000843512, max-change=0.75, linear-params-rms=0.0276, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.97,0.98,0.99 1.0,1.0,1.1,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.08, stddev=0.0531], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.69,0.69,0.70 0.71,0.72,0.76,0.80,0.82 0.83,0.85,0.86,0.90), mean=0.764, stddev=0.0422], bias-{mean,stddev}=0.03176,1.019, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn11.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=2e+04, self-repaired-proportion=0.124099, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,5e-05,0.0002,0.003 0.01,0.08,0.34,0.89,1.3 1.6,2.0,2.2,2.6), mean=0.515, stddev=0.523], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0003,0.001,0.01 0.05,0.15,0.41,0.69,0.82 0.90,0.95,0.97,1.0), mean=0.426, stddev=0.272], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.009,0.009,0.01 0.01,0.01,0.01,0.02,0.02 0.02,0.02,0.02,0.02), mean=0.0128, stddev=0.00231], oderiv-count=28160
component name=tdnn11.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnnFINAL.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000843512, max-change=0.75, linear-params-rms=0.02771, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,0.97,0.98,0.99 1.0,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.2), mean=1.08, stddev=0.058], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.67,0.69,0.70 0.71,0.72,0.76,0.81,0.83 0.85,0.87,0.88,0.90), mean=0.766, stddev=0.0484], bias-{mean,stddev}=-0.06726,0.9592, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnnFINAL.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=9.98e+03, self-repaired-proportion=0.126426, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0001,0.0008 0.008,0.05,0.34,0.78,1.1 1.3,1.6,1.8,2.4), mean=0.45, stddev=0.43], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0008,0.004 0.03,0.13,0.39,0.62,0.73 0.80,0.87,0.92,0.99), mean=0.392, stddev=0.251], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.02,0.02,0.02,0.03 0.03,0.03,0.03,0.03), mean=0.0201, stddev=0.00428], oderiv-count=16640
component name=tdnnFINAL.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=prefinal-affine-task-0.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=768, learning-rate=0.000843512, max-change=0.75, linear-params-rms=0.03777, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.96,0.96,0.97 0.99,1.0,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.05, stddev=0.0474], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.96,0.97,0.98 0.99,1.0,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.05, stddev=0.044], bias-{mean,stddev}=0.0009511,1.006, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-affine-task-0.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=6.4e+03, self-repaired-proportion=0.144893, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,1e-05,0.0004 0.004,0.03,0.30,0.82,1.0 1.2,1.4,1.6,2.1), mean=0.435, stddev=0.422], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0002,0.002 0.02,0.09,0.40,0.69,0.78 0.85,0.89,0.91,0.96), mean=0.407, stddev=0.279], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-08,3e-06,6e-05,0.0003 0.001,0.005,0.02,0.03,0.03 0.03,0.04,0.04,0.04), mean=0.0194, stddev=0.0119], oderiv-count=7936
component name=prefinal-affine-task-0.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=output-0.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=152, learning-rate=0.000843512, max-change=1.5, linear-params-rms=0.03957, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.33,0.75,0.83 0.89,0.97,1.1,1.2,1.3 1.3,1.4,1.4,1.5), mean=1.08, stddev=0.177], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-07,4e-05,0.001,0.006 0.03,0.09,0.48,0.66,0.70 0.75,0.79,0.81,0.91), mean=0.411, stddev=0.263], bias-{mean,stddev}=-4.824e-08,0.003208, rank-in=20, rank-out=76, num-samples-history=2000, update-period=4, alpha=4
component name=output-0.log-softmax type=LogSoftmaxComponent, dim=152, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.009,0.02,0.02 0.03,0.04,0.05,0.07,0.08 0.09,0.13,0.19,0.24), mean=0.057, stddev=0.0311], oderiv-count=7680
component name=prefinal-affine-task-1.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=768, learning-rate=0.000843512, max-change=0.75, linear-params-rms=0.03612, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.94,0.95,0.96 0.97,0.98,1.0,1.0,1.0 1.0,1.1,1.1,1.1), mean=1, stddev=0.0258], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.95,0.96 0.97,0.98,1.0,1.0,1.0 1.0,1.1,1.1,1.1), mean=1, stddev=0.0256], bias-{mean,stddev}=-0.06994,1.031, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-affine-task-1.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=3.58e+03, self-repaired-proportion=0.194422, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,5e-06,0.0003 0.003,0.02,0.29,0.74,1.0 1.2,1.4,1.5,2.2), mean=0.403, stddev=0.408], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0003,0.002 0.01,0.07,0.46,0.78,0.87 0.91,0.95,0.97,0.99), mean=0.442, stddev=0.318], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-09,4e-07,9e-06,4e-05 0.0002,0.0009,0.005,0.007,0.008 0.008,0.009,0.01,0.01), mean=0.00448, stddev=0.00295], oderiv-count=6400
component name=prefinal-affine-task-1.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=output-1.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=192, learning-rate=0.000843512, max-change=1.5, linear-params-rms=0.01876, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.07 0.07,0.07,0.07,0.77,0.84 0.88,0.92,0.93,0.96), mean=0.385, stddev=0.35], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,2e-05,0.0003,0.002 0.009,0.04,0.25,0.35,0.39 0.41,0.44,0.45,0.49), mean=0.216, stddev=0.144], bias-{mean,stddev}=1.992e-08,0.002, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-1.log-softmax type=LogSoftmaxComponent, dim=192, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.02,0.02 0.03,0.05,0.05,0.07), mean=0.00807, stddev=0.012], oderiv-count=8192
nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/20.raw MTL/exp/nnet3/multitask/21.raw 
LOG (nnet3-show-progress[5.4.217~1-8ae5]:SelectGpuId():cu-device.cc:123) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:1.23961 tdnn2.affine:1.00785 tdnn3.affine:1.33594 tdnn4.affine:1.43256 tdnn5.affine:1.50814 tdnn6.affine:1.59784 tdnn7.affine:1.71221 tdnn8.affine:1.78486 tdnn9.affine:1.83296 tdnn10.affine:1.79887 tdnn11.affine:1.75359 tdnnFINAL.affine:1.76789 prefinal-affine-task-0.affine:1.09945 output-0.affine:1.01335 prefinal-affine-task-1.affine:0.305056 output-1.affine:0.357327 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:42.0897 tdnn2.affine:40.8587 tdnn3.affine:40.3168 tdnn4.affine:40.3114 tdnn5.affine:40.6462 tdnn6.affine:40.6472 tdnn7.affine:40.1823 tdnn8.affine:42.0107 tdnn9.affine:40.8628 tdnn10.affine:41.364 tdnn11.affine:41.1957 tdnnFINAL.affine:40.1956 prefinal-affine-task-0.affine:40.2357 output-0.affine:13.5186 prefinal-affine-task-1.affine:39.8778 output-1.affine:7.20224 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0295018 tdnn2.affine:0.024678 tdnn3.affine:0.0331621 tdnn4.affine:0.0355696 tdnn5.affine:0.0371437 tdnn6.affine:0.0393601 tdnn7.affine:0.0426723 tdnn8.affine:0.0425455 tdnn9.affine:0.0449252 tdnn10.affine:0.0435513 tdnn11.affine:0.0426217 tdnnFINAL.affine:0.0440408 prefinal-affine-task-0.affine:0.0273407 output-0.affine:0.0757518 prefinal-affine-task-1.affine:0.00765 output-1.affine:0.0503768 ]
# Accounting: time=3 threads=1
# Ended (code 0) at Fri Jul 27 01:24:27 UTC 2018, elapsed time 3 seconds
