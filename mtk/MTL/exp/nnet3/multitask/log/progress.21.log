# nnet3-info MTL/exp/nnet3/multitask/21.raw && nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/20.raw MTL/exp/nnet3/multitask/21.raw 
# Started at Tue Jul 24 11:16:25 UTC 2018
#
nnet3-info MTL/exp/nnet3/multitask/21.raw 
num-parameters: 1486432
modulus: 1
input-node name=input dim=13
component-node name=tdnn1.affine component=tdnn1.affine input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=65 output-dim=256
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=256 output-dim=256
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=256 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=tdnn1.renorm input-dim=256 output-dim=256
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=256 output-dim=256
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=256 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -1), Offset(tdnn2.renorm, 2)) input-dim=512 output-dim=256
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=256 output-dim=256
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=256 output-dim=256
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -3), Offset(tdnn3.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=256 output-dim=256
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=256 output-dim=256
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -3), Offset(tdnn4.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.renorm, -3), Offset(tdnn5.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=256 output-dim=256
component-node name=tdnn6.renorm component=tdnn6.renorm input=tdnn6.relu input-dim=256 output-dim=256
component-node name=tdnn7.affine component=tdnn7.affine input=Append(Offset(tdnn6.renorm, -3), Offset(tdnn6.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn7.relu component=tdnn7.relu input=tdnn7.affine input-dim=256 output-dim=256
component-node name=tdnn7.renorm component=tdnn7.renorm input=tdnn7.relu input-dim=256 output-dim=256
component-node name=tdnn8.affine component=tdnn8.affine input=Append(Offset(tdnn7.renorm, -3), Offset(tdnn7.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn8.relu component=tdnn8.relu input=tdnn8.affine input-dim=256 output-dim=256
component-node name=tdnn8.renorm component=tdnn8.renorm input=tdnn8.relu input-dim=256 output-dim=256
component-node name=tdnn9.affine component=tdnn9.affine input=Append(Offset(tdnn8.renorm, -3), Offset(tdnn8.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn9.relu component=tdnn9.relu input=tdnn9.affine input-dim=256 output-dim=256
component-node name=tdnn9.renorm component=tdnn9.renorm input=tdnn9.relu input-dim=256 output-dim=256
component-node name=tdnn10.affine component=tdnn10.affine input=Append(Offset(tdnn9.renorm, -3), Offset(tdnn9.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn10.relu component=tdnn10.relu input=tdnn10.affine input-dim=256 output-dim=256
component-node name=tdnn10.renorm component=tdnn10.renorm input=tdnn10.relu input-dim=256 output-dim=256
component-node name=tdnn11.affine component=tdnn11.affine input=Append(Offset(tdnn10.renorm, -3), Offset(tdnn10.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn11.relu component=tdnn11.relu input=tdnn11.affine input-dim=256 output-dim=256
component-node name=tdnn11.renorm component=tdnn11.renorm input=tdnn11.relu input-dim=256 output-dim=256
component-node name=tdnnFINAL.affine component=tdnnFINAL.affine input=Append(Offset(tdnn11.renorm, -3), Offset(tdnn11.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnnFINAL.relu component=tdnnFINAL.relu input=tdnnFINAL.affine input-dim=256 output-dim=256
component-node name=tdnnFINAL.renorm component=tdnnFINAL.renorm input=tdnnFINAL.relu input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.affine component=prefinal-affine-task-0.affine input=tdnnFINAL.renorm input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.relu component=prefinal-affine-task-0.relu input=prefinal-affine-task-0.affine input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.renorm component=prefinal-affine-task-0.renorm input=prefinal-affine-task-0.relu input-dim=256 output-dim=256
component-node name=output-0.affine component=output-0.affine input=prefinal-affine-task-0.renorm input-dim=256 output-dim=96
component-node name=output-0.log-softmax component=output-0.log-softmax input=output-0.affine input-dim=96 output-dim=96
output-node name=output-0 input=output-0.log-softmax dim=96 objective=linear
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=65, output-dim=256, learning-rate=0.000474342, max-change=0.75, linear-params-rms=0.1493, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.87,0.89,0.92 0.95,1.0,1.2,1.4,1.5 1.6,1.6,1.7,1.8), mean=1.19, stddev=0.204], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.0,2.0,2.0 2.1,2.1,2.3,2.7,2.7 2.8,2.9,3.0,3.1), mean=2.37, stddev=0.269], bias-{mean,stddev}=0.01706,1.1, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=7.68e+04, self-repaired-proportion=0.0483398, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.04,0.07,0.34,1.6,2.0 2.7,3.2,3.5,6.0), mean=0.787, stddev=0.963], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.06 0.08,0.13,0.34,0.85,0.92 0.94,0.95,0.95,0.98), mean=0.448, stddev=0.319], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.004,0.004 0.004,0.004,0.005,0.007,0.008 0.009,0.01,0.01,0.01), mean=0.00576, stddev=0.00173], oderiv-count=133120
component name=tdnn1.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=256, learning-rate=0.000474342, max-change=0.75, linear-params-rms=0.06478, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.89,0.91,0.94 0.96,0.99,1.0,1.1,1.1 1.1,1.1,1.2,1.2), mean=1.03, stddev=0.0583], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.92,0.92,0.94 0.96,0.98,1.0,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.03, stddev=0.0593], bias-{mean,stddev}=0.03402,1.089, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.18e+05, self-repaired-proportion=0.0514323, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.01,0.01,0.02 0.03,0.06,0.31,0.88,1.1 1.4,1.7,1.9,3.6), mean=0.488, stddev=0.519], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.07 0.10,0.17,0.44,0.74,0.85 0.91,0.95,0.96,0.99), mean=0.461, stddev=0.274], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.005,0.006 0.006,0.007,0.008,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.00866, stddev=0.00251], oderiv-count=128000
component name=tdnn2.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000474342, max-change=0.75, linear-params-rms=0.04695, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.97,0.98 0.99,1.0,1.1,1.1,1.1 1.2,1.2,1.2,1.3), mean=1.06, stddev=0.0596], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.65,0.66,0.67 0.69,0.71,0.74,0.79,0.81 0.84,0.86,0.88,0.92), mean=0.75, stddev=0.0496], bias-{mean,stddev}=0.07209,0.9826, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=5.89e+04, self-repaired-proportion=0.0643503, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,5e-05,0.005,0.01 0.02,0.09,0.37,1.1,1.4 1.9,2.2,2.4,2.7), mean=0.602, stddev=0.615], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0007,0.02,0.06 0.09,0.18,0.44,0.74,0.82 0.89,0.93,0.97,0.99), mean=0.461, stddev=0.274], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.006,0.006 0.007,0.007,0.01,0.01,0.02 0.02,0.02,0.02,0.02), mean=0.0107, stddev=0.00392], oderiv-count=69120
component name=tdnn3.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000474342, max-change=0.75, linear-params-rms=0.04701, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.94,0.96,0.97 0.99,1.0,1.1,1.1,1.1 1.2,1.2,1.2,1.3), mean=1.06, stddev=0.0621], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.66,0.68 0.69,0.70,0.74,0.80,0.82 0.84,0.87,0.88,0.92), mean=0.75, stddev=0.0529], bias-{mean,stddev}=-0.04935,1.016, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=3.92e+04, self-repaired-proportion=0.0578125, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0001,0.002,0.01 0.02,0.06,0.32,1.0,1.4 1.9,2.2,2.9,3.2), mean=0.564, stddev=0.643], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0009,0.02,0.06 0.08,0.14,0.38,0.69,0.80 0.89,0.92,0.94,1.0), mean=0.418, stddev=0.271], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.006,0.006 0.007,0.007,0.01,0.01,0.02 0.02,0.02,0.02,0.03), mean=0.0107, stddev=0.00406], oderiv-count=71424
component name=tdnn4.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000474342, max-change=0.75, linear-params-rms=0.0467, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.94,0.97 0.99,1.0,1.1,1.1,1.1 1.2,1.2,1.2,1.3), mean=1.06, stddev=0.0578], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.65,0.67,0.68 0.69,0.70,0.74,0.79,0.82 0.84,0.87,0.88,0.93), mean=0.746, stddev=0.05], bias-{mean,stddev}=-0.1218,0.9712, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=3.28e+04, self-repaired-proportion=0.0744978, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,1e-05,0.0004,0.007 0.02,0.08,0.32,1.0,1.5 2.0,2.7,3.0,3.9), mean=0.588, stddev=0.701], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,9e-05,0.004,0.04 0.07,0.17,0.40,0.72,0.83 0.91,0.93,0.95,0.98), mean=0.429, stddev=0.276], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.006,0.006 0.006,0.007,0.009,0.01,0.01 0.02,0.02,0.02,0.02), mean=0.0102, stddev=0.00386], oderiv-count=59392
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000474342, max-change=0.75, linear-params-rms=0.04673, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.95,0.96,0.97 0.98,1.0,1.1,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.06, stddev=0.0567], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.66,0.66,0.68 0.69,0.70,0.74,0.78,0.81 0.84,0.86,0.87,0.90), mean=0.746, stddev=0.0486], bias-{mean,stddev}=0.08843,1.067, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.12e+04, self-repaired-proportion=0.090625, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,4e-07,0.0005,0.004 0.01,0.05,0.38,1.2,1.6 2.1,2.4,2.5,3.2), mean=0.621, stddev=0.677], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,2e-05,0.003,0.02 0.06,0.14,0.41,0.77,0.84 0.91,0.93,0.94,0.97), mean=0.446, stddev=0.294], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.006,0.006 0.007,0.007,0.01,0.01,0.02 0.02,0.02,0.02,0.02), mean=0.0105, stddev=0.0036], oderiv-count=43008
component name=tdnn6.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn7.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000474342, max-change=0.75, linear-params-rms=0.0467, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.96,0.98 1.0,1.0,1.1,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.06, stddev=0.0513], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.65,0.67 0.69,0.70,0.74,0.79,0.81 0.83,0.85,0.86,0.90), mean=0.746, stddev=0.0482], bias-{mean,stddev}=-0.02727,1.021, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn7.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=2.61e+04, self-repaired-proportion=0.0913318, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,5e-05,0.0007 0.02,0.06,0.33,1.2,1.5 2.0,2.3,2.6,3.3), mean=0.616, stddev=0.675], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0005,0.006 0.07,0.15,0.43,0.75,0.84 0.88,0.93,0.97,0.98), mean=0.444, stddev=0.284], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.007,0.007 0.007,0.008,0.01,0.01,0.02 0.02,0.02,0.02,0.03), mean=0.0111, stddev=0.00372], oderiv-count=46080
component name=tdnn7.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn8.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000474342, max-change=0.75, linear-params-rms=0.04634, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.95,0.97 0.98,0.99,1.0,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.05, stddev=0.0533], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.66,0.66,0.68 0.69,0.70,0.74,0.78,0.79 0.82,0.84,0.85,0.90), mean=0.74, stddev=0.0445], bias-{mean,stddev}=-0.00315,1.066, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn8.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=2.3e+04, self-repaired-proportion=0.154731, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,9e-06 0.004,0.02,0.36,1.1,1.6 2.0,2.6,2.7,3.4), mean=0.625, stddev=0.707], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0001 0.02,0.08,0.41,0.76,0.83 0.88,0.94,0.97,0.99), mean=0.42, stddev=0.306], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.008,0.008,0.008 0.009,0.009,0.01,0.02,0.02 0.02,0.02,0.02,0.03), mean=0.0127, stddev=0.00375], oderiv-count=33280
component name=tdnn8.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn9.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000474342, max-change=0.75, linear-params-rms=0.04652, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.95,0.96,0.98 0.99,1.0,1.0,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.05, stddev=0.051], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.65,0.66,0.68 0.69,0.70,0.74,0.78,0.81 0.83,0.85,0.86,0.89), mean=0.743, stddev=0.0462], bias-{mean,stddev}=-0.03464,0.9973, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn9.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.84e+04, self-repaired-proportion=0.124023, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0008 0.007,0.04,0.33,1.1,1.5 1.9,2.4,2.8,3.6), mean=0.597, stddev=0.669], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.006 0.04,0.11,0.42,0.73,0.83 0.89,0.92,0.96,0.99), mean=0.428, stddev=0.288], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.02,0.02,0.02 0.02,0.03,0.03,0.03), mean=0.0164, stddev=0.0044], oderiv-count=29696
component name=tdnn9.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn10.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000474342, max-change=0.75, linear-params-rms=0.04677, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.96,0.97 0.98,1.0,1.1,1.1,1.1 1.1,1.1,1.2,1.2), mean=1.06, stddev=0.0533], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.65,0.66,0.67 0.69,0.70,0.74,0.78,0.81 0.84,0.86,0.87,0.89), mean=0.747, stddev=0.0484], bias-{mean,stddev}=0.06535,1.074, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn10.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.23e+04, self-repaired-proportion=0.174913, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,5e-05 0.005,0.04,0.40,1.3,1.7 2.0,2.3,2.6,3.3), mean=0.663, stddev=0.697], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0006 0.02,0.12,0.44,0.80,0.87 0.93,0.97,0.98,1.0), mean=0.455, stddev=0.312], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0203, stddev=0.005], oderiv-count=21504
component name=tdnn10.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn11.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000474342, max-change=0.75, linear-params-rms=0.04718, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.93,0.96,0.97 0.99,1.0,1.1,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.07, stddev=0.0609], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.66,0.67 0.69,0.71,0.74,0.80,0.82 0.85,0.87,0.90,0.92), mean=0.753, stddev=0.0532], bias-{mean,stddev}=-0.03507,1.048, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn11.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=8.7e+03, self-repaired-proportion=0.226302, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.0004,0.02,0.29,1.1,1.8 2.2,2.3,2.7,3.7), mean=0.604, stddev=0.712], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.002,0.06,0.38,0.72,0.88 0.94,0.98,0.99,1.0), mean=0.413, stddev=0.313], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.04,0.04 0.04,0.05,0.05,0.05), mean=0.0302, stddev=0.00757], oderiv-count=15360
component name=tdnn11.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnnFINAL.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000474342, max-change=0.75, linear-params-rms=0.04787, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.92,0.95,0.97 0.98,1.0,1.1,1.1,1.2 1.2,1.2,1.3,1.3), mean=1.08, stddev=0.0787], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.65,0.66,0.67 0.69,0.71,0.75,0.82,0.85 0.88,0.91,0.93,0.98), mean=0.763, stddev=0.0652], bias-{mean,stddev}=-0.07719,0.9501, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnnFINAL.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=5.63e+03, self-repaired-proportion=0.238281, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.0005,0.01,0.28,1.2,1.6 1.9,2.3,3.0,3.7), mean=0.578, stddev=0.711], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.002,0.05,0.35,0.72,0.84 0.91,0.97,0.98,1.0), mean=0.388, stddev=0.31], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.06,0.07 0.07,0.08,0.08,0.09), mean=0.0486, stddev=0.0138], oderiv-count=8704
component name=tdnnFINAL.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=prefinal-affine-task-0.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=256, learning-rate=0.000474342, max-change=0.75, linear-params-rms=0.06684, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.92,0.93,0.95 0.97,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.07, stddev=0.0742], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.92,0.94,0.96 0.97,0.99,1.1,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.07, stddev=0.0787], bias-{mean,stddev}=-0.0008908,1.011, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-affine-task-0.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.61e+03, self-repaired-proportion=0.198103, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.0007,0.03,0.32,1.0,1.4 1.6,1.8,2.0,2.5), mean=0.535, stddev=0.555], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.005,0.10,0.42,0.77,0.88 0.93,0.95,0.96,0.98), mean=0.434, stddev=0.31], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-08,8e-08,1e-07,1e-05 0.0007,0.01,0.05,0.07,0.07 0.08,0.09,0.09,0.09), mean=0.0421, stddev=0.027], oderiv-count=7680
component name=prefinal-affine-task-0.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output-0.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=96, learning-rate=0.000474342, max-change=1.5, linear-params-rms=0.05967, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.22,0.24,0.65 0.76,0.81,0.92,1.0,1.1 1.3,1.3,1.5,1.7), mean=0.932, stddev=0.205], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-07,1e-06,2e-06,0.0001 0.009,0.11,0.55,0.78,0.87 0.95,1.0,1.1,1.1), mean=0.487, stddev=0.324], bias-{mean,stddev}=-6.366e-08,0.01375, rank-in=20, rank-out=48, num-samples-history=2000, update-period=4, alpha=4
component name=output-0.log-softmax type=LogSoftmaxComponent, dim=96, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.03 0.06,0.07,0.08,0.12,0.13 0.15,0.22,0.27,0.29), mean=0.0925, stddev=0.0432], oderiv-count=7424
nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/20.raw MTL/exp/nnet3/multitask/21.raw 
LOG (nnet3-show-progress[5.4.217~1-8ae5]:SelectGpuId():cu-device.cc:123) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.552805 tdnn2.affine:0.335684 tdnn3.affine:0.435614 tdnn4.affine:0.413857 tdnn5.affine:0.38489 tdnn6.affine:0.349746 tdnn7.affine:0.337591 tdnn8.affine:0.341533 tdnn9.affine:0.376971 tdnn10.affine:0.41054 tdnn11.affine:0.476974 tdnnFINAL.affine:0.552978 prefinal-affine-task-0.affine:0.413631 output-0.affine:0.524081 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:26.0908 tdnn2.affine:24.0586 tdnn3.affine:23.1831 tdnn4.affine:23.5494 tdnn5.affine:23.047 tdnn6.affine:24.0747 tdnn7.affine:23.5179 tdnn8.affine:23.9251 tdnn9.affine:23.2083 tdnn10.affine:24.15 tdnn11.affine:23.9429 tdnnFINAL.affine:23.0856 prefinal-affine-task-0.affine:23.5408 output-0.affine:9.35582 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0212425 tdnn2.affine:0.0139614 tdnn3.affine:0.0188085 tdnn4.affine:0.0175932 tdnn5.affine:0.0167193 tdnn6.affine:0.0145422 tdnn7.affine:0.0143678 tdnn8.affine:0.0142872 tdnn9.affine:0.0162593 tdnn10.affine:0.0170173 tdnn11.affine:0.0199463 tdnnFINAL.affine:0.0239947 prefinal-affine-task-0.affine:0.0175939 output-0.affine:0.0568134 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Tue Jul 24 11:16:25 UTC 2018, elapsed time 0 seconds
