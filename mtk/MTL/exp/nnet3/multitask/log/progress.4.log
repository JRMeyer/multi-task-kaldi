# nnet3-info MTL/exp/nnet3/multitask/4.raw && nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/3.raw MTL/exp/nnet3/multitask/4.raw 
# Started at Tue Jul 24 11:13:49 UTC 2018
#
nnet3-info MTL/exp/nnet3/multitask/4.raw 
num-parameters: 1486432
modulus: 1
input-node name=input dim=13
component-node name=tdnn1.affine component=tdnn1.affine input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=65 output-dim=256
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=256 output-dim=256
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=256 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=tdnn1.renorm input-dim=256 output-dim=256
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=256 output-dim=256
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=256 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -1), Offset(tdnn2.renorm, 2)) input-dim=512 output-dim=256
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=256 output-dim=256
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=256 output-dim=256
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -3), Offset(tdnn3.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=256 output-dim=256
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=256 output-dim=256
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -3), Offset(tdnn4.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.renorm, -3), Offset(tdnn5.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=256 output-dim=256
component-node name=tdnn6.renorm component=tdnn6.renorm input=tdnn6.relu input-dim=256 output-dim=256
component-node name=tdnn7.affine component=tdnn7.affine input=Append(Offset(tdnn6.renorm, -3), Offset(tdnn6.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn7.relu component=tdnn7.relu input=tdnn7.affine input-dim=256 output-dim=256
component-node name=tdnn7.renorm component=tdnn7.renorm input=tdnn7.relu input-dim=256 output-dim=256
component-node name=tdnn8.affine component=tdnn8.affine input=Append(Offset(tdnn7.renorm, -3), Offset(tdnn7.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn8.relu component=tdnn8.relu input=tdnn8.affine input-dim=256 output-dim=256
component-node name=tdnn8.renorm component=tdnn8.renorm input=tdnn8.relu input-dim=256 output-dim=256
component-node name=tdnn9.affine component=tdnn9.affine input=Append(Offset(tdnn8.renorm, -3), Offset(tdnn8.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn9.relu component=tdnn9.relu input=tdnn9.affine input-dim=256 output-dim=256
component-node name=tdnn9.renorm component=tdnn9.renorm input=tdnn9.relu input-dim=256 output-dim=256
component-node name=tdnn10.affine component=tdnn10.affine input=Append(Offset(tdnn9.renorm, -3), Offset(tdnn9.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn10.relu component=tdnn10.relu input=tdnn10.affine input-dim=256 output-dim=256
component-node name=tdnn10.renorm component=tdnn10.renorm input=tdnn10.relu input-dim=256 output-dim=256
component-node name=tdnn11.affine component=tdnn11.affine input=Append(Offset(tdnn10.renorm, -3), Offset(tdnn10.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn11.relu component=tdnn11.relu input=tdnn11.affine input-dim=256 output-dim=256
component-node name=tdnn11.renorm component=tdnn11.renorm input=tdnn11.relu input-dim=256 output-dim=256
component-node name=tdnnFINAL.affine component=tdnnFINAL.affine input=Append(Offset(tdnn11.renorm, -3), Offset(tdnn11.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnnFINAL.relu component=tdnnFINAL.relu input=tdnnFINAL.affine input-dim=256 output-dim=256
component-node name=tdnnFINAL.renorm component=tdnnFINAL.renorm input=tdnnFINAL.relu input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.affine component=prefinal-affine-task-0.affine input=tdnnFINAL.renorm input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.relu component=prefinal-affine-task-0.relu input=prefinal-affine-task-0.affine input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.renorm component=prefinal-affine-task-0.renorm input=prefinal-affine-task-0.relu input-dim=256 output-dim=256
component-node name=output-0.affine component=output-0.affine input=prefinal-affine-task-0.renorm input-dim=256 output-dim=96
component-node name=output-0.log-softmax component=output-0.log-softmax input=output-0.affine input-dim=96 output-dim=96
output-node name=output-0 input=output-0.log-softmax dim=96 objective=linear
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=65, output-dim=256, learning-rate=0.00126209, max-change=0.75, linear-params-rms=0.1291, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.82,0.85,0.87 0.89,0.94,1.0,1.1,1.2 1.2,1.3,1.4,1.5), mean=1.03, stddev=0.117], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.9 1.9,1.9,2.0,2.2,2.3 2.3,2.5,2.5,2.6), mean=2.06, stddev=0.167], bias-{mean,stddev}=0.01678,1.089, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=8.19e+04, self-repaired-proportion=0.276476, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.001,0.01 0.02,0.03,0.12,1.5,3.5 4.9,6.0,6.6,9.5), mean=0.947, stddev=1.66], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.004,0.03 0.05,0.07,0.18,0.72,0.93 0.97,0.99,1.0,1.0), mean=0.348, stddev=0.334], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.001,0.001,0.001 0.001,0.001,0.002,0.003,0.003 0.005,0.005,0.006,0.007), mean=0.0022, stddev=0.00103], oderiv-count=107520
component name=tdnn1.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=256, learning-rate=0.00126209, max-change=0.75, linear-params-rms=0.0633, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.89,0.91,0.93 0.95,0.97,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.01, stddev=0.051], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.91,0.92,0.93 0.95,0.97,1.0,1.1,1.1 1.1,1.1,1.1,1.1), mean=1.01, stddev=0.0484], bias-{mean,stddev}=0.03399,1.09, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=6.66e+04, self-repaired-proportion=0.423438, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.0001,0.009,0.18,1.1,1.6 2.2,2.6,2.8,4.6), mean=0.555, stddev=0.767], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.002,0.04,0.35,0.90,0.96 0.99,1.0,1.0,1.0), mean=0.447, stddev=0.382], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.003,0.003,0.005,0.006 0.007,0.008,0.009,0.01), mean=0.00381, stddev=0.00152], oderiv-count=158720
component name=tdnn2.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00126209, max-change=0.75, linear-params-rms=0.04533, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.95,0.97 0.98,0.99,1.0,1.1,1.1 1.1,1.1,1.2,1.3), mean=1.02, stddev=0.0436], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.64,0.65,0.67 0.68,0.70,0.72,0.75,0.77 0.78,0.80,0.81,0.87), mean=0.724, stddev=0.0359], bias-{mean,stddev}=0.072,0.983, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=5.38e+04, self-repaired-proportion=0.490699, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 4e-07,0.004,0.23,1.1,1.6 2.2,2.9,3.2,5.0), mean=0.591, stddev=0.817], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 4e-05,0.02,0.36,0.86,0.96 0.99,1.0,1.0,1.0), mean=0.436, stddev=0.367], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.003,0.004,0.006,0.008 0.01,0.01,0.01,0.01), mean=0.00472, stddev=0.00235], oderiv-count=71680
component name=tdnn3.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00126209, max-change=0.75, linear-params-rms=0.04528, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.94,0.95,0.96 0.97,0.98,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.02, stddev=0.0445], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.64,0.65,0.66 0.68,0.69,0.72,0.76,0.78 0.79,0.81,0.82,0.83), mean=0.724, stddev=0.0388], bias-{mean,stddev}=-0.04959,1.017, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=3.92e+04, self-repaired-proportion=0.523828, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 3e-09,0.001,0.25,1.1,1.9 2.4,2.8,3.0,4.8), mean=0.582, stddev=0.814], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 3e-05,0.01,0.34,0.72,0.94 1.0,1.0,1.0,1.0), mean=0.387, stddev=0.34], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.003,0.004,0.005,0.007 0.009,0.01,0.01,0.01), mean=0.00415, stddev=0.00217], oderiv-count=64512
component name=tdnn4.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00126209, max-change=0.75, linear-params-rms=0.04513, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.93,0.94,0.96 0.97,0.99,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.02, stddev=0.0404], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.64,0.65,0.67 0.68,0.69,0.72,0.75,0.77 0.79,0.81,0.83,0.85), mean=0.721, stddev=0.0373], bias-{mean,stddev}=-0.1218,0.9716, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.3e+04, self-repaired-proportion=0.458869, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 1e-05,0.001,0.27,1.2,1.6 2.2,2.7,3.0,3.2), mean=0.58, stddev=0.732], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.0002,0.009,0.38,0.73,0.92 0.96,0.99,1.0,1.0), mean=0.402, stddev=0.333], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.003,0.004,0.006,0.007 0.008,0.01,0.01,0.01), mean=0.00428, stddev=0.0022], oderiv-count=59392
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00126209, max-change=0.75, linear-params-rms=0.04524, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.93,0.94,0.96 0.97,0.99,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.02, stddev=0.04], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.66,0.67 0.68,0.69,0.72,0.75,0.77 0.79,0.80,0.82,0.84), mean=0.723, stddev=0.0362], bias-{mean,stddev}=0.08837,1.067, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=3.94e+04, self-repaired-proportion=0.436472, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 4e-06,0.004,0.33,1.2,1.7 2.2,2.6,2.9,4.2), mean=0.646, stddev=0.767], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.0001,0.03,0.45,0.76,0.91 0.96,0.99,1.0,1.0), mean=0.431, stddev=0.329], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.002,0.003,0.005,0.007 0.007,0.008,0.009,0.01), mean=0.00392, stddev=0.00178], oderiv-count=43008
component name=tdnn6.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn7.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00126209, max-change=0.75, linear-params-rms=0.04527, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.95,0.95,0.96 0.98,0.99,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.02, stddev=0.0373], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.64,0.65,0.66 0.68,0.69,0.72,0.75,0.77 0.79,0.80,0.81,0.84), mean=0.723, stddev=0.0369], bias-{mean,stddev}=-0.02734,1.022, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn7.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=2.61e+04, self-repaired-proportion=0.492839, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.001,0.19,1.2,2.0 2.5,3.0,3.8,5.0), mean=0.632, stddev=0.913], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.01,0.25,0.84,0.94 0.98,0.99,1.0,1.0), mean=0.41, stddev=0.376], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.003,0.004,0.005,0.007 0.008,0.009,0.01,0.01), mean=0.00411, stddev=0.00196], oderiv-count=46080
component name=tdnn7.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn8.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00126209, max-change=0.75, linear-params-rms=0.04494, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.93,0.95,0.96 0.97,0.98,1.0,1.0,1.1 1.1,1.1,1.1,1.1), mean=1.02, stddev=0.0367], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.64,0.66,0.67 0.68,0.69,0.72,0.75,0.76 0.77,0.79,0.80,0.85), mean=0.718, stddev=0.033], bias-{mean,stddev}=-0.003209,1.067, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn8.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=2.69e+04, self-repaired-proportion=0.454297, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.0002,0.24,1.2,1.8 2.4,3.1,3.5,4.5), mean=0.655, stddev=0.874], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.004,0.35,0.82,0.94 0.98,0.99,1.0,1.0), mean=0.408, stddev=0.356], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.003,0.004,0.005,0.006 0.007,0.008,0.009,0.01), mean=0.00411, stddev=0.00177], oderiv-count=33280
component name=tdnn8.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn9.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00126209, max-change=0.75, linear-params-rms=0.04503, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.93,0.95,0.96 0.97,0.99,1.0,1.0,1.1 1.1,1.1,1.1,1.1), mean=1.02, stddev=0.0368], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.65,0.65,0.66 0.68,0.69,0.72,0.75,0.76 0.78,0.80,0.80,0.83), mean=0.72, stddev=0.0342], bias-{mean,stddev}=-0.03458,0.9975, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn9.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.74e+04, self-repaired-proportion=0.393821, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.003,0.31,1.1,1.8 2.3,2.9,3.1,3.9), mean=0.642, stddev=0.807], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.03,0.40,0.82,0.92 0.97,0.99,1.0,1.0), mean=0.433, stddev=0.352], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.003 0.003,0.003,0.004,0.006,0.008 0.009,0.01,0.01,0.01), mean=0.00497, stddev=0.00189], oderiv-count=27648
component name=tdnn9.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn10.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00126209, max-change=0.75, linear-params-rms=0.04511, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.95,0.96 0.97,0.99,1.0,1.1,1.1 1.1,1.1,1.1,1.1), mean=1.02, stddev=0.0372], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.65,0.65,0.67 0.68,0.69,0.72,0.75,0.77 0.78,0.80,0.80,0.85), mean=0.721, stddev=0.035], bias-{mean,stddev}=0.06544,1.075, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn10.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.46e+04, self-repaired-proportion=0.469669, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.005,0.34,1.5,1.9 2.6,3.2,3.4,3.8), mean=0.702, stddev=0.881], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.03,0.39,0.89,0.98 1.0,1.0,1.0,1.0), mean=0.442, stddev=0.367], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.004 0.004,0.005,0.006,0.008,0.01 0.01,0.01,0.01,0.02), mean=0.00646, stddev=0.00222], oderiv-count=23040
component name=tdnn10.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn11.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00126209, max-change=0.75, linear-params-rms=0.04516, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.93,0.94,0.96 0.97,0.99,1.0,1.0,1.1 1.1,1.1,1.1,1.1), mean=1.02, stddev=0.0379], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.65,0.67 0.68,0.69,0.72,0.75,0.77 0.79,0.80,0.82,0.85), mean=0.722, stddev=0.0371], bias-{mean,stddev}=-0.03488,1.049, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn11.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=9.22e+03, self-repaired-proportion=0.482422, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.0009,0.22,1.3,2.0 2.5,3.4,3.5,5.0), mean=0.686, stddev=0.944], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.01,0.35,0.88,0.96 0.99,1.0,1.0,1.0), mean=0.419, stddev=0.371], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.006,0.006 0.007,0.007,0.009,0.01,0.01 0.02,0.02,0.02,0.02), mean=0.00963, stddev=0.00289], oderiv-count=13312
component name=tdnn11.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnnFINAL.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00126209, max-change=0.75, linear-params-rms=0.0452, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.92,0.94,0.96 0.97,0.98,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.02, stddev=0.0435], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.64,0.65,0.66 0.67,0.69,0.72,0.75,0.77 0.80,0.81,0.83,0.85), mean=0.722, stddev=0.0386], bias-{mean,stddev}=-0.07685,0.9506, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnnFINAL.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.61e+03, self-repaired-proportion=0.523242, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,1e-05,0.10,1.5,2.5 3.3,3.7,4.2,5.6), mean=0.738, stddev=1.12], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.0004,0.21,0.90,0.98 1.0,1.0,1.0,1.0), mean=0.39, stddev=0.399], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.009,0.01,0.01 0.01,0.01,0.02,0.02,0.03 0.03,0.04,0.04,0.04), mean=0.0183, stddev=0.00615], oderiv-count=6912
component name=tdnnFINAL.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=prefinal-affine-task-0.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=256, learning-rate=0.00126209, max-change=0.75, linear-params-rms=0.06325, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.89,0.91,0.92 0.94,0.97,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.01, stddev=0.0512], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.91,0.92,0.94 0.95,0.97,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.01, stddev=0.0471], bias-{mean,stddev}=0.0003113,1.012, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-affine-task-0.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.1e+03, self-repaired-proportion=0.505515, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.0001,0.15,1.5,2.2 2.7,3.1,3.4,3.9), mean=0.703, stddev=0.938], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.001,0.29,0.97,1.0 1.0,1.0,1.0,1.0), mean=0.439, stddev=0.412], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-08,7e-08,7e-08,9e-08 2e-07,0.002,0.02,0.03,0.04 0.04,0.05,0.06,0.06), mean=0.02, stddev=0.0155], oderiv-count=6656
component name=prefinal-affine-task-0.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output-0.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=96, learning-rate=0.00126209, max-change=1.5, linear-params-rms=0.03085, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.19,0.20,0.25 0.33,0.37,0.45,0.55,0.65 0.73,0.78,0.84,1.1), mean=0.473, stddev=0.142], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-07,8e-07,9e-07,1e-06 2e-06,0.02,0.25,0.40,0.48 0.55,0.59,0.68,0.76), mean=0.236, stddev=0.189], bias-{mean,stddev}=-6.471e-08,0.01169, rank-in=20, rank-out=48, num-samples-history=2000, update-period=4, alpha=4
component name=output-0.log-softmax type=LogSoftmaxComponent, dim=96, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.03 0.06,0.07,0.08,0.11,0.13 0.15,0.22,0.27,0.29), mean=0.0927, stddev=0.0428], oderiv-count=7936
nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/3.raw MTL/exp/nnet3/multitask/4.raw 
LOG (nnet3-show-progress[5.4.217~1-8ae5]:SelectGpuId():cu-device.cc:123) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:1.66475 tdnn2.affine:1.55963 tdnn3.affine:1.80715 tdnn4.affine:1.67519 tdnn5.affine:1.52059 tdnn6.affine:1.32294 tdnn7.affine:1.20703 tdnn8.affine:1.07538 tdnn9.affine:1.09191 tdnn10.affine:1.12154 tdnn11.affine:1.26869 tdnnFINAL.affine:1.5766 prefinal-affine-task-0.affine:1.46558 output-0.affine:2.02833 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:24.1034 tdnn2.affine:23.8072 tdnn3.affine:22.7598 tdnn4.affine:23.1073 tdnn5.affine:22.6353 tdnn6.affine:23.7019 tdnn7.affine:23.1541 tdnn8.affine:23.5797 tdnn9.affine:22.8219 tdnn10.affine:23.7374 tdnn11.affine:23.4338 tdnnFINAL.affine:22.3754 prefinal-affine-task-0.affine:22.8989 output-0.affine:4.83803 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0696658 tdnn2.affine:0.0655895 tdnn3.affine:0.0796008 tdnn4.affine:0.0726686 tdnn5.affine:0.0673165 tdnn6.affine:0.0559188 tdnn7.affine:0.0522283 tdnn8.affine:0.0456925 tdnn9.affine:0.0479542 tdnn10.affine:0.0473573 tdnn11.affine:0.0542928 tdnnFINAL.affine:0.0707399 prefinal-affine-task-0.affine:0.0641889 output-0.affine:0.480996 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Tue Jul 24 11:13:49 UTC 2018, elapsed time 0 seconds
