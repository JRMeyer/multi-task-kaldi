# nnet3-info MTL/exp/nnet3/multitask/32.raw && nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/31.raw MTL/exp/nnet3/multitask/32.raw 
# Started at Tue Jul 24 11:18:06 UTC 2018
#
nnet3-info MTL/exp/nnet3/multitask/32.raw 
num-parameters: 1486432
modulus: 1
input-node name=input dim=13
component-node name=tdnn1.affine component=tdnn1.affine input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=65 output-dim=256
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=256 output-dim=256
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=256 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=tdnn1.renorm input-dim=256 output-dim=256
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=256 output-dim=256
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=256 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -1), Offset(tdnn2.renorm, 2)) input-dim=512 output-dim=256
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=256 output-dim=256
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=256 output-dim=256
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -3), Offset(tdnn3.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=256 output-dim=256
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=256 output-dim=256
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -3), Offset(tdnn4.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.renorm, -3), Offset(tdnn5.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=256 output-dim=256
component-node name=tdnn6.renorm component=tdnn6.renorm input=tdnn6.relu input-dim=256 output-dim=256
component-node name=tdnn7.affine component=tdnn7.affine input=Append(Offset(tdnn6.renorm, -3), Offset(tdnn6.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn7.relu component=tdnn7.relu input=tdnn7.affine input-dim=256 output-dim=256
component-node name=tdnn7.renorm component=tdnn7.renorm input=tdnn7.relu input-dim=256 output-dim=256
component-node name=tdnn8.affine component=tdnn8.affine input=Append(Offset(tdnn7.renorm, -3), Offset(tdnn7.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn8.relu component=tdnn8.relu input=tdnn8.affine input-dim=256 output-dim=256
component-node name=tdnn8.renorm component=tdnn8.renorm input=tdnn8.relu input-dim=256 output-dim=256
component-node name=tdnn9.affine component=tdnn9.affine input=Append(Offset(tdnn8.renorm, -3), Offset(tdnn8.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn9.relu component=tdnn9.relu input=tdnn9.affine input-dim=256 output-dim=256
component-node name=tdnn9.renorm component=tdnn9.renorm input=tdnn9.relu input-dim=256 output-dim=256
component-node name=tdnn10.affine component=tdnn10.affine input=Append(Offset(tdnn9.renorm, -3), Offset(tdnn9.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn10.relu component=tdnn10.relu input=tdnn10.affine input-dim=256 output-dim=256
component-node name=tdnn10.renorm component=tdnn10.renorm input=tdnn10.relu input-dim=256 output-dim=256
component-node name=tdnn11.affine component=tdnn11.affine input=Append(Offset(tdnn10.renorm, -3), Offset(tdnn10.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn11.relu component=tdnn11.relu input=tdnn11.affine input-dim=256 output-dim=256
component-node name=tdnn11.renorm component=tdnn11.renorm input=tdnn11.relu input-dim=256 output-dim=256
component-node name=tdnnFINAL.affine component=tdnnFINAL.affine input=Append(Offset(tdnn11.renorm, -3), Offset(tdnn11.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnnFINAL.relu component=tdnnFINAL.relu input=tdnnFINAL.affine input-dim=256 output-dim=256
component-node name=tdnnFINAL.renorm component=tdnnFINAL.renorm input=tdnnFINAL.relu input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.affine component=prefinal-affine-task-0.affine input=tdnnFINAL.renorm input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.relu component=prefinal-affine-task-0.relu input=prefinal-affine-task-0.affine input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.renorm component=prefinal-affine-task-0.renorm input=prefinal-affine-task-0.relu input-dim=256 output-dim=256
component-node name=output-0.affine component=output-0.affine input=prefinal-affine-task-0.renorm input-dim=256 output-dim=96
component-node name=output-0.log-softmax component=output-0.log-softmax input=output-0.affine input-dim=96 output-dim=96
output-node name=output-0 input=output-0.log-softmax dim=96 objective=linear
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=65, output-dim=256, learning-rate=0.000251821, max-change=0.75, linear-params-rms=0.1545, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.89,0.90,0.93 0.96,1.0,1.2,1.4,1.6 1.7,1.7,1.8,1.9), mean=1.23, stddev=0.222], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.0,2.0,2.1 2.1,2.2,2.4,2.7,2.8 2.9,3.0,3.1,3.2), mean=2.46, stddev=0.271], bias-{mean,stddev}=0.01703,1.102, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.08e+05, self-repaired-proportion=0.031436, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.03 0.04,0.06,0.28,1.4,2.1 2.7,3.1,3.6,5.7), mean=0.766, stddev=0.944], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.07 0.09,0.12,0.34,0.82,0.91 0.93,0.94,0.95,0.96), mean=0.435, stddev=0.312], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.005,0.006 0.006,0.006,0.008,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.0083, stddev=0.00218], oderiv-count=153600
component name=tdnn1.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=256, learning-rate=0.000251821, max-change=0.75, linear-params-rms=0.06553, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.90,0.92,0.95 0.97,1.0,1.0,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.05, stddev=0.0614], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.92,0.93,0.95 0.96,0.99,1.0,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.05, stddev=0.0657], bias-{mean,stddev}=0.03389,1.089, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.02e+05, self-repaired-proportion=0.0289063, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.01,0.01,0.02 0.04,0.09,0.34,0.85,1.1 1.4,1.6,1.9,3.3), mean=0.483, stddev=0.491], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.06,0.08 0.11,0.19,0.46,0.72,0.83 0.91,0.93,0.96,0.98), mean=0.459, stddev=0.26], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.009,0.009,0.009 0.01,0.01,0.01,0.02,0.02 0.02,0.02,0.02,0.03), mean=0.0131, stddev=0.00332], oderiv-count=143360
component name=tdnn2.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000251821, max-change=0.75, linear-params-rms=0.04772, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.96,0.97,0.98 1.0,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.08, stddev=0.0646], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.66,0.68 0.70,0.72,0.76,0.81,0.83 0.86,0.88,0.90,0.94), mean=0.762, stddev=0.0552], bias-{mean,stddev}=0.07202,0.9826, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=5.38e+04, self-repaired-proportion=0.0421196, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.0009,0.01,0.02 0.04,0.10,0.40,1.1,1.4 1.8,2.1,2.2,2.5), mean=0.588, stddev=0.569], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-05,0.007,0.05,0.07 0.11,0.22,0.44,0.72,0.80 0.88,0.93,0.95,0.99), mean=0.458, stddev=0.258], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.009,0.01,0.01 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.03,0.03), mean=0.0168, stddev=0.00536], oderiv-count=79360
component name=tdnn3.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000251821, max-change=0.75, linear-params-rms=0.04791, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.96,0.96,0.98 1.0,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.08, stddev=0.0693], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.66,0.68 0.70,0.71,0.76,0.82,0.84 0.87,0.90,0.92,0.94), mean=0.764, stddev=0.0598], bias-{mean,stddev}=-0.04937,1.016, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=5.76e+04, self-repaired-proportion=0.0365349, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-06,0.0005,0.007,0.02 0.03,0.07,0.35,0.97,1.3 1.8,2.0,2.6,3.0), mean=0.549, stddev=0.586], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.003,0.03,0.07 0.10,0.17,0.41,0.67,0.78 0.87,0.90,0.94,0.99), mean=0.422, stddev=0.254], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.02,0.02,0.03 0.03,0.03,0.03,0.04), mean=0.0178, stddev=0.00577], oderiv-count=71424
component name=tdnn4.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000251821, max-change=0.75, linear-params-rms=0.04758, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.94,0.96,0.97 1.0,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.07, stddev=0.0659], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.66,0.67,0.68 0.70,0.71,0.75,0.81,0.84 0.86,0.88,0.90,0.94), mean=0.759, stddev=0.0562], bias-{mean,stddev}=-0.1218,0.9711, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.1e+04, self-repaired-proportion=0.0599609, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,1e-05,0.002,0.01 0.03,0.09,0.34,0.91,1.5 1.9,2.6,2.7,3.5), mean=0.566, stddev=0.641], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0002,0.01,0.05 0.09,0.18,0.40,0.70,0.82 0.88,0.91,0.93,0.98), mean=0.43, stddev=0.263], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.01 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.04), mean=0.0173, stddev=0.00572], oderiv-count=57344
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000251821, max-change=0.75, linear-params-rms=0.04761, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.95,0.97,0.98 0.99,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.2), mean=1.08, stddev=0.0653], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.66,0.67,0.68 0.70,0.71,0.75,0.80,0.83 0.86,0.89,0.91,0.93), mean=0.76, stddev=0.0549], bias-{mean,stddev}=0.08835,1.067, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=3.4e+04, self-repaired-proportion=0.0686035, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,4e-05,0.0008,0.008 0.03,0.07,0.39,1.1,1.5 2.0,2.2,2.3,3.1), mean=0.595, stddev=0.623], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0003,0.006,0.04 0.08,0.15,0.42,0.74,0.84 0.89,0.93,0.94,0.97), mean=0.449, stddev=0.281], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.02,0.02,0.03 0.03,0.03,0.03,0.04), mean=0.0177, stddev=0.00533], oderiv-count=57344
component name=tdnn6.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn7.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000251821, max-change=0.75, linear-params-rms=0.04749, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.97,0.98 1.0,1.0,1.1,1.1,1.1 1.2,1.2,1.2,1.3), mean=1.07, stddev=0.0586], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.66,0.67 0.69,0.71,0.76,0.80,0.83 0.85,0.87,0.89,0.92), mean=0.758, stddev=0.054], bias-{mean,stddev}=-0.02736,1.021, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn7.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=2e+04, self-repaired-proportion=0.0803571, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,7e-05,0.004 0.03,0.07,0.34,1.1,1.5 1.9,2.1,2.5,2.9), mean=0.589, stddev=0.618], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0007,0.02 0.09,0.17,0.42,0.74,0.83 0.87,0.92,0.95,0.97), mean=0.448, stddev=0.272], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.02,0.02,0.03 0.03,0.03,0.03,0.04), mean=0.0188, stddev=0.00547], oderiv-count=36864
component name=tdnn7.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn8.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000251821, max-change=0.75, linear-params-rms=0.04715, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.96,0.97 0.98,1.0,1.1,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.07, stddev=0.0626], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.66,0.67,0.68 0.69,0.71,0.75,0.80,0.82 0.84,0.86,0.88,0.92), mean=0.753, stddev=0.0506], bias-{mean,stddev}=-0.003217,1.066, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn8.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=2.18e+04, self-repaired-proportion=0.135324, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0002 0.01,0.03,0.35,1.1,1.5 1.9,2.4,2.6,3.3), mean=0.596, stddev=0.654], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.002 0.04,0.11,0.41,0.75,0.82 0.88,0.93,0.98,0.99), mean=0.424, stddev=0.295], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.02,0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0211, stddev=0.00553], oderiv-count=38400
component name=tdnn8.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn9.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000251821, max-change=0.75, linear-params-rms=0.04741, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.95,0.97,0.98 1.0,1.0,1.1,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.07, stddev=0.0591], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.66,0.66,0.68 0.69,0.71,0.75,0.80,0.83 0.85,0.88,0.90,0.92), mean=0.757, stddev=0.0543], bias-{mean,stddev}=-0.03475,0.9972, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn9.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.43e+04, self-repaired-proportion=0.121982, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,3e-06,0.0009 0.01,0.05,0.36,1.1,1.4 1.9,2.2,2.5,3.5), mean=0.575, stddev=0.625], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0002,0.007 0.04,0.14,0.41,0.73,0.83 0.88,0.93,0.96,0.99), mean=0.431, stddev=0.28], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.04 0.04,0.04,0.04,0.05), mean=0.0266, stddev=0.00643], oderiv-count=25600
component name=tdnn9.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn10.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000251821, max-change=0.75, linear-params-rms=0.04772, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.96,0.98 0.99,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.2), mean=1.08, stddev=0.0624], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.66,0.66,0.68 0.69,0.71,0.75,0.81,0.84 0.86,0.89,0.90,0.92), mean=0.761, stddev=0.0558], bias-{mean,stddev}=0.06523,1.074, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn10.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.31e+04, self-repaired-proportion=0.15554, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,1e-05,0.0002 0.004,0.06,0.39,1.2,1.6 1.9,2.3,2.4,3.2), mean=0.63, stddev=0.649], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0002,0.002 0.02,0.14,0.44,0.78,0.86 0.92,0.96,0.98,1.0), mean=0.454, stddev=0.303], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.04,0.04 0.05,0.05,0.05,0.05), mean=0.0323, stddev=0.0072], oderiv-count=23040
component name=tdnn10.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn11.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000251821, max-change=0.75, linear-params-rms=0.04821, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.94,0.96,0.97 0.99,1.0,1.1,1.2,1.2 1.2,1.2,1.2,1.2), mean=1.09, stddev=0.0718], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.66,0.66,0.68 0.69,0.72,0.76,0.82,0.85 0.88,0.90,0.93,0.97), mean=0.769, stddev=0.0608], bias-{mean,stddev}=-0.03517,1.048, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn11.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=9.22e+03, self-repaired-proportion=0.183594, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,4e-06 0.001,0.03,0.32,1.0,1.6 2.0,2.1,2.6,3.2), mean=0.566, stddev=0.649], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0001 0.007,0.09,0.41,0.70,0.86 0.94,0.97,0.99,1.0), mean=0.414, stddev=0.303], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.06,0.06 0.07,0.07,0.07,0.08), mean=0.0459, stddev=0.0109], oderiv-count=15360
component name=tdnn11.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnnFINAL.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000251821, max-change=0.75, linear-params-rms=0.04899, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.92,0.96,0.97 0.99,1.0,1.1,1.2,1.2 1.2,1.3,1.3,1.4), mean=1.1, stddev=0.0919], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.65,0.66,0.67 0.69,0.71,0.77,0.85,0.88 0.91,0.93,0.96,1.0), mean=0.78, stddev=0.0749], bias-{mean,stddev}=-0.07735,0.95, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnnFINAL.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.61e+03, self-repaired-proportion=0.206287, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,8e-05 0.0009,0.02,0.28,1.0,1.4 1.8,2.0,2.6,3.4), mean=0.527, stddev=0.626], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0007 0.006,0.06,0.37,0.68,0.81 0.88,0.97,0.98,1.0), mean=0.385, stddev=0.295], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.05,0.05,0.07,0.09,0.10 0.10,0.11,0.11,0.11), mean=0.0686, stddev=0.0184], oderiv-count=7680
component name=tdnnFINAL.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=prefinal-affine-task-0.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=256, learning-rate=0.000251821, max-change=0.75, linear-params-rms=0.06808, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.92,0.93,0.95 0.98,1.0,1.1,1.2,1.2 1.2,1.2,1.3,1.3), mean=1.09, stddev=0.0833], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.93,0.94,0.96 0.98,1.0,1.1,1.2,1.2 1.2,1.3,1.3,1.3), mean=1.09, stddev=0.0892], bias-{mean,stddev}=-0.001546,1.01, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-affine-task-0.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.61e+03, self-repaired-proportion=0.152344, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,3e-06 0.001,0.05,0.30,0.83,1.1 1.3,1.4,1.5,2.0), mean=0.446, stddev=0.427], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0002 0.007,0.12,0.41,0.70,0.81 0.86,0.88,0.90,0.92), mean=0.414, stddev=0.28], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-08,9e-08,2e-07,6e-05 0.001,0.02,0.06,0.08,0.09 0.10,0.11,0.11,0.11), mean=0.0548, stddev=0.0337], oderiv-count=7936
component name=prefinal-affine-task-0.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output-0.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=96, learning-rate=0.000251821, max-change=1.5, linear-params-rms=0.06714, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.23,0.26,0.75 0.88,0.94,1.1,1.2,1.3 1.4,1.4,1.6,1.8), mean=1.05, stddev=0.211], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-07,1e-06,2e-06,0.0005 0.01,0.14,0.63,0.87,0.98 1.0,1.1,1.2,1.2), mean=0.554, stddev=0.354], bias-{mean,stddev}=-6.414e-08,0.01379, rank-in=20, rank-out=48, num-samples-history=2000, update-period=4, alpha=4
component name=output-0.log-softmax type=LogSoftmaxComponent, dim=96, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.01,0.03 0.06,0.06,0.09,0.11,0.13 0.15,0.23,0.26,0.28), mean=0.0925, stddev=0.0421], oderiv-count=6656
nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/31.raw MTL/exp/nnet3/multitask/32.raw 
LOG (nnet3-show-progress[5.4.217~1-8ae5]:SelectGpuId():cu-device.cc:123) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.393021 tdnn2.affine:0.246655 tdnn3.affine:0.340771 tdnn4.affine:0.339551 tdnn5.affine:0.32581 tdnn6.affine:0.303572 tdnn7.affine:0.290088 tdnn8.affine:0.293204 tdnn9.affine:0.321848 tdnn10.affine:0.341341 tdnn11.affine:0.380006 tdnnFINAL.affine:0.409187 prefinal-affine-task-0.affine:0.284637 output-0.affine:0.289281 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:26.6037 tdnn2.affine:24.1888 tdnn3.affine:23.3879 tdnn4.affine:23.7836 tdnn5.affine:23.2811 tdnn6.affine:24.2975 tdnn7.affine:23.725 tdnn8.affine:24.1325 tdnn9.affine:23.4404 tdnn10.affine:24.3894 tdnn11.affine:24.2097 tdnnFINAL.affine:23.3911 prefinal-affine-task-0.affine:23.767 output-0.affine:10.5269 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0147935 tdnn2.affine:0.010201 tdnn3.affine:0.0145797 tdnn4.affine:0.0142874 tdnn5.affine:0.014006 tdnn6.affine:0.0125035 tdnn7.affine:0.0122361 tdnn8.affine:0.0121587 tdnn9.affine:0.0137418 tdnn10.affine:0.0140069 tdnn11.affine:0.0157096 tdnnFINAL.affine:0.0175091 prefinal-affine-task-0.affine:0.0119827 output-0.affine:0.0276873 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Tue Jul 24 11:18:06 UTC 2018, elapsed time 0 seconds
