# nnet3-info MTL/exp/nnet3/multitask/11.raw && nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/10.raw MTL/exp/nnet3/multitask/11.raw 
# Started at Tue Jul 24 11:14:53 UTC 2018
#
nnet3-info MTL/exp/nnet3/multitask/11.raw 
num-parameters: 1486432
modulus: 1
input-node name=input dim=13
component-node name=tdnn1.affine component=tdnn1.affine input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=65 output-dim=256
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=256 output-dim=256
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=256 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=tdnn1.renorm input-dim=256 output-dim=256
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=256 output-dim=256
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=256 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -1), Offset(tdnn2.renorm, 2)) input-dim=512 output-dim=256
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=256 output-dim=256
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=256 output-dim=256
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -3), Offset(tdnn3.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=256 output-dim=256
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=256 output-dim=256
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -3), Offset(tdnn4.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.renorm, -3), Offset(tdnn5.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=256 output-dim=256
component-node name=tdnn6.renorm component=tdnn6.renorm input=tdnn6.relu input-dim=256 output-dim=256
component-node name=tdnn7.affine component=tdnn7.affine input=Append(Offset(tdnn6.renorm, -3), Offset(tdnn6.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn7.relu component=tdnn7.relu input=tdnn7.affine input-dim=256 output-dim=256
component-node name=tdnn7.renorm component=tdnn7.renorm input=tdnn7.relu input-dim=256 output-dim=256
component-node name=tdnn8.affine component=tdnn8.affine input=Append(Offset(tdnn7.renorm, -3), Offset(tdnn7.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn8.relu component=tdnn8.relu input=tdnn8.affine input-dim=256 output-dim=256
component-node name=tdnn8.renorm component=tdnn8.renorm input=tdnn8.relu input-dim=256 output-dim=256
component-node name=tdnn9.affine component=tdnn9.affine input=Append(Offset(tdnn8.renorm, -3), Offset(tdnn8.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn9.relu component=tdnn9.relu input=tdnn9.affine input-dim=256 output-dim=256
component-node name=tdnn9.renorm component=tdnn9.renorm input=tdnn9.relu input-dim=256 output-dim=256
component-node name=tdnn10.affine component=tdnn10.affine input=Append(Offset(tdnn9.renorm, -3), Offset(tdnn9.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn10.relu component=tdnn10.relu input=tdnn10.affine input-dim=256 output-dim=256
component-node name=tdnn10.renorm component=tdnn10.renorm input=tdnn10.relu input-dim=256 output-dim=256
component-node name=tdnn11.affine component=tdnn11.affine input=Append(Offset(tdnn10.renorm, -3), Offset(tdnn10.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn11.relu component=tdnn11.relu input=tdnn11.affine input-dim=256 output-dim=256
component-node name=tdnn11.renorm component=tdnn11.renorm input=tdnn11.relu input-dim=256 output-dim=256
component-node name=tdnnFINAL.affine component=tdnnFINAL.affine input=Append(Offset(tdnn11.renorm, -3), Offset(tdnn11.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnnFINAL.relu component=tdnnFINAL.relu input=tdnnFINAL.affine input-dim=256 output-dim=256
component-node name=tdnnFINAL.renorm component=tdnnFINAL.renorm input=tdnnFINAL.relu input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.affine component=prefinal-affine-task-0.affine input=tdnnFINAL.renorm input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.relu component=prefinal-affine-task-0.relu input=prefinal-affine-task-0.affine input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.renorm component=prefinal-affine-task-0.renorm input=prefinal-affine-task-0.relu input-dim=256 output-dim=256
component-node name=output-0.affine component=output-0.affine input=prefinal-affine-task-0.renorm input-dim=256 output-dim=96
component-node name=output-0.log-softmax component=output-0.log-softmax input=output-0.affine input-dim=96 output-dim=96
output-node name=output-0 input=output-0.log-softmax dim=96 objective=linear
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=65, output-dim=256, learning-rate=0.000843512, max-change=0.75, linear-params-rms=0.1407, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.84,0.87,0.89 0.92,0.97,1.1,1.3,1.3 1.5,1.5,1.6,1.6), mean=1.12, stddev=0.171], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,1.9,1.9 2.0,2.0,2.1,2.5,2.6 2.7,2.8,2.9,2.9), mean=2.24, stddev=0.251], bias-{mean,stddev}=0.0167,1.096, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=7.68e+04, self-repaired-proportion=0.095818, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.03,0.06,0.37,1.5,2.1 2.8,3.3,4.0,5.8), mean=0.812, stddev=1.01], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.07,0.11,0.40,0.86,0.93 0.95,0.97,0.97,0.99), mean=0.462, stddev=0.33], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.003,0.003,0.005,0.006 0.007,0.008,0.009,0.009), mean=0.00387, stddev=0.00142], oderiv-count=148480
component name=tdnn1.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=256, learning-rate=0.000843512, max-change=0.75, linear-params-rms=0.06392, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,0.89,0.91,0.93 0.96,0.98,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.02, stddev=0.0543], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.91,0.92,0.93 0.95,0.98,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.02, stddev=0.0524], bias-{mean,stddev}=0.03405,1.089, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.23e+05, self-repaired-proportion=0.093564, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.0002,0.004,0.009 0.02,0.04,0.29,0.89,1.1 1.5,1.7,2.3,3.6), mean=0.478, stddev=0.553], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.002,0.03,0.05 0.07,0.13,0.45,0.75,0.89 0.93,0.96,0.97,1.0), mean=0.454, stddev=0.294], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.004 0.004,0.004,0.005,0.007,0.009 0.01,0.01,0.01,0.01), mean=0.0058, stddev=0.00202], oderiv-count=122880
component name=tdnn2.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000843512, max-change=0.75, linear-params-rms=0.04606, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.94,0.95,0.97 0.98,1.0,1.0,1.1,1.1 1.1,1.2,1.2,1.3), mean=1.04, stddev=0.0516], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.65,0.66,0.67 0.69,0.70,0.73,0.77,0.79 0.81,0.83,0.85,0.88), mean=0.736, stddev=0.0425], bias-{mean,stddev}=0.07216,0.9827, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=5.89e+04, self-repaired-proportion=0.101758, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0003,0.002 0.01,0.05,0.39,1.1,1.6 2.0,2.4,2.7,2.9), mean=0.613, stddev=0.67], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.003,0.02 0.06,0.13,0.45,0.77,0.86 0.91,0.94,0.99,1.0), mean=0.458, stddev=0.297], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.004 0.004,0.004,0.006,0.009,0.01 0.01,0.01,0.02,0.02), mean=0.00668, stddev=0.00293], oderiv-count=74240
component name=tdnn3.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000843512, max-change=0.75, linear-params-rms=0.04605, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.96,0.96 0.98,0.99,1.0,1.1,1.1 1.1,1.2,1.2,1.3), mean=1.04, stddev=0.0525], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.65,0.67 0.68,0.70,0.73,0.77,0.80 0.81,0.84,0.85,0.87), mean=0.735, stddev=0.0449], bias-{mean,stddev}=-0.04937,1.016, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.84e+04, self-repaired-proportion=0.117676, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,8e-07,4e-05,0.002 0.01,0.04,0.29,1.1,1.5 2.0,2.3,3.1,3.4), mean=0.577, stddev=0.699], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,2e-05,0.0006,0.02 0.05,0.12,0.36,0.72,0.84 0.91,0.94,0.96,1.0), mean=0.41, stddev=0.29], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.003 0.004,0.004,0.006,0.008,0.01 0.01,0.01,0.01,0.02), mean=0.00654, stddev=0.00285], oderiv-count=66816
component name=tdnn4.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000843512, max-change=0.75, linear-params-rms=0.04579, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.93,0.94,0.96 0.98,1.0,1.0,1.1,1.1 1.1,1.1,1.1,1.3), mean=1.04, stddev=0.0479], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.64,0.66,0.67 0.68,0.70,0.73,0.77,0.79 0.81,0.83,0.85,0.88), mean=0.731, stddev=0.0425], bias-{mean,stddev}=-0.1217,0.9714, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=5.32e+04, self-repaired-proportion=0.12517, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,3e-05,0.0008 0.009,0.05,0.29,1.1,1.6 2.3,2.8,3.2,4.4), mean=0.606, stddev=0.77], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0003,0.005 0.04,0.14,0.38,0.74,0.86 0.90,0.94,0.95,0.98), mean=0.422, stddev=0.294], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.003 0.004,0.004,0.005,0.008,0.01 0.01,0.01,0.01,0.02), mean=0.00619, stddev=0.00268], oderiv-count=59392
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000843512, max-change=0.75, linear-params-rms=0.04588, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.95,0.97 0.98,1.0,1.0,1.1,1.1 1.1,1.1,1.2,1.2), mean=1.04, stddev=0.0473], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.65,0.66,0.67 0.68,0.70,0.73,0.76,0.79 0.81,0.84,0.84,0.87), mean=0.733, stddev=0.0413], bias-{mean,stddev}=0.08848,1.067, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=3.76e+04, self-repaired-proportion=0.115668, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,2e-05,0.0006 0.009,0.04,0.31,1.2,1.7 2.3,2.5,2.7,3.3), mean=0.635, stddev=0.736], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0003,0.006 0.05,0.12,0.37,0.78,0.86 0.91,0.94,0.95,1.0), mean=0.435, stddev=0.307], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.004 0.004,0.004,0.006,0.009,0.01 0.01,0.01,0.01,0.02), mean=0.00652, stddev=0.00248], oderiv-count=55552
component name=tdnn6.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn7.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000843512, max-change=0.75, linear-params-rms=0.04591, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.96,0.97 0.99,1.0,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.04, stddev=0.0435], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.64,0.65,0.66 0.68,0.70,0.73,0.77,0.79 0.81,0.82,0.83,0.87), mean=0.733, stddev=0.0422], bias-{mean,stddev}=-0.02725,1.022, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn7.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=3.53e+04, self-repaired-proportion=0.142578, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0001 0.008,0.04,0.32,1.2,1.6 2.2,2.5,2.7,3.9), mean=0.628, stddev=0.732], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0009 0.04,0.11,0.42,0.76,0.86 0.89,0.95,0.97,0.99), mean=0.432, stddev=0.299], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.004,0.005,0.006,0.009,0.01 0.01,0.01,0.01,0.02), mean=0.00702, stddev=0.00272], oderiv-count=50688
component name=tdnn7.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn8.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000843512, max-change=0.75, linear-params-rms=0.04555, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.93,0.95,0.97 0.98,0.99,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.03, stddev=0.044], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.64,0.66,0.67 0.68,0.69,0.73,0.76,0.78 0.79,0.81,0.82,0.88), mean=0.728, stddev=0.0379], bias-{mean,stddev}=-0.003115,1.066, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn8.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=2.56e+04, self-repaired-proportion=0.226357, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.0004,0.01,0.36,1.2,1.7 2.3,2.7,3.0,3.5), mean=0.652, stddev=0.761], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.004,0.05,0.42,0.76,0.85 0.91,0.95,0.98,1.0), mean=0.419, stddev=0.321], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.005,0.005 0.005,0.006,0.007,0.01,0.01 0.01,0.01,0.02,0.02), mean=0.00795, stddev=0.00269], oderiv-count=34560
component name=tdnn8.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn9.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000843512, max-change=0.75, linear-params-rms=0.04568, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.94,0.95,0.97 0.98,1.0,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.03, stddev=0.0433], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.65,0.65,0.67 0.68,0.70,0.73,0.76,0.78 0.80,0.82,0.82,0.85), mean=0.73, stddev=0.0387], bias-{mean,stddev}=-0.03458,0.9974, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn9.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=2.46e+04, self-repaired-proportion=0.148872, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,3e-05 0.004,0.03,0.35,1.1,1.5 2.0,2.6,3.0,3.8), mean=0.611, stddev=0.715], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0004 0.03,0.10,0.41,0.74,0.86 0.91,0.94,0.95,1.0), mean=0.425, stddev=0.302], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.006,0.007 0.007,0.007,0.009,0.01,0.01 0.02,0.02,0.02,0.02), mean=0.0103, stddev=0.00315], oderiv-count=29696
component name=tdnn9.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn10.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000843512, max-change=0.75, linear-params-rms=0.04584, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.96,0.96 0.98,1.0,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.04, stddev=0.0446], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.65,0.65,0.67 0.68,0.70,0.73,0.77,0.79 0.81,0.83,0.83,0.86), mean=0.732, stddev=0.0405], bias-{mean,stddev}=0.06544,1.074, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn10.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.23e+04, self-repaired-proportion=0.236213, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,6e-06 0.002,0.02,0.36,1.4,1.8 2.1,2.6,2.8,3.3), mean=0.688, stddev=0.752], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,8e-05 0.01,0.08,0.45,0.82,0.90 0.96,0.99,0.99,1.0), mean=0.454, stddev=0.329], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.008,0.008,0.009 0.009,0.01,0.01,0.02,0.02 0.02,0.02,0.02,0.03), mean=0.013, stddev=0.00362], oderiv-count=23040
component name=tdnn10.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn11.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000843512, max-change=0.75, linear-params-rms=0.04608, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.93,0.95,0.96 0.98,1.0,1.0,1.1,1.1 1.1,1.1,1.2,1.2), mean=1.04, stddev=0.0486], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.66,0.67 0.68,0.70,0.73,0.77,0.80 0.81,0.85,0.86,0.89), mean=0.736, stddev=0.0445], bias-{mean,stddev}=-0.03499,1.048, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn11.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=9.22e+03, self-repaired-proportion=0.297335, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 4e-05,0.005,0.27,1.2,1.9 2.4,2.6,2.7,4.2), mean=0.637, stddev=0.79], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.0008,0.03,0.38,0.76,0.89 0.97,0.99,1.0,1.0), mean=0.413, stddev=0.333], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.02,0.02,0.02,0.03 0.03,0.03,0.04,0.04), mean=0.0202, stddev=0.00545], oderiv-count=15872
component name=tdnn11.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnnFINAL.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000843512, max-change=0.75, linear-params-rms=0.04645, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.92,0.95,0.96 0.98,0.99,1.0,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.05, stddev=0.0613], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.65,0.65,0.67 0.68,0.70,0.74,0.78,0.81 0.83,0.87,0.88,0.94), mean=0.741, stddev=0.0512], bias-{mean,stddev}=-0.07701,0.9504, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnnFINAL.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=3.07e+03, self-repaired-proportion=0.314145, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.0001,0.003,0.23,1.3,1.8 2.2,2.6,3.3,4.2), mean=0.613, stddev=0.807], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.001,0.02,0.34,0.74,0.87 0.94,0.98,0.99,1.0), mean=0.388, stddev=0.332], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.04,0.05 0.05,0.06,0.06,0.07), mean=0.0342, stddev=0.0104], oderiv-count=7936
component name=tdnnFINAL.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=prefinal-affine-task-0.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=256, learning-rate=0.000843512, max-change=0.75, linear-params-rms=0.065, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.92,0.93,0.94 0.95,0.98,1.0,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.04, stddev=0.0623], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.92,0.93,0.95 0.96,0.99,1.0,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.04, stddev=0.0618], bias-{mean,stddev}=-0.0002142,1.011, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-affine-task-0.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=5.89e+03, self-repaired-proportion=0.300502, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.0001,0.01,0.30,1.2,1.7 2.0,2.2,2.3,3.0), mean=0.602, stddev=0.682], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.0007,0.06,0.42,0.83,0.95 0.98,0.99,1.0,1.0), mean=0.445, stddev=0.343], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-08,7e-08,8e-08,2e-07 0.0002,0.007,0.04,0.05,0.06 0.06,0.07,0.07,0.08), mean=0.031, stddev=0.0216], oderiv-count=6400
component name=prefinal-affine-task-0.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output-0.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=96, learning-rate=0.000843512, max-change=1.5, linear-params-rms=0.04898, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.22,0.22,0.49 0.59,0.63,0.74,0.88,0.96 1.1,1.2,1.3,1.6), mean=0.758, stddev=0.2], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-07,9e-07,1e-06,2e-06 0.002,0.08,0.44,0.65,0.73 0.81,0.87,0.99,1.0), mean=0.39, stddev=0.28], bias-{mean,stddev}=-6.408e-08,0.0135, rank-in=20, rank-out=48, num-samples-history=2000, update-period=4, alpha=4
component name=output-0.log-softmax type=LogSoftmaxComponent, dim=96, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.03 0.06,0.06,0.08,0.11,0.13 0.15,0.22,0.27,0.30), mean=0.0923, stddev=0.0435], oderiv-count=6400
nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/10.raw MTL/exp/nnet3/multitask/11.raw 
LOG (nnet3-show-progress[5.4.217~1-8ae5]:SelectGpuId():cu-device.cc:123) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.80756 tdnn2.affine:0.457414 tdnn3.affine:0.570145 tdnn4.affine:0.51398 tdnn5.affine:0.462461 tdnn6.affine:0.433571 tdnn7.affine:0.418366 tdnn8.affine:0.415101 tdnn9.affine:0.454964 tdnn10.affine:0.498754 tdnn11.affine:0.590692 tdnnFINAL.affine:0.719791 prefinal-affine-task-0.affine:0.560703 output-0.affine:0.951142 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:25.2429 tdnn2.affine:23.9075 tdnn3.affine:22.9491 tdnn4.affine:23.3 tdnn5.affine:22.8078 tdnn6.affine:23.861 tdnn7.affine:23.3169 tdnn8.affine:23.7291 tdnn9.affine:22.9888 tdnn10.affine:23.9177 tdnn11.affine:23.6636 tdnnFINAL.affine:22.7068 prefinal-affine-task-0.affine:23.2101 output-0.affine:7.67938 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.032124 tdnn2.affine:0.0191463 tdnn3.affine:0.024873 tdnn4.affine:0.0220856 tdnn5.affine:0.0202984 tdnn6.affine:0.0181876 tdnn7.affine:0.0179585 tdnn8.affine:0.0175074 tdnn9.affine:0.0198099 tdnn10.affine:0.0208754 tdnn11.affine:0.0249977 tdnnFINAL.affine:0.0317622 prefinal-affine-task-0.affine:0.0241982 output-0.affine:0.127942 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Tue Jul 24 11:14:53 UTC 2018, elapsed time 0 seconds
