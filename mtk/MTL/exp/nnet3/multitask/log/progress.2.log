# nnet3-info MTL/exp/nnet3/multitask/2.raw && nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/1.raw MTL/exp/nnet3/multitask/2.raw 
# Started at Tue Jul 24 11:13:31 UTC 2018
#
nnet3-info MTL/exp/nnet3/multitask/2.raw 
num-parameters: 1486432
modulus: 1
input-node name=input dim=13
component-node name=tdnn1.affine component=tdnn1.affine input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=65 output-dim=256
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=256 output-dim=256
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=256 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=tdnn1.renorm input-dim=256 output-dim=256
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=256 output-dim=256
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=256 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -1), Offset(tdnn2.renorm, 2)) input-dim=512 output-dim=256
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=256 output-dim=256
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=256 output-dim=256
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -3), Offset(tdnn3.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=256 output-dim=256
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=256 output-dim=256
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -3), Offset(tdnn4.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.renorm, -3), Offset(tdnn5.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=256 output-dim=256
component-node name=tdnn6.renorm component=tdnn6.renorm input=tdnn6.relu input-dim=256 output-dim=256
component-node name=tdnn7.affine component=tdnn7.affine input=Append(Offset(tdnn6.renorm, -3), Offset(tdnn6.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn7.relu component=tdnn7.relu input=tdnn7.affine input-dim=256 output-dim=256
component-node name=tdnn7.renorm component=tdnn7.renorm input=tdnn7.relu input-dim=256 output-dim=256
component-node name=tdnn8.affine component=tdnn8.affine input=Append(Offset(tdnn7.renorm, -3), Offset(tdnn7.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn8.relu component=tdnn8.relu input=tdnn8.affine input-dim=256 output-dim=256
component-node name=tdnn8.renorm component=tdnn8.renorm input=tdnn8.relu input-dim=256 output-dim=256
component-node name=tdnn9.affine component=tdnn9.affine input=Append(Offset(tdnn8.renorm, -3), Offset(tdnn8.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn9.relu component=tdnn9.relu input=tdnn9.affine input-dim=256 output-dim=256
component-node name=tdnn9.renorm component=tdnn9.renorm input=tdnn9.relu input-dim=256 output-dim=256
component-node name=tdnn10.affine component=tdnn10.affine input=Append(Offset(tdnn9.renorm, -3), Offset(tdnn9.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn10.relu component=tdnn10.relu input=tdnn10.affine input-dim=256 output-dim=256
component-node name=tdnn10.renorm component=tdnn10.renorm input=tdnn10.relu input-dim=256 output-dim=256
component-node name=tdnn11.affine component=tdnn11.affine input=Append(Offset(tdnn10.renorm, -3), Offset(tdnn10.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn11.relu component=tdnn11.relu input=tdnn11.affine input-dim=256 output-dim=256
component-node name=tdnn11.renorm component=tdnn11.renorm input=tdnn11.relu input-dim=256 output-dim=256
component-node name=tdnnFINAL.affine component=tdnnFINAL.affine input=Append(Offset(tdnn11.renorm, -3), Offset(tdnn11.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnnFINAL.relu component=tdnnFINAL.relu input=tdnnFINAL.affine input-dim=256 output-dim=256
component-node name=tdnnFINAL.renorm component=tdnnFINAL.renorm input=tdnnFINAL.relu input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.affine component=prefinal-affine-task-0.affine input=tdnnFINAL.renorm input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.relu component=prefinal-affine-task-0.relu input=prefinal-affine-task-0.affine input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.renorm component=prefinal-affine-task-0.renorm input=prefinal-affine-task-0.relu input-dim=256 output-dim=256
component-node name=output-0.affine component=output-0.affine input=prefinal-affine-task-0.renorm input-dim=256 output-dim=96
component-node name=output-0.log-softmax component=output-0.log-softmax input=output-0.affine input-dim=96 output-dim=96
output-node name=output-0 input=output-0.log-softmax dim=96 objective=linear
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=65, output-dim=256, learning-rate=0.00141609, max-change=0.75, linear-params-rms=0.1254, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.81,0.82,0.86 0.89,0.93,1.0,1.1,1.1 1.2,1.2,1.2,1.3), mean=1.01, stddev=0.0938], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.8,1.8 1.9,1.9,2.0,2.1,2.2 2.2,2.3,2.3,2.4), mean=2, stddev=0.126], bias-{mean,stddev}=0.01584,1.085, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.13e+05, self-repaired-proportion=0.384766, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0005 0.01,0.02,0.16,1.9,3.2 4.3,5.3,6.7,8.9), mean=1.01, stddev=1.58], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.002 0.04,0.06,0.23,0.90,0.95 0.98,1.0,1.0,1.0), mean=0.388, stddev=0.364], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0007,0.0007,0.0007 0.0008,0.0009,0.001,0.002,0.002 0.003,0.003,0.003,0.004), mean=0.00135, stddev=0.000589], oderiv-count=138240
component name=tdnn1.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=256, learning-rate=0.00141609, max-change=0.75, linear-params-rms=0.06285, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.89,0.89,0.92 0.94,0.96,1.0,1.0,1.1 1.1,1.1,1.1,1.2), mean=1, stddev=0.0483], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.91,0.92,0.93 0.95,0.97,1.0,1.0,1.1 1.1,1.1,1.1,1.1), mean=1, stddev=0.0448], bias-{mean,stddev}=0.03389,1.09, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.38e+05, self-repaired-proportion=0.42173, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 9e-07,0.005,0.18,0.90,1.6 2.2,2.6,3.1,3.5), mean=0.515, stddev=0.727], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 3e-05,0.04,0.33,0.88,0.97 1.0,1.0,1.0,1.0), mean=0.429, stddev=0.374], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.002,0.002 0.002,0.002,0.002,0.003,0.004 0.005,0.005,0.006,0.007), mean=0.00272, stddev=0.000987], oderiv-count=133120
component name=tdnn2.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00141609, max-change=0.75, linear-params-rms=0.04483, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.93,0.95,0.96 0.97,0.98,1.0,1.0,1.1 1.1,1.1,1.1,1.2), mean=1.01, stddev=0.036], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.64,0.64,0.66 0.68,0.69,0.72,0.74,0.76 0.77,0.79,0.79,0.84), mean=0.717, stddev=0.0331], bias-{mean,stddev}=0.07195,0.9833, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.1e+04, self-repaired-proportion=0.363802, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 2e-06,0.009,0.20,1.2,1.9 2.3,2.8,3.5,4.3), mean=0.627, stddev=0.841], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 5e-05,0.06,0.35,0.85,0.95 0.99,1.0,1.0,1.0), mean=0.432, stddev=0.357], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.002,0.002 0.002,0.002,0.003,0.005,0.005 0.007,0.007,0.008,0.01), mean=0.00346, stddev=0.00153], oderiv-count=74240
component name=tdnn3.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00141609, max-change=0.75, linear-params-rms=0.04479, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.94,0.95,0.96 0.96,0.98,1.0,1.0,1.1 1.1,1.1,1.1,1.2), mean=1.01, stddev=0.0376], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.64,0.64,0.66 0.67,0.69,0.72,0.75,0.76 0.78,0.79,0.80,0.82), mean=0.716, stddev=0.0355], bias-{mean,stddev}=-0.04976,1.017, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.38e+04, self-repaired-proportion=0.445898, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.001,0.17,1.1,1.8 2.5,3.5,3.6,5.6), mean=0.599, stddev=0.914], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.01,0.29,0.87,0.95 0.99,1.0,1.0,1.0), mean=0.401, stddev=0.365], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.005,0.005 0.007,0.008,0.009,0.01), mean=0.00365, stddev=0.00154], oderiv-count=62208
component name=tdnn4.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00141609, max-change=0.75, linear-params-rms=0.04466, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.93,0.94,0.95 0.97,0.98,1.0,1.0,1.1 1.1,1.1,1.1,1.1), mean=1.01, stddev=0.0341], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.64,0.65,0.66 0.67,0.69,0.71,0.74,0.76 0.77,0.79,0.80,0.84), mean=0.714, stddev=0.0335], bias-{mean,stddev}=-0.122,0.9718, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=3.48e+04, self-repaired-proportion=0.400521, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.002,0.18,1.0,1.8 2.5,3.0,3.4,5.1), mean=0.586, stddev=0.869], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.02,0.31,0.87,0.96 0.99,1.0,1.0,1.0), mean=0.413, stddev=0.375], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.003,0.003,0.005,0.006 0.007,0.007,0.008,0.009), mean=0.00365, stddev=0.00138], oderiv-count=59392
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00141609, max-change=0.75, linear-params-rms=0.04479, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.93,0.94,0.96 0.97,0.99,1.0,1.0,1.1 1.1,1.1,1.1,1.1), mean=1.01, stddev=0.0339], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.64,0.65,0.66 0.67,0.68,0.72,0.74,0.76 0.77,0.78,0.79,0.84), mean=0.716, stddev=0.0333], bias-{mean,stddev}=0.08825,1.067, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=2.87e+04, self-repaired-proportion=0.419922, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.004,0.24,1.2,1.9 2.6,3.3,3.6,3.8), mean=0.655, stddev=0.889], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.02,0.39,0.87,0.97 1.0,1.0,1.0,1.0), mean=0.453, stddev=0.366], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.003,0.003,0.004,0.005,0.006 0.007,0.008,0.008,0.009), mean=0.0042, stddev=0.00142], oderiv-count=53760
component name=tdnn6.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn7.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00141609, max-change=0.75, linear-params-rms=0.04489, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.95,0.96 0.97,0.99,1.0,1.0,1.1 1.1,1.1,1.1,1.1), mean=1.02, stddev=0.0337], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.64,0.65,0.66 0.68,0.69,0.72,0.75,0.76 0.78,0.79,0.79,0.82), mean=0.717, stddev=0.0342], bias-{mean,stddev}=-0.02741,1.022, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn7.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=2.46e+04, self-repaired-proportion=0.398193, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 1e-06,0.002,0.24,1.1,1.6 2.3,2.6,2.9,4.6), mean=0.586, stddev=0.774], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 4e-05,0.02,0.41,0.89,0.97 1.0,1.0,1.0,1.0), mean=0.445, stddev=0.365], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.003 0.003,0.004,0.005,0.007,0.008 0.009,0.01,0.01,0.01), mean=0.00529, stddev=0.00188], oderiv-count=44544
component name=tdnn7.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn8.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00141609, max-change=0.75, linear-params-rms=0.0446, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.93,0.95,0.96 0.97,0.98,1.0,1.0,1.1 1.1,1.1,1.1,1.1), mean=1.01, stddev=0.0334], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.64,0.65,0.66 0.68,0.69,0.71,0.74,0.75 0.76,0.78,0.78,0.80), mean=0.713, stddev=0.0309], bias-{mean,stddev}=-0.00321,1.067, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn8.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=2.43e+04, self-repaired-proportion=0.436756, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.0004,0.33,1.2,1.8 2.1,2.7,3.1,3.5), mean=0.597, stddev=0.765], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.005,0.40,0.87,0.96 1.0,1.0,1.0,1.0), mean=0.438, stddev=0.37], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.004 0.004,0.004,0.005,0.007,0.007 0.009,0.01,0.01,0.02), mean=0.00551, stddev=0.00185], oderiv-count=39680
component name=tdnn8.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn9.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00141609, max-change=0.75, linear-params-rms=0.04466, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.93,0.94,0.96 0.97,0.98,1.0,1.0,1.1 1.1,1.1,1.1,1.1), mean=1.01, stddev=0.0345], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.64,0.65,0.66 0.67,0.69,0.71,0.74,0.75 0.77,0.78,0.79,0.82), mean=0.714, stddev=0.0322], bias-{mean,stddev}=-0.03462,0.9976, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn9.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=2.05e+04, self-repaired-proportion=0.393229, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.003,0.23,1.1,1.5 2.3,2.9,3.3,4.3), mean=0.587, stddev=0.782], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.02,0.33,0.90,0.97 1.0,1.0,1.0,1.0), mean=0.443, stddev=0.38], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.004 0.004,0.005,0.006,0.007,0.008 0.01,0.01,0.01,0.01), mean=0.00607, stddev=0.00186], oderiv-count=26624
component name=tdnn9.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn10.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00141609, max-change=0.75, linear-params-rms=0.04473, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.95,0.95 0.96,0.98,1.0,1.0,1.1 1.1,1.1,1.1,1.1), mean=1.01, stddev=0.0338], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.64,0.65,0.66 0.68,0.69,0.71,0.74,0.76 0.77,0.78,0.80,0.82), mean=0.715, stddev=0.0322], bias-{mean,stddev}=0.06544,1.075, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn10.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.23e+04, self-repaired-proportion=0.504136, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.0004,0.29,1.6,2.1 2.4,2.7,3.1,3.4), mean=0.683, stddev=0.86], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.004,0.39,0.96,1.0 1.0,1.0,1.0,1.0), mean=0.465, stddev=0.406], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.005,0.006 0.006,0.006,0.008,0.01,0.01 0.01,0.01,0.02,0.02), mean=0.00844, stddev=0.00245], oderiv-count=22272
component name=tdnn10.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn11.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00141609, max-change=0.75, linear-params-rms=0.04473, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.93,0.94,0.96 0.97,0.98,1.0,1.0,1.1 1.1,1.1,1.1,1.1), mean=1.01, stddev=0.034], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.64,0.65,0.66 0.67,0.68,0.71,0.74,0.76 0.77,0.79,0.80,0.85), mean=0.715, stddev=0.0342], bias-{mean,stddev}=-0.03494,1.049, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn11.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=8.19e+03, self-repaired-proportion=0.565104, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,3e-05,0.09,1.3,2.1 2.7,2.9,3.3,5.2), mean=0.625, stddev=0.928], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.0005,0.17,0.97,0.99 1.0,1.0,1.0,1.0), mean=0.418, stddev=0.432], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.007,0.008,0.008 0.009,0.01,0.01,0.01,0.02 0.02,0.02,0.02,0.03), mean=0.0125, stddev=0.00348], oderiv-count=14848
component name=tdnn11.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnnFINAL.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00141609, max-change=0.75, linear-params-rms=0.04466, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.92,0.92,0.95 0.97,0.98,1.0,1.0,1.1 1.1,1.1,1.1,1.1), mean=1.01, stddev=0.0361], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.64,0.64,0.66 0.67,0.69,0.71,0.74,0.76 0.77,0.78,0.79,0.82), mean=0.714, stddev=0.0336], bias-{mean,stddev}=-0.077,0.9505, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnnFINAL.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=5.12e+03, self-repaired-proportion=0.560432, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,6e-06,0.10,1.3,2.0 2.6,3.0,3.7,4.5), mean=0.609, stddev=0.918], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.0004,0.23,0.94,0.99 1.0,1.0,1.0,1.0), mean=0.408, stddev=0.41], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.02,0.02,0.02,0.03 0.03,0.04,0.04,0.05), mean=0.0203, stddev=0.00696], oderiv-count=7680
component name=tdnnFINAL.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=prefinal-affine-task-0.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=256, learning-rate=0.00141609, max-change=0.75, linear-params-rms=0.0627, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.89,0.90,0.92 0.94,0.96,1.0,1.0,1.1 1.1,1.1,1.1,1.1), mean=1, stddev=0.047], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,0.90,0.92,0.93 0.95,0.97,1.0,1.0,1.1 1.1,1.1,1.1,1.2), mean=1, stddev=0.044], bias-{mean,stddev}=-0.0001229,1.012, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-affine-task-0.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=6.14e+03, self-repaired-proportion=0.530924, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,2e-05,0.14,1.2,1.9 2.3,2.6,2.9,3.4), mean=0.594, stddev=0.798], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.0008,0.35,0.97,1.0 1.0,1.0,1.0,1.0), mean=0.459, stddev=0.42], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-08,8e-08,8e-08,1e-07 2e-07,0.0002,0.02,0.03,0.03 0.04,0.05,0.05,0.05), mean=0.0162, stddev=0.0135], oderiv-count=7168
component name=prefinal-affine-task-0.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output-0.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=96, learning-rate=0.00141609, max-change=1.5, linear-params-rms=0.0225, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.15,0.15,0.17 0.22,0.27,0.34,0.43,0.46 0.49,0.52,0.53,0.87), mean=0.345, stddev=0.104], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-07,8e-07,9e-07,1e-06 2e-06,0.003,0.17,0.29,0.35 0.40,0.45,0.51,0.57), mean=0.168, stddev=0.143], bias-{mean,stddev}=-6.468e-08,0.00601, rank-in=20, rank-out=48, num-samples-history=2000, update-period=4, alpha=4
component name=output-0.log-softmax type=LogSoftmaxComponent, dim=96, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.01,0.04 0.06,0.07,0.08,0.11,0.13 0.15,0.22,0.27,0.29), mean=0.0927, stddev=0.0427], oderiv-count=8192
nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/1.raw MTL/exp/nnet3/multitask/2.raw 
LOG (nnet3-show-progress[5.4.217~1-8ae5]:SelectGpuId():cu-device.cc:123) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:1.89279 tdnn2.affine:1.69167 tdnn3.affine:1.94064 tdnn4.affine:1.90161 tdnn5.affine:1.89236 tdnn6.affine:1.81459 tdnn7.affine:1.85808 tdnn8.affine:1.83949 tdnn9.affine:1.82919 tdnn10.affine:1.77094 tdnn11.affine:1.85561 tdnnFINAL.affine:1.97791 prefinal-affine-task-0.affine:1.62017 output-0.affine:2.24511 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:23.7262 tdnn2.affine:23.7359 tdnn3.affine:22.6342 tdnn4.affine:22.9827 tdnn5.affine:22.5179 tdnn6.affine:23.5927 tdnn7.affine:23.0582 tdnn8.affine:23.4961 tdnn9.affine:22.7276 tdnn10.affine:23.6448 tdnn11.affine:23.3232 tdnnFINAL.affine:22.2319 prefinal-affine-task-0.affine:22.7934 output-0.affine:3.5285 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0803439 tdnn2.affine:0.0714478 tdnn3.affine:0.086115 tdnn4.affine:0.0831025 tdnn5.affine:0.0844549 tdnn6.affine:0.0772514 tdnn7.affine:0.0809544 tdnn8.affine:0.0785868 tdnn9.affine:0.0808109 tdnn10.affine:0.0751453 tdnn11.affine:0.0798294 tdnnFINAL.affine:0.0893266 prefinal-affine-task-0.affine:0.0711808 output-0.affine:0.815668 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Tue Jul 24 11:13:32 UTC 2018, elapsed time 1 seconds
