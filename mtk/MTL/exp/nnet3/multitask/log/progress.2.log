# nnet3-info MTL/exp/nnet3/multitask/2.raw && nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/1.raw MTL/exp/nnet3/multitask/2.raw 
# Started at Sat Jul 28 03:07:56 UTC 2018
#
nnet3-info MTL/exp/nnet3/multitask/2.raw 
num-parameters: 13897312
modulus: 1
input-node name=input dim=13
component-node name=tdnn1.affine component=tdnn1.affine input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=65 output-dim=768
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=768 output-dim=768
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=768 output-dim=768
component-node name=tdnn2.affine component=tdnn2.affine input=tdnn1.renorm input-dim=768 output-dim=768
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=768 output-dim=768
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=768 output-dim=768
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -1), Offset(tdnn2.renorm, 2)) input-dim=1536 output-dim=768
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=768 output-dim=768
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=768 output-dim=768
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -3), Offset(tdnn3.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=768 output-dim=768
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=768 output-dim=768
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -3), Offset(tdnn4.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=768 output-dim=768
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=768 output-dim=768
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.renorm, -3), Offset(tdnn5.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=768 output-dim=768
component-node name=tdnn6.renorm component=tdnn6.renorm input=tdnn6.relu input-dim=768 output-dim=768
component-node name=tdnn7.affine component=tdnn7.affine input=Append(Offset(tdnn6.renorm, -3), Offset(tdnn6.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn7.relu component=tdnn7.relu input=tdnn7.affine input-dim=768 output-dim=768
component-node name=tdnn7.renorm component=tdnn7.renorm input=tdnn7.relu input-dim=768 output-dim=768
component-node name=tdnn8.affine component=tdnn8.affine input=Append(Offset(tdnn7.renorm, -3), Offset(tdnn7.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn8.relu component=tdnn8.relu input=tdnn8.affine input-dim=768 output-dim=768
component-node name=tdnn8.renorm component=tdnn8.renorm input=tdnn8.relu input-dim=768 output-dim=768
component-node name=tdnn9.affine component=tdnn9.affine input=Append(Offset(tdnn8.renorm, -3), Offset(tdnn8.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn9.relu component=tdnn9.relu input=tdnn9.affine input-dim=768 output-dim=768
component-node name=tdnn9.renorm component=tdnn9.renorm input=tdnn9.relu input-dim=768 output-dim=768
component-node name=tdnn10.affine component=tdnn10.affine input=Append(Offset(tdnn9.renorm, -3), Offset(tdnn9.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn10.relu component=tdnn10.relu input=tdnn10.affine input-dim=768 output-dim=768
component-node name=tdnn10.renorm component=tdnn10.renorm input=tdnn10.relu input-dim=768 output-dim=768
component-node name=tdnn11.affine component=tdnn11.affine input=Append(Offset(tdnn10.renorm, -3), Offset(tdnn10.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn11.relu component=tdnn11.relu input=tdnn11.affine input-dim=768 output-dim=768
component-node name=tdnn11.renorm component=tdnn11.renorm input=tdnn11.relu input-dim=768 output-dim=768
component-node name=tdnnFINAL.affine component=tdnnFINAL.affine input=Append(Offset(tdnn11.renorm, -3), Offset(tdnn11.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnnFINAL.relu component=tdnnFINAL.relu input=tdnnFINAL.affine input-dim=768 output-dim=768
component-node name=tdnnFINAL.renorm component=tdnnFINAL.renorm input=tdnnFINAL.relu input-dim=768 output-dim=768
component-node name=prefinal-affine-task-0.affine component=prefinal-affine-task-0.affine input=tdnnFINAL.renorm input-dim=768 output-dim=768
component-node name=prefinal-affine-task-0.relu component=prefinal-affine-task-0.relu input=prefinal-affine-task-0.affine input-dim=768 output-dim=768
component-node name=prefinal-affine-task-0.renorm component=prefinal-affine-task-0.renorm input=prefinal-affine-task-0.relu input-dim=768 output-dim=768
component-node name=output-0.affine component=output-0.affine input=prefinal-affine-task-0.renorm input-dim=768 output-dim=168
component-node name=output-0.log-softmax component=output-0.log-softmax input=output-0.affine input-dim=168 output-dim=168
output-node name=output-0 input=output-0.log-softmax dim=168 objective=linear
component-node name=prefinal-affine-task-1.affine component=prefinal-affine-task-1.affine input=tdnnFINAL.renorm input-dim=768 output-dim=768
component-node name=prefinal-affine-task-1.relu component=prefinal-affine-task-1.relu input=prefinal-affine-task-1.affine input-dim=768 output-dim=768
component-node name=prefinal-affine-task-1.renorm component=prefinal-affine-task-1.renorm input=prefinal-affine-task-1.relu input-dim=768 output-dim=768
component-node name=output-1.affine component=output-1.affine input=prefinal-affine-task-1.renorm input-dim=768 output-dim=184
component-node name=output-1.log-softmax component=output-1.log-softmax input=output-1.affine input-dim=184 output-dim=184
output-node name=output-1 input=output-1.log-softmax dim=184 objective=linear
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=65, output-dim=768, learning-rate=0.00147857, max-change=0.75, linear-params-rms=0.1231, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.80,0.82,0.85 0.88,0.92,0.99,1.1,1.1 1.1,1.2,1.2,1.3), mean=0.989, stddev=0.0856], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.0,3.0,3.0,3.2 3.3,3.3,3.4,3.5,3.5 3.6,3.6,3.6,3.7), mean=3.41, stddev=0.127], bias-{mean,stddev}=0.02958,1.025, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=1.95e+05, self-repaired-proportion=0.162626, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.002,0.01,0.02 0.02,0.04,0.20,1.3,1.9 2.6,3.7,5.3,9.2), mean=0.683, stddev=1.05], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.009,0.05,0.05 0.06,0.09,0.33,0.86,0.94 0.96,1.0,1.0,1.0), mean=0.434, stddev=0.34], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0005,0.0005,0.0006 0.0006,0.0006,0.0007,0.0009,0.001 0.001,0.001,0.001,0.002), mean=0.000793, stddev=0.000203], oderiv-count=276480
component name=tdnn1.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=768, learning-rate=0.00147857, max-change=0.75, linear-params-rms=0.03626, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.95,0.95,0.96 0.97,0.98,1.0,1.0,1.0 1.0,1.1,1.1,1.1), mean=1, stddev=0.0262], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.94,0.95,0.96 0.97,0.98,1.0,1.0,1.0 1.0,1.1,1.1,1.1), mean=1, stddev=0.0257], bias-{mean,stddev}=0.01175,1.052, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=1.54e+05, self-repaired-proportion=0.287722, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,7e-05,0.005 0.01,0.03,0.20,0.74,1.2 1.6,2.0,2.2,4.0), mean=0.433, stddev=0.565], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0008,0.03 0.06,0.11,0.44,0.87,0.95 0.98,1.0,1.0,1.0), mean=0.483, stddev=0.345], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.001,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.002,0.003,0.003,0.003), mean=0.0015, stddev=0.000387], oderiv-count=296960
component name=tdnn2.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00147857, max-change=0.75, linear-params-rms=0.02567, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.96,0.97,0.98 0.98,0.99,1.0,1.0,1.0 1.0,1.0,1.1,1.1), mean=1.01, stddev=0.0188], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.67,0.67,0.68 0.69,0.70,0.71,0.72,0.73 0.74,0.75,0.76,0.81), mean=0.711, stddev=0.0177], bias-{mean,stddev}=0.01786,1.008, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=8.7e+04, self-repaired-proportion=0.256436, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,1e-06,5e-05,0.002 0.01,0.03,0.24,0.97,1.5 1.9,2.3,3.0,4.3), mean=0.53, stddev=0.671], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,2e-05,0.0006,0.01 0.05,0.11,0.44,0.87,0.94 0.97,1.0,1.0,1.0), mean=0.481, stddev=0.339], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0009,0.0009,0.001 0.001,0.001,0.001,0.002,0.002 0.003,0.003,0.003,0.004), mean=0.00157, stddev=0.000566], oderiv-count=130560
component name=tdnn3.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00147857, max-change=0.75, linear-params-rms=0.02565, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.96,0.97,0.97 0.98,0.99,1.0,1.0,1.0 1.0,1.0,1.0,1.1), mean=1, stddev=0.019], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.66,0.66,0.68 0.69,0.70,0.71,0.72,0.73 0.74,0.75,0.76,0.81), mean=0.71, stddev=0.0196], bias-{mean,stddev}=0.007539,1.004, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=8.29e+04, self-repaired-proportion=0.250521, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0004 0.007,0.02,0.23,0.89,1.5 2.1,2.9,3.3,4.5), mean=0.527, stddev=0.731], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.004 0.04,0.08,0.38,0.84,0.93 0.97,0.99,1.0,1.0), mean=0.447, stddev=0.346], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0009,0.0009,0.001 0.001,0.001,0.001,0.002,0.002 0.003,0.003,0.003,0.005), mean=0.00149, stddev=0.000509], oderiv-count=129024
component name=tdnn4.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00147857, max-change=0.75, linear-params-rms=0.02564, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.96,0.96,0.97 0.98,0.99,1.0,1.0,1.0 1.0,1.0,1.1,1.1), mean=1, stddev=0.0191], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.66,0.67,0.68 0.69,0.70,0.71,0.72,0.73 0.74,0.75,0.76,0.79), mean=0.71, stddev=0.0178], bias-{mean,stddev}=0.02208,1.015, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=5.12e+04, self-repaired-proportion=0.215169, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,9e-07,0.003 0.01,0.04,0.23,1.1,1.6 2.1,2.7,3.2,4.6), mean=0.562, stddev=0.744], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,4e-05,0.02 0.05,0.09,0.37,0.85,0.92 0.95,0.98,0.99,1.0), mean=0.454, stddev=0.344], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.001,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.002,0.003,0.003,0.004), mean=0.00154, stddev=0.000421], oderiv-count=106496
component name=tdnn5.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00147857, max-change=0.75, linear-params-rms=0.02564, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.96,0.97,0.97 0.98,0.99,1.0,1.0,1.0 1.0,1.0,1.0,1.1), mean=1, stddev=0.0184], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.66,0.67,0.68 0.69,0.70,0.71,0.72,0.73 0.74,0.75,0.76,0.80), mean=0.71, stddev=0.0185], bias-{mean,stddev}=0.04589,1.007, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=5.56e+04, self-repaired-proportion=0.183957, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,5e-06,0.0003,0.006 0.01,0.04,0.27,1.0,1.4 1.8,2.3,2.5,3.5), mean=0.528, stddev=0.619], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,9e-05,0.003,0.04 0.06,0.12,0.35,0.82,0.91 0.95,0.98,1.0,1.0), mean=0.448, stddev=0.324], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0009,0.0009,0.001 0.001,0.001,0.001,0.002,0.002 0.002,0.002,0.003,0.004), mean=0.00135, stddev=0.000369], oderiv-count=91392
component name=tdnn6.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn7.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00147857, max-change=0.75, linear-params-rms=0.02567, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.96,0.97,0.98 0.98,0.99,1.0,1.0,1.0 1.0,1.0,1.1,1.1), mean=1.01, stddev=0.0191], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.66,0.67,0.68 0.69,0.70,0.71,0.72,0.73 0.74,0.76,0.76,0.83), mean=0.711, stddev=0.0191], bias-{mean,stddev}=0.0166,0.9739, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn7.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=4.92e+04, self-repaired-proportion=0.198289, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0003 0.005,0.03,0.24,0.91,1.5 2.0,2.6,2.9,4.5), mean=0.53, stddev=0.703], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.003 0.03,0.09,0.34,0.81,0.91 0.96,0.99,1.0,1.0), mean=0.431, stddev=0.332], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0009,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.002,0.002,0.002,0.003), mean=0.00142, stddev=0.000324], oderiv-count=70656
component name=tdnn7.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn8.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00147857, max-change=0.75, linear-params-rms=0.02566, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.97,0.97,0.98 0.98,0.99,1.0,1.0,1.0 1.0,1.0,1.1,1.1), mean=1.01, stddev=0.018], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.67,0.67,0.68 0.69,0.70,0.71,0.72,0.73 0.74,0.75,0.76,0.79), mean=0.711, stddev=0.0177], bias-{mean,stddev}=-0.05802,1.063, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn8.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=3.46e+04, self-repaired-proportion=0.278212, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,3e-06 0.002,0.02,0.26,0.94,1.5 2.1,2.7,2.9,3.8), mean=0.54, stddev=0.702], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,6e-05 0.01,0.08,0.36,0.78,0.90 0.96,0.99,1.0,1.0), mean=0.415, stddev=0.322], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002,0.002 0.002,0.003,0.003,0.004), mean=0.00163, stddev=0.000382], oderiv-count=67840
component name=tdnn8.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn9.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00147857, max-change=0.75, linear-params-rms=0.02566, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.96,0.97,0.98 0.98,0.99,1.0,1.0,1.0 1.0,1.0,1.1,1.1), mean=1.01, stddev=0.0194], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.66,0.67,0.68 0.69,0.70,0.71,0.73,0.73 0.74,0.75,0.76,0.79), mean=0.711, stddev=0.0187], bias-{mean,stddev}=-0.05929,0.9983, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn9.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=3.48e+04, self-repaired-proportion=0.260838, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,1e-06 0.0007,0.02,0.29,0.97,1.5 1.9,2.5,3.0,4.7), mean=0.548, stddev=0.675], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,3e-05 0.007,0.08,0.41,0.80,0.91 0.96,0.99,1.0,1.0), mean=0.439, stddev=0.326], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002,0.002 0.003,0.003,0.003,0.004), mean=0.00178, stddev=0.0004], oderiv-count=54272
component name=tdnn9.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn10.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00147857, max-change=0.75, linear-params-rms=0.02565, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.96,0.97,0.97 0.98,0.99,1.0,1.0,1.0 1.0,1.0,1.0,1.1), mean=1.01, stddev=0.0189], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.66,0.67,0.68 0.69,0.70,0.71,0.72,0.73 0.74,0.75,0.75,0.79), mean=0.711, stddev=0.0189], bias-{mean,stddev}=0.02928,1.028, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn10.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=2.53e+04, self-repaired-proportion=0.266173, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.0008,0.02,0.28,1.1,1.8 2.4,2.7,3.2,5.1), mean=0.611, stddev=0.795], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.007,0.09,0.40,0.81,0.92 0.97,1.0,1.0,1.0), mean=0.442, stddev=0.331], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.002,0.002,0.003,0.003 0.003,0.003,0.004,0.005), mean=0.00228, stddev=0.00048], oderiv-count=40704
component name=tdnn10.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn11.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00147857, max-change=0.75, linear-params-rms=0.02569, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.96,0.97,0.97 0.98,0.99,1.0,1.0,1.0 1.0,1.0,1.0,1.1), mean=1.01, stddev=0.02], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.66,0.67,0.68 0.69,0.70,0.71,0.73,0.73 0.74,0.75,0.76,0.79), mean=0.712, stddev=0.0189], bias-{mean,stddev}=0.03183,1.019, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn11.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=1.64e+04, self-repaired-proportion=0.386589, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 4e-08,0.003,0.24,1.3,2.0 2.5,3.2,3.7,5.5), mean=0.656, stddev=0.897], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 6e-05,0.02,0.40,0.86,0.97 1.0,1.0,1.0,1.0), mean=0.435, stddev=0.362], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.003 0.003,0.003,0.003,0.004,0.004 0.005,0.005,0.005,0.006), mean=0.00339, stddev=0.000684], oderiv-count=28672
component name=tdnn11.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnnFINAL.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00147857, max-change=0.75, linear-params-rms=0.02568, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.96,0.97,0.97 0.98,0.99,1.0,1.0,1.0 1.0,1.0,1.0,1.1), mean=1.01, stddev=0.0194], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.66,0.66,0.68 0.69,0.70,0.71,0.73,0.74 0.74,0.75,0.76,0.78), mean=0.712, stddev=0.0194], bias-{mean,stddev}=-0.06711,0.9594, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnnFINAL.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=8.7e+03, self-repaired-proportion=0.397719, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.001,0.20,1.3,1.9 2.4,3.1,3.4,5.2), mean=0.652, stddev=0.895], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.01,0.34,0.88,0.97 1.0,1.0,1.0,1.0), mean=0.426, stddev=0.377], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.004 0.004,0.005,0.006,0.008,0.009 0.009,0.01,0.01,0.01), mean=0.00641, stddev=0.0016], oderiv-count=12288
component name=tdnnFINAL.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=prefinal-affine-task-0.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=768, learning-rate=0.00147857, max-change=0.75, linear-params-rms=0.03622, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.94,0.95,0.96 0.97,0.98,1.0,1.0,1.0 1.0,1.1,1.1,1.1), mean=1, stddev=0.0267], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.95,0.96 0.97,0.98,1.0,1.0,1.0 1.0,1.1,1.1,1.1), mean=1, stddev=0.0261], bias-{mean,stddev}=0.001376,1.007, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-affine-task-0.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=4.61e+03, self-repaired-proportion=0.550781, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.0001,0.18,1.3,2.0 2.5,3.1,3.3,4.7), mean=0.661, stddev=0.898], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.002,0.41,0.99,1.0 1.0,1.0,1.0,1.0), mean=0.468, stddev=0.42], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-08,3e-08,3e-08,3e-08 5e-08,8e-05,0.009,0.01,0.02 0.02,0.02,0.03,0.03), mean=0.00807, stddev=0.00681], oderiv-count=7168
component name=prefinal-affine-task-0.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=output-0.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=168, learning-rate=0.00147857, max-change=1.5, linear-params-rms=0.01315, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.11,0.12,0.16 0.20,0.25,0.34,0.41,0.47 0.51,0.61,0.79,1.0), mean=0.341, stddev=0.128], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-07,6e-07,6e-07,7e-07 8e-07,0.001,0.14,0.24,0.27 0.29,0.34,0.35,0.41), mean=0.131, stddev=0.109], bias-{mean,stddev}=2.139e-07,0.002075, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-0.log-softmax type=LogSoftmaxComponent, dim=168, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.01,0.02 0.03,0.04,0.05,0.06,0.08 0.10,0.13,0.15,0.27), mean=0.0533, stddev=0.0311], oderiv-count=6656
component name=prefinal-affine-task-1.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=768, learning-rate=0.00147857, max-change=0.75, linear-params-rms=0.03604, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.94,0.95,0.96 0.97,0.98,1.0,1.0,1.0 1.0,1.0,1.1,1.1), mean=0.998, stddev=0.0252], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.94,0.95,0.96 0.97,0.98,1.0,1.0,1.0 1.0,1.0,1.1,1.1), mean=0.998, stddev=0.0249], bias-{mean,stddev}=-0.06968,1.032, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-affine-task-1.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=3.84e+03, self-repaired-proportion=0.617341, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.11,1.1,1.6 2.1,2.6,2.8,4.0), mean=0.51, stddev=0.728], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.41,0.99,1.0 1.0,1.0,1.0,1.0), mean=0.465, stddev=0.425], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-09,5e-09,5e-09,6e-09 7e-09,3e-06,0.001,0.002,0.003 0.003,0.004,0.004,0.005), mean=0.0013, stddev=0.00115], oderiv-count=7936
component name=prefinal-affine-task-1.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=output-1.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=184, learning-rate=0.00147857, max-change=1.5, linear-params-rms=0.005982, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.06 0.06,0.06,0.06,0.22,0.28 0.32,0.39,0.44,0.58), mean=0.13, stddev=0.103], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-07,2e-07,3e-07 3e-07,0.0001,0.06,0.11,0.14 0.15,0.17,0.18,0.21), mean=0.0601, stddev=0.0545], bias-{mean,stddev}=-4.353e-07,0.00168, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-1.log-softmax type=LogSoftmaxComponent, dim=184, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.02,0.03 0.03,0.04,0.05,0.06), mean=0.00808, stddev=0.0123], oderiv-count=5888
nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/1.raw MTL/exp/nnet3/multitask/2.raw 
LOG (nnet3-show-progress[5.4.224~1-d4d9]:SelectGpuId():cu-device.cc:123) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.4.224~1-d4d9]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:1.59661 tdnn2.affine:1.79485 tdnn3.affine:1.97729 tdnn4.affine:1.96724 tdnn5.affine:1.9849 tdnn6.affine:2.01807 tdnn7.affine:2.04402 tdnn8.affine:2.16867 tdnn9.affine:2.29443 tdnn10.affine:2.37016 tdnn11.affine:2.45793 tdnnFINAL.affine:2.5862 prefinal-affine-task-0.affine:2.46434 output-0.affine:3.13872 prefinal-affine-task-1.affine:0.662516 output-1.affine:1.09999 ]
LOG (nnet3-show-progress[5.4.224~1-d4d9]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:39.5465 tdnn2.affine:40.3117 tdnn3.affine:39.4772 tdnn4.affine:39.3723 tdnn5.affine:39.5826 tdnn6.affine:39.4558 tdnn7.affine:38.8103 tdnn8.affine:40.586 tdnn9.affine:39.3059 tdnn10.affine:39.8467 tdnn11.affine:39.714 tdnnFINAL.affine:38.5814 prefinal-affine-task-0.affine:39.397 output-0.affine:4.72422 prefinal-affine-task-1.affine:39.8427 output-1.affine:2.24884 ]
LOG (nnet3-show-progress[5.4.224~1-d4d9]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.040444 tdnn2.affine:0.0445745 tdnn3.affine:0.0501534 tdnn4.affine:0.0500385 tdnn5.affine:0.0502262 tdnn6.affine:0.0512385 tdnn7.affine:0.0527695 tdnn8.affine:0.0535396 tdnn9.affine:0.0585052 tdnn10.affine:0.0596111 tdnn11.affine:0.062026 tdnnFINAL.affine:0.0671927 prefinal-affine-task-0.affine:0.0626339 output-0.affine:0.94714 prefinal-affine-task-1.affine:0.0166294 output-1.affine:0.604983 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Sat Jul 28 03:07:56 UTC 2018, elapsed time 0 seconds
