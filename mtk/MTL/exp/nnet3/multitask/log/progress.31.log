# nnet3-info MTL/exp/nnet3/multitask/31.raw && nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/30.raw MTL/exp/nnet3/multitask/31.raw 
# Started at Tue Jul 24 11:17:56 UTC 2018
#
nnet3-info MTL/exp/nnet3/multitask/31.raw 
num-parameters: 1486432
modulus: 1
input-node name=input dim=13
component-node name=tdnn1.affine component=tdnn1.affine input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=65 output-dim=256
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=256 output-dim=256
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=256 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=tdnn1.renorm input-dim=256 output-dim=256
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=256 output-dim=256
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=256 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -1), Offset(tdnn2.renorm, 2)) input-dim=512 output-dim=256
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=256 output-dim=256
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=256 output-dim=256
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -3), Offset(tdnn3.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=256 output-dim=256
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=256 output-dim=256
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -3), Offset(tdnn4.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.renorm, -3), Offset(tdnn5.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=256 output-dim=256
component-node name=tdnn6.renorm component=tdnn6.renorm input=tdnn6.relu input-dim=256 output-dim=256
component-node name=tdnn7.affine component=tdnn7.affine input=Append(Offset(tdnn6.renorm, -3), Offset(tdnn6.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn7.relu component=tdnn7.relu input=tdnn7.affine input-dim=256 output-dim=256
component-node name=tdnn7.renorm component=tdnn7.renorm input=tdnn7.relu input-dim=256 output-dim=256
component-node name=tdnn8.affine component=tdnn8.affine input=Append(Offset(tdnn7.renorm, -3), Offset(tdnn7.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn8.relu component=tdnn8.relu input=tdnn8.affine input-dim=256 output-dim=256
component-node name=tdnn8.renorm component=tdnn8.renorm input=tdnn8.relu input-dim=256 output-dim=256
component-node name=tdnn9.affine component=tdnn9.affine input=Append(Offset(tdnn8.renorm, -3), Offset(tdnn8.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn9.relu component=tdnn9.relu input=tdnn9.affine input-dim=256 output-dim=256
component-node name=tdnn9.renorm component=tdnn9.renorm input=tdnn9.relu input-dim=256 output-dim=256
component-node name=tdnn10.affine component=tdnn10.affine input=Append(Offset(tdnn9.renorm, -3), Offset(tdnn9.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn10.relu component=tdnn10.relu input=tdnn10.affine input-dim=256 output-dim=256
component-node name=tdnn10.renorm component=tdnn10.renorm input=tdnn10.relu input-dim=256 output-dim=256
component-node name=tdnn11.affine component=tdnn11.affine input=Append(Offset(tdnn10.renorm, -3), Offset(tdnn10.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn11.relu component=tdnn11.relu input=tdnn11.affine input-dim=256 output-dim=256
component-node name=tdnn11.renorm component=tdnn11.renorm input=tdnn11.relu input-dim=256 output-dim=256
component-node name=tdnnFINAL.affine component=tdnnFINAL.affine input=Append(Offset(tdnn11.renorm, -3), Offset(tdnn11.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnnFINAL.relu component=tdnnFINAL.relu input=tdnnFINAL.affine input-dim=256 output-dim=256
component-node name=tdnnFINAL.renorm component=tdnnFINAL.renorm input=tdnnFINAL.relu input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.affine component=prefinal-affine-task-0.affine input=tdnnFINAL.renorm input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.relu component=prefinal-affine-task-0.relu input=prefinal-affine-task-0.affine input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.renorm component=prefinal-affine-task-0.renorm input=prefinal-affine-task-0.relu input-dim=256 output-dim=256
component-node name=output-0.affine component=output-0.affine input=prefinal-affine-task-0.renorm input-dim=256 output-dim=96
component-node name=output-0.log-softmax component=output-0.log-softmax input=output-0.affine input-dim=96 output-dim=96
output-node name=output-0 input=output-0.log-softmax dim=96 objective=linear
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=65, output-dim=256, learning-rate=0.000266742, max-change=0.75, linear-params-rms=0.1541, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.89,0.90,0.93 0.96,1.0,1.2,1.4,1.6 1.7,1.7,1.8,1.9), mean=1.22, stddev=0.221], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.0,2.0,2.1 2.1,2.2,2.4,2.7,2.8 2.9,2.9,3.1,3.2), mean=2.45, stddev=0.27], bias-{mean,stddev}=0.0171,1.102, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=8.19e+04, self-repaired-proportion=0.0454963, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.02,0.03 0.04,0.06,0.30,1.5,2.1 2.6,3.0,3.6,5.2), mean=0.762, stddev=0.939], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.06 0.08,0.12,0.34,0.82,0.91 0.93,0.95,0.96,0.97), mean=0.433, stddev=0.312], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.005,0.005 0.006,0.006,0.008,0.009,0.01 0.01,0.01,0.01,0.01), mean=0.00797, stddev=0.00209], oderiv-count=163840
component name=tdnn1.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=256, learning-rate=0.000266742, max-change=0.75, linear-params-rms=0.06547, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.90,0.92,0.95 0.97,1.0,1.0,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.05, stddev=0.0612], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.92,0.93,0.94 0.96,0.98,1.0,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.05, stddev=0.0652], bias-{mean,stddev}=0.03391,1.089, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=8.7e+04, self-repaired-proportion=0.0121875, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.01,0.01,0.02 0.04,0.08,0.35,0.86,1.1 1.4,1.6,1.9,3.3), mean=0.483, stddev=0.493], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.06,0.07 0.11,0.19,0.45,0.73,0.84 0.91,0.93,0.95,0.98), mean=0.458, stddev=0.262], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.008,0.008,0.009 0.009,0.01,0.01,0.01,0.02 0.02,0.02,0.02,0.03), mean=0.0125, stddev=0.0032], oderiv-count=174080
component name=tdnn2.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000266742, max-change=0.75, linear-params-rms=0.04767, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.96,0.97,0.98 1.0,1.0,1.1,1.1,1.2 1.2,1.2,1.3,1.3), mean=1.08, stddev=0.0643], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.66,0.68 0.70,0.71,0.76,0.81,0.83 0.86,0.88,0.90,0.94), mean=0.761, stddev=0.0548], bias-{mean,stddev}=0.07202,0.9825, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=5.63e+04, self-repaired-proportion=0.045847, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.001,0.009,0.02 0.04,0.10,0.39,1.0,1.3 1.8,2.0,2.2,2.6), mean=0.586, stddev=0.569], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.008,0.04,0.07 0.12,0.23,0.43,0.73,0.80 0.88,0.92,0.95,0.98), mean=0.458, stddev=0.259], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.009,0.009,0.01 0.01,0.01,0.01,0.02,0.02 0.03,0.03,0.03,0.03), mean=0.016, stddev=0.00514], oderiv-count=84480
component name=tdnn3.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000266742, max-change=0.75, linear-params-rms=0.04784, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.95,0.96,0.98 1.0,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.08, stddev=0.0688], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.66,0.68 0.69,0.71,0.76,0.81,0.84 0.87,0.90,0.91,0.94), mean=0.763, stddev=0.0593], bias-{mean,stddev}=-0.04938,1.016, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.61e+04, self-repaired-proportion=0.0423828, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0005,0.006,0.02 0.03,0.07,0.33,0.98,1.3 1.8,2.1,2.7,3.0), mean=0.55, stddev=0.592], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.003,0.03,0.07 0.10,0.16,0.40,0.68,0.78 0.86,0.90,0.94,0.99), mean=0.422, stddev=0.255], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.009,0.01,0.01 0.01,0.01,0.02,0.02,0.03 0.03,0.03,0.03,0.04), mean=0.0168, stddev=0.00554], oderiv-count=64512
component name=tdnn4.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000266742, max-change=0.75, linear-params-rms=0.04751, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.94,0.96,0.97 1.0,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.07, stddev=0.0654], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.66,0.67,0.68 0.69,0.71,0.75,0.81,0.84 0.86,0.88,0.90,0.94), mean=0.758, stddev=0.0558], bias-{mean,stddev}=-0.1218,0.9711, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.3e+04, self-repaired-proportion=0.0568182, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,2e-05,0.002,0.01 0.03,0.09,0.33,0.92,1.5 1.9,2.6,2.7,3.5), mean=0.569, stddev=0.647], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0002,0.01,0.05 0.08,0.18,0.40,0.71,0.82 0.89,0.91,0.93,0.98), mean=0.431, stddev=0.265], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.009,0.009,0.01 0.01,0.01,0.01,0.02,0.02 0.03,0.03,0.03,0.04), mean=0.0162, stddev=0.00546], oderiv-count=67584
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000266742, max-change=0.75, linear-params-rms=0.04753, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.95,0.97,0.98 0.99,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.2), mean=1.07, stddev=0.0647], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.66,0.67,0.68 0.69,0.71,0.75,0.80,0.83 0.86,0.89,0.90,0.93), mean=0.759, stddev=0.0544], bias-{mean,stddev}=0.08835,1.067, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=3.94e+04, self-repaired-proportion=0.0637429, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,3e-05,0.0008,0.009 0.03,0.07,0.38,1.1,1.5 2.0,2.2,2.3,3.1), mean=0.597, stddev=0.626], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0002,0.005,0.05 0.08,0.15,0.42,0.74,0.83 0.90,0.93,0.94,0.97), mean=0.449, stddev=0.282], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.009,0.01,0.01 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.03,0.03), mean=0.0166, stddev=0.00503], oderiv-count=55552
component name=tdnn6.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn7.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000266742, max-change=0.75, linear-params-rms=0.04743, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.97,0.98 1.0,1.0,1.1,1.1,1.1 1.2,1.2,1.2,1.3), mean=1.07, stddev=0.0581], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.66,0.67 0.69,0.71,0.76,0.80,0.83 0.85,0.87,0.89,0.92), mean=0.757, stddev=0.0535], bias-{mean,stddev}=-0.02734,1.021, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn7.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=3.07e+04, self-repaired-proportion=0.0816592, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,9e-05,0.003 0.03,0.07,0.33,1.2,1.5 1.9,2.1,2.5,3.0), mean=0.592, stddev=0.624], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0007,0.02 0.09,0.16,0.43,0.74,0.83 0.88,0.93,0.95,0.97), mean=0.447, stddev=0.274], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.03,0.04), mean=0.0176, stddev=0.00516], oderiv-count=46080
component name=tdnn7.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn8.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000266742, max-change=0.75, linear-params-rms=0.04709, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.96,0.97 0.98,1.0,1.1,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.06, stddev=0.0618], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.66,0.67,0.68 0.69,0.71,0.75,0.79,0.81 0.84,0.86,0.87,0.92), mean=0.752, stddev=0.0501], bias-{mean,stddev}=-0.00321,1.066, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn8.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.92e+04, self-repaired-proportion=0.129102, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0002 0.009,0.03,0.36,1.1,1.5 1.9,2.4,2.7,3.3), mean=0.599, stddev=0.662], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.001 0.04,0.10,0.41,0.75,0.82 0.88,0.93,0.97,0.99), mean=0.423, stddev=0.296], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.02,0.02,0.03 0.03,0.03,0.03,0.04), mean=0.02, stddev=0.00525], oderiv-count=35840
component name=tdnn8.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn9.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000266742, max-change=0.75, linear-params-rms=0.04733, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.95,0.97,0.98 1.0,1.0,1.1,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.07, stddev=0.0585], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.66,0.66,0.68 0.69,0.71,0.75,0.80,0.83 0.85,0.88,0.89,0.92), mean=0.755, stddev=0.0536], bias-{mean,stddev}=-0.03474,0.9972, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn9.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.84e+04, self-repaired-proportion=0.123698, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,3e-06,0.0008 0.01,0.05,0.35,1.1,1.4 1.9,2.1,2.5,3.5), mean=0.577, stddev=0.626], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,5e-05,0.007 0.04,0.14,0.41,0.72,0.83 0.89,0.93,0.95,0.99), mean=0.43, stddev=0.279], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.04,0.04,0.04,0.04), mean=0.0251, stddev=0.00612], oderiv-count=30720
component name=tdnn9.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn10.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000266742, max-change=0.75, linear-params-rms=0.04764, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.96,0.98 0.99,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.2), mean=1.08, stddev=0.0616], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.66,0.66,0.68 0.69,0.71,0.75,0.80,0.83 0.86,0.89,0.90,0.92), mean=0.76, stddev=0.0552], bias-{mean,stddev}=0.06524,1.074, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn10.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.23e+04, self-repaired-proportion=0.153577, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,1e-05,0.0003 0.004,0.05,0.39,1.2,1.6 1.9,2.2,2.4,3.2), mean=0.633, stddev=0.654], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0002,0.003 0.02,0.15,0.45,0.78,0.86 0.93,0.96,0.99,1.0), mean=0.453, stddev=0.304], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0303, stddev=0.00688], oderiv-count=19968
component name=tdnn10.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn11.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000266742, max-change=0.75, linear-params-rms=0.04813, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.94,0.96,0.97 0.99,1.0,1.1,1.2,1.2 1.2,1.2,1.2,1.2), mean=1.09, stddev=0.0711], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.66,0.66,0.68 0.69,0.72,0.76,0.82,0.85 0.87,0.90,0.93,0.97), mean=0.768, stddev=0.0603], bias-{mean,stddev}=-0.03516,1.048, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn11.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=9.22e+03, self-repaired-proportion=0.183594, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,1e-05 0.001,0.03,0.32,1.0,1.6 2.0,2.2,2.5,3.3), mean=0.57, stddev=0.652], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0002 0.005,0.08,0.40,0.70,0.87 0.93,0.97,0.99,1.0), mean=0.414, stddev=0.302], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.05,0.06 0.06,0.07,0.07,0.08), mean=0.0436, stddev=0.0104], oderiv-count=12288
component name=tdnn11.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnnFINAL.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000266742, max-change=0.75, linear-params-rms=0.04891, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.92,0.96,0.97 0.99,1.0,1.1,1.2,1.2 1.2,1.3,1.3,1.4), mean=1.1, stddev=0.0909], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.65,0.66,0.67 0.69,0.71,0.77,0.85,0.88 0.91,0.93,0.96,1.0), mean=0.779, stddev=0.0743], bias-{mean,stddev}=-0.07734,0.95, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnnFINAL.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.1e+03, self-repaired-proportion=0.207275, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,4e-05 0.0008,0.02,0.26,1.0,1.4 1.8,2.1,2.7,3.3), mean=0.531, stddev=0.631], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0002 0.006,0.06,0.37,0.68,0.81 0.87,0.97,0.98,1.0), mean=0.385, stddev=0.295], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.04 0.05,0.05,0.06,0.08,0.09 0.10,0.10,0.11,0.11), mean=0.0655, stddev=0.0176], oderiv-count=7168
component name=tdnnFINAL.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=prefinal-affine-task-0.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=256, learning-rate=0.000266742, max-change=0.75, linear-params-rms=0.06801, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.92,0.93,0.95 0.98,1.0,1.1,1.2,1.2 1.2,1.2,1.3,1.3), mean=1.08, stddev=0.0827], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.93,0.94,0.96 0.98,1.0,1.1,1.2,1.2 1.2,1.3,1.3,1.3), mean=1.08, stddev=0.0886], bias-{mean,stddev}=-0.001503,1.01, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-affine-task-0.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.35e+03, self-repaired-proportion=0.153764, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,2e-05 0.002,0.05,0.31,0.85,1.1 1.3,1.5,1.6,2.0), mean=0.452, stddev=0.436], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0002 0.009,0.12,0.41,0.70,0.82 0.86,0.89,0.90,0.93), mean=0.415, stddev=0.281], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-08,9e-08,2e-07,5e-05 0.001,0.02,0.06,0.08,0.09 0.10,0.10,0.11,0.11), mean=0.0527, stddev=0.0325], oderiv-count=7936
component name=prefinal-affine-task-0.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output-0.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=96, learning-rate=0.000266742, max-change=1.5, linear-params-rms=0.06664, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.23,0.26,0.75 0.86,0.94,1.0,1.2,1.2 1.3,1.4,1.6,1.8), mean=1.05, stddev=0.211], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-07,1e-06,2e-06,0.0005 0.01,0.14,0.63,0.87,0.97 1.0,1.1,1.2,1.2), mean=0.55, stddev=0.352], bias-{mean,stddev}=-6.361e-08,0.0138, rank-in=20, rank-out=48, num-samples-history=2000, update-period=4, alpha=4
component name=output-0.log-softmax type=LogSoftmaxComponent, dim=96, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.04 0.06,0.07,0.09,0.12,0.13 0.15,0.23,0.26,0.29), mean=0.0925, stddev=0.0421], oderiv-count=7168
nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/30.raw MTL/exp/nnet3/multitask/31.raw 
LOG (nnet3-show-progress[5.4.217~1-8ae5]:SelectGpuId():cu-device.cc:123) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.40046 tdnn2.affine:0.254003 tdnn3.affine:0.343254 tdnn4.affine:0.337005 tdnn5.affine:0.317959 tdnn6.affine:0.298404 tdnn7.affine:0.287636 tdnn8.affine:0.289567 tdnn9.affine:0.314958 tdnn10.affine:0.338761 tdnn11.affine:0.377342 tdnnFINAL.affine:0.411629 prefinal-affine-task-0.affine:0.284266 output-0.affine:0.2956 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:26.5672 tdnn2.affine:24.1795 tdnn3.affine:23.373 tdnn4.affine:23.7658 tdnn5.affine:23.2622 tdnn6.affine:24.2789 tdnn7.affine:23.7075 tdnn8.affine:24.1148 tdnn9.affine:23.4211 tdnn10.affine:24.3695 tdnn11.affine:24.1894 tdnnFINAL.affine:23.37 prefinal-affine-task-0.affine:23.7541 output-0.affine:10.4482 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0150896 tdnn2.affine:0.0105089 tdnn3.affine:0.0146952 tdnn4.affine:0.014191 tdnn5.affine:0.0136792 tdnn6.affine:0.0122999 tdnn7.affine:0.0121414 tdnn8.affine:0.0120162 tdnn9.affine:0.0134588 tdnn10.affine:0.0139124 tdnn11.affine:0.0156133 tdnnFINAL.affine:0.0176315 prefinal-affine-task-0.affine:0.011975 output-0.affine:0.0285337 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Tue Jul 24 11:17:56 UTC 2018, elapsed time 0 seconds
