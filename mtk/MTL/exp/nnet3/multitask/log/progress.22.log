# nnet3-info MTL/exp/nnet3/multitask/22.raw && nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/21.raw MTL/exp/nnet3/multitask/22.raw 
# Started at Tue Jul 24 11:16:33 UTC 2018
#
nnet3-info MTL/exp/nnet3/multitask/22.raw 
num-parameters: 1486432
modulus: 1
input-node name=input dim=13
component-node name=tdnn1.affine component=tdnn1.affine input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=65 output-dim=256
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=256 output-dim=256
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=256 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=tdnn1.renorm input-dim=256 output-dim=256
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=256 output-dim=256
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=256 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -1), Offset(tdnn2.renorm, 2)) input-dim=512 output-dim=256
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=256 output-dim=256
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=256 output-dim=256
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -3), Offset(tdnn3.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=256 output-dim=256
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=256 output-dim=256
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -3), Offset(tdnn4.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.renorm, -3), Offset(tdnn5.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=256 output-dim=256
component-node name=tdnn6.renorm component=tdnn6.renorm input=tdnn6.relu input-dim=256 output-dim=256
component-node name=tdnn7.affine component=tdnn7.affine input=Append(Offset(tdnn6.renorm, -3), Offset(tdnn6.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn7.relu component=tdnn7.relu input=tdnn7.affine input-dim=256 output-dim=256
component-node name=tdnn7.renorm component=tdnn7.renorm input=tdnn7.relu input-dim=256 output-dim=256
component-node name=tdnn8.affine component=tdnn8.affine input=Append(Offset(tdnn7.renorm, -3), Offset(tdnn7.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn8.relu component=tdnn8.relu input=tdnn8.affine input-dim=256 output-dim=256
component-node name=tdnn8.renorm component=tdnn8.renorm input=tdnn8.relu input-dim=256 output-dim=256
component-node name=tdnn9.affine component=tdnn9.affine input=Append(Offset(tdnn8.renorm, -3), Offset(tdnn8.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn9.relu component=tdnn9.relu input=tdnn9.affine input-dim=256 output-dim=256
component-node name=tdnn9.renorm component=tdnn9.renorm input=tdnn9.relu input-dim=256 output-dim=256
component-node name=tdnn10.affine component=tdnn10.affine input=Append(Offset(tdnn9.renorm, -3), Offset(tdnn9.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn10.relu component=tdnn10.relu input=tdnn10.affine input-dim=256 output-dim=256
component-node name=tdnn10.renorm component=tdnn10.renorm input=tdnn10.relu input-dim=256 output-dim=256
component-node name=tdnn11.affine component=tdnn11.affine input=Append(Offset(tdnn10.renorm, -3), Offset(tdnn10.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn11.relu component=tdnn11.relu input=tdnn11.affine input-dim=256 output-dim=256
component-node name=tdnn11.renorm component=tdnn11.renorm input=tdnn11.relu input-dim=256 output-dim=256
component-node name=tdnnFINAL.affine component=tdnnFINAL.affine input=Append(Offset(tdnn11.renorm, -3), Offset(tdnn11.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnnFINAL.relu component=tdnnFINAL.relu input=tdnnFINAL.affine input-dim=256 output-dim=256
component-node name=tdnnFINAL.renorm component=tdnnFINAL.renorm input=tdnnFINAL.relu input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.affine component=prefinal-affine-task-0.affine input=tdnnFINAL.renorm input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.relu component=prefinal-affine-task-0.relu input=prefinal-affine-task-0.affine input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.renorm component=prefinal-affine-task-0.renorm input=prefinal-affine-task-0.relu input-dim=256 output-dim=256
component-node name=output-0.affine component=output-0.affine input=prefinal-affine-task-0.renorm input-dim=256 output-dim=96
component-node name=output-0.log-softmax component=output-0.log-softmax input=output-0.affine input-dim=96 output-dim=96
output-node name=output-0 input=output-0.log-softmax dim=96 objective=linear
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=65, output-dim=256, learning-rate=0.000447807, max-change=0.75, linear-params-rms=0.1498, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.87,0.89,0.92 0.95,1.0,1.2,1.4,1.5 1.6,1.7,1.7,1.8), mean=1.19, stddev=0.206], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.0,2.0,2.0 2.1,2.1,2.3,2.7,2.7 2.8,2.9,3.0,3.1), mean=2.38, stddev=0.267], bias-{mean,stddev}=0.01703,1.101, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.08e+05, self-repaired-proportion=0.0402961, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.04,0.07,0.31,1.5,2.1 2.7,3.1,3.6,5.5), mean=0.77, stddev=0.934], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.08,0.12,0.34,0.83,0.92 0.93,0.94,0.95,0.98), mean=0.444, stddev=0.314], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.004 0.004,0.005,0.006,0.007,0.008 0.01,0.01,0.01,0.01), mean=0.00603, stddev=0.00178], oderiv-count=153600
component name=tdnn1.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=256, learning-rate=0.000447807, max-change=0.75, linear-params-rms=0.06486, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.90,0.91,0.94 0.96,0.99,1.0,1.1,1.1 1.1,1.1,1.2,1.2), mean=1.04, stddev=0.0587], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.92,0.92,0.94 0.96,0.98,1.0,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.04, stddev=0.0598], bias-{mean,stddev}=0.03401,1.089, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.18e+05, self-repaired-proportion=0.0452665, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.007,0.01,0.02 0.03,0.07,0.32,0.84,1.1 1.4,1.6,1.9,3.5), mean=0.487, stddev=0.517], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.05,0.05,0.07 0.10,0.18,0.45,0.72,0.85 0.91,0.94,0.96,0.99), mean=0.46, stddev=0.271], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.006,0.006 0.006,0.007,0.008,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.00897, stddev=0.00258], oderiv-count=148480
component name=tdnn2.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000447807, max-change=0.75, linear-params-rms=0.04704, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.96,0.98 0.99,1.0,1.1,1.1,1.1 1.2,1.2,1.2,1.3), mean=1.06, stddev=0.0602], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.65,0.66,0.67 0.69,0.71,0.75,0.79,0.82 0.84,0.86,0.88,0.92), mean=0.751, stddev=0.0503], bias-{mean,stddev}=0.07208,0.9826, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=5.63e+04, self-repaired-proportion=0.0539063, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-07,8e-05,0.007,0.01 0.03,0.08,0.37,1.1,1.4 1.9,2.2,2.3,2.7), mean=0.596, stddev=0.606], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.0009,0.03,0.06 0.10,0.18,0.43,0.74,0.82 0.89,0.92,0.96,0.99), mean=0.459, stddev=0.271], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.006,0.006 0.007,0.008,0.01,0.01,0.02 0.02,0.02,0.02,0.03), mean=0.011, stddev=0.00399], oderiv-count=76800
component name=tdnn3.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000447807, max-change=0.75, linear-params-rms=0.0471, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.94,0.96,0.97 0.99,1.0,1.1,1.1,1.1 1.2,1.2,1.2,1.3), mean=1.06, stddev=0.0629], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.66,0.68 0.69,0.70,0.75,0.80,0.82 0.85,0.88,0.89,0.92), mean=0.752, stddev=0.0536], bias-{mean,stddev}=-0.04936,1.016, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=5.07e+04, self-repaired-proportion=0.0499132, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0003,0.003,0.01 0.02,0.06,0.33,1.0,1.4 1.9,2.1,2.9,3.2), mean=0.565, stddev=0.641], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.002,0.02,0.06 0.08,0.14,0.39,0.69,0.80 0.88,0.91,0.95,1.0), mean=0.419, stddev=0.268], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.006,0.006 0.007,0.008,0.01,0.01,0.02 0.02,0.02,0.02,0.03), mean=0.0111, stddev=0.00415], oderiv-count=76032
component name=tdnn4.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000447807, max-change=0.75, linear-params-rms=0.04679, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.94,0.97 0.99,1.0,1.1,1.1,1.1 1.2,1.2,1.2,1.3), mean=1.06, stddev=0.0586], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.65,0.67,0.68 0.69,0.70,0.74,0.79,0.82 0.84,0.87,0.88,0.93), mean=0.747, stddev=0.0508], bias-{mean,stddev}=-0.1218,0.9712, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=3.48e+04, self-repaired-proportion=0.0751953, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0006,0.007 0.02,0.07,0.31,0.99,1.6 2.0,2.7,3.0,3.9), mean=0.588, stddev=0.705], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.004,0.03 0.07,0.16,0.39,0.73,0.84 0.90,0.93,0.94,0.98), mean=0.429, stddev=0.278], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.006,0.006 0.007,0.007,0.01,0.01,0.02 0.02,0.02,0.02,0.03), mean=0.0107, stddev=0.00399], oderiv-count=59392
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000447807, max-change=0.75, linear-params-rms=0.04682, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.95,0.96,0.97 0.98,1.0,1.1,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.06, stddev=0.0577], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.66,0.66,0.68 0.69,0.70,0.74,0.79,0.81 0.84,0.87,0.88,0.90), mean=0.748, stddev=0.0493], bias-{mean,stddev}=0.08843,1.067, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=3.23e+04, self-repaired-proportion=0.09375, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,1e-05,0.0003,0.005 0.01,0.05,0.37,1.1,1.6 2.1,2.3,2.5,3.2), mean=0.619, stddev=0.673], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,9e-05,0.003,0.03 0.07,0.15,0.40,0.77,0.85 0.91,0.93,0.94,0.97), mean=0.446, stddev=0.293], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.006,0.006 0.007,0.008,0.01,0.01,0.02 0.02,0.02,0.02,0.02), mean=0.011, stddev=0.00371], oderiv-count=50176
component name=tdnn6.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn7.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000447807, max-change=0.75, linear-params-rms=0.04677, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.97,0.98 1.0,1.0,1.1,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.06, stddev=0.0521], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.65,0.67 0.69,0.70,0.74,0.79,0.81 0.83,0.85,0.86,0.90), mean=0.747, stddev=0.0488], bias-{mean,stddev}=-0.02728,1.021, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn7.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=2.3e+04, self-repaired-proportion=0.0876736, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,4e-05,0.0006 0.02,0.05,0.33,1.2,1.5 2.0,2.2,2.6,3.2), mean=0.613, stddev=0.67], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0007,0.005 0.07,0.16,0.42,0.75,0.84 0.88,0.93,0.97,0.97), mean=0.444, stddev=0.283], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.007,0.007,0.007 0.008,0.008,0.01,0.01,0.02 0.02,0.02,0.02,0.03), mean=0.0115, stddev=0.00383], oderiv-count=41472
component name=tdnn7.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn8.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000447807, max-change=0.75, linear-params-rms=0.04642, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.95,0.97 0.98,0.99,1.0,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.05, stddev=0.0543], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.66,0.66,0.68 0.69,0.70,0.74,0.78,0.80 0.82,0.84,0.85,0.91), mean=0.741, stddev=0.0452], bias-{mean,stddev}=-0.003161,1.066, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn8.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=2.05e+04, self-repaired-proportion=0.154194, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,2e-05 0.004,0.02,0.35,1.1,1.6 2.0,2.6,2.8,3.4), mean=0.625, stddev=0.708], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0001 0.02,0.08,0.41,0.76,0.83 0.89,0.94,0.97,0.99), mean=0.421, stddev=0.306], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.008,0.008,0.009 0.009,0.01,0.01,0.02,0.02 0.02,0.02,0.02,0.03), mean=0.0132, stddev=0.00387], oderiv-count=40960
component name=tdnn8.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn9.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000447807, max-change=0.75, linear-params-rms=0.04661, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.95,0.96,0.98 0.99,1.0,1.1,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.05, stddev=0.0519], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.65,0.66,0.68 0.69,0.70,0.74,0.78,0.81 0.83,0.86,0.87,0.89), mean=0.744, stddev=0.047], bias-{mean,stddev}=-0.03465,0.9973, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn9.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.74e+04, self-repaired-proportion=0.129934, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0009 0.006,0.04,0.34,1.1,1.5 1.9,2.4,2.8,3.6), mean=0.595, stddev=0.668], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.007 0.04,0.12,0.41,0.74,0.83 0.89,0.93,0.96,0.99), mean=0.428, stddev=0.288], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.03,0.03), mean=0.0168, stddev=0.00448], oderiv-count=30720
component name=tdnn9.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn10.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000447807, max-change=0.75, linear-params-rms=0.04686, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.96,0.97 0.98,1.0,1.1,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.06, stddev=0.0544], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.65,0.66,0.68 0.69,0.71,0.74,0.79,0.82 0.84,0.86,0.87,0.90), mean=0.748, stddev=0.0492], bias-{mean,stddev}=0.06533,1.074, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn10.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.46e+04, self-repaired-proportion=0.174479, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,7e-06,7e-05 0.004,0.04,0.38,1.3,1.7 2.0,2.3,2.6,3.3), mean=0.661, stddev=0.696], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,7e-05,0.0009 0.02,0.12,0.44,0.80,0.87 0.93,0.97,0.98,1.0), mean=0.455, stddev=0.313], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0209, stddev=0.00513], oderiv-count=20736
component name=tdnn10.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn11.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000447807, max-change=0.75, linear-params-rms=0.04728, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.93,0.96,0.97 0.99,1.0,1.1,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.07, stddev=0.062], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.66,0.67 0.69,0.71,0.75,0.80,0.83 0.85,0.88,0.90,0.93), mean=0.755, stddev=0.0541], bias-{mean,stddev}=-0.03508,1.048, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn11.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.13e+04, self-repaired-proportion=0.215588, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,6e-06 0.0003,0.02,0.31,1.1,1.7 2.2,2.3,2.7,3.6), mean=0.603, stddev=0.708], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,9e-05 0.003,0.07,0.37,0.73,0.88 0.94,0.97,0.99,1.0), mean=0.414, stddev=0.312], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.04,0.04 0.04,0.05,0.05,0.06), mean=0.0312, stddev=0.00779], oderiv-count=13312
component name=tdnn11.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnnFINAL.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000447807, max-change=0.75, linear-params-rms=0.04799, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.92,0.95,0.97 0.98,1.0,1.1,1.2,1.2 1.2,1.2,1.3,1.3), mean=1.08, stddev=0.0803], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.65,0.66,0.67 0.69,0.71,0.76,0.82,0.85 0.88,0.91,0.93,0.98), mean=0.765, stddev=0.0664], bias-{mean,stddev}=-0.07722,0.9501, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnnFINAL.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.86e+03, self-repaired-proportion=0.237549, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.0005,0.01,0.29,1.2,1.6 1.9,2.3,3.0,3.5), mean=0.574, stddev=0.699], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.003,0.05,0.36,0.70,0.83 0.89,0.97,0.98,1.0), mean=0.388, stddev=0.308], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.05,0.06,0.07 0.07,0.08,0.08,0.09), mean=0.05, stddev=0.0141], oderiv-count=7424
component name=tdnnFINAL.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=prefinal-affine-task-0.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=256, learning-rate=0.000447807, max-change=0.75, linear-params-rms=0.06699, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.92,0.93,0.95 0.97,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.07, stddev=0.0751], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.92,0.94,0.96 0.97,0.99,1.1,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.07, stddev=0.0799], bias-{mean,stddev}=-0.0009818,1.01, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-affine-task-0.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.35e+03, self-repaired-proportion=0.187872, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.0008,0.03,0.32,1.0,1.4 1.5,1.8,2.0,2.4), mean=0.53, stddev=0.547], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.005,0.10,0.42,0.76,0.88 0.92,0.95,0.96,0.98), mean=0.434, stddev=0.308], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-08,8e-08,1e-07,2e-05 0.0008,0.01,0.05,0.07,0.08 0.08,0.09,0.09,0.09), mean=0.0429, stddev=0.0274], oderiv-count=8192
component name=prefinal-affine-task-0.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output-0.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=96, learning-rate=0.000447807, max-change=1.5, linear-params-rms=0.06052, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.22,0.24,0.67 0.76,0.83,0.94,1.1,1.1 1.3,1.4,1.5,1.7), mean=0.946, stddev=0.206], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-07,1e-06,2e-06,0.0001 0.01,0.11,0.57,0.79,0.88 0.96,1.0,1.1,1.1), mean=0.495, stddev=0.327], bias-{mean,stddev}=-6.309e-08,0.01379, rank-in=20, rank-out=48, num-samples-history=2000, update-period=4, alpha=4
component name=output-0.log-softmax type=LogSoftmaxComponent, dim=96, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.04 0.06,0.07,0.09,0.11,0.13 0.15,0.22,0.27,0.30), mean=0.0926, stddev=0.043], oderiv-count=6400
nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/21.raw MTL/exp/nnet3/multitask/22.raw 
LOG (nnet3-show-progress[5.4.217~1-8ae5]:SelectGpuId():cu-device.cc:123) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.547389 tdnn2.affine:0.321643 tdnn3.affine:0.417912 tdnn4.affine:0.394486 tdnn5.affine:0.371014 tdnn6.affine:0.344608 tdnn7.affine:0.326202 tdnn8.affine:0.331645 tdnn9.affine:0.363249 tdnn10.affine:0.396397 tdnn11.affine:0.4585 tdnnFINAL.affine:0.534049 prefinal-affine-task-0.affine:0.400549 output-0.affine:0.489314 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:26.1469 tdnn2.affine:24.0718 tdnn3.affine:23.2052 tdnn4.affine:23.5725 tdnn5.affine:23.0707 tdnn6.affine:24.0978 tdnn7.affine:23.5377 tdnn8.affine:23.9467 tdnn9.affine:23.2305 tdnn10.affine:24.1725 tdnn11.affine:23.9697 tdnnFINAL.affine:23.1197 prefinal-affine-task-0.affine:23.5679 output-0.affine:9.48892 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0209802 tdnn2.affine:0.0133691 tdnn3.affine:0.0180266 tdnn4.affine:0.0167514 tdnn5.affine:0.0160982 tdnn6.affine:0.0143141 tdnn7.affine:0.0138704 tdnn8.affine:0.0138618 tdnn9.affine:0.0156517 tdnn10.affine:0.0164139 tdnn11.affine:0.0191497 tdnnFINAL.affine:0.0231335 prefinal-affine-task-0.affine:0.0170151 output-0.affine:0.0523006 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Tue Jul 24 11:16:34 UTC 2018, elapsed time 1 seconds
