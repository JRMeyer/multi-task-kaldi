# nnet3-info MTL/exp/nnet3/multitask/20.raw && nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/19.raw MTL/exp/nnet3/multitask/20.raw 
# Started at Tue Jul 24 11:16:15 UTC 2018
#
nnet3-info MTL/exp/nnet3/multitask/20.raw 
num-parameters: 1486432
modulus: 1
input-node name=input dim=13
component-node name=tdnn1.affine component=tdnn1.affine input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=65 output-dim=256
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=256 output-dim=256
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=256 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=tdnn1.renorm input-dim=256 output-dim=256
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=256 output-dim=256
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=256 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -1), Offset(tdnn2.renorm, 2)) input-dim=512 output-dim=256
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=256 output-dim=256
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=256 output-dim=256
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -3), Offset(tdnn3.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=256 output-dim=256
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=256 output-dim=256
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -3), Offset(tdnn4.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.renorm, -3), Offset(tdnn5.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=256 output-dim=256
component-node name=tdnn6.renorm component=tdnn6.renorm input=tdnn6.relu input-dim=256 output-dim=256
component-node name=tdnn7.affine component=tdnn7.affine input=Append(Offset(tdnn6.renorm, -3), Offset(tdnn6.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn7.relu component=tdnn7.relu input=tdnn7.affine input-dim=256 output-dim=256
component-node name=tdnn7.renorm component=tdnn7.renorm input=tdnn7.relu input-dim=256 output-dim=256
component-node name=tdnn8.affine component=tdnn8.affine input=Append(Offset(tdnn7.renorm, -3), Offset(tdnn7.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn8.relu component=tdnn8.relu input=tdnn8.affine input-dim=256 output-dim=256
component-node name=tdnn8.renorm component=tdnn8.renorm input=tdnn8.relu input-dim=256 output-dim=256
component-node name=tdnn9.affine component=tdnn9.affine input=Append(Offset(tdnn8.renorm, -3), Offset(tdnn8.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn9.relu component=tdnn9.relu input=tdnn9.affine input-dim=256 output-dim=256
component-node name=tdnn9.renorm component=tdnn9.renorm input=tdnn9.relu input-dim=256 output-dim=256
component-node name=tdnn10.affine component=tdnn10.affine input=Append(Offset(tdnn9.renorm, -3), Offset(tdnn9.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn10.relu component=tdnn10.relu input=tdnn10.affine input-dim=256 output-dim=256
component-node name=tdnn10.renorm component=tdnn10.renorm input=tdnn10.relu input-dim=256 output-dim=256
component-node name=tdnn11.affine component=tdnn11.affine input=Append(Offset(tdnn10.renorm, -3), Offset(tdnn10.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn11.relu component=tdnn11.relu input=tdnn11.affine input-dim=256 output-dim=256
component-node name=tdnn11.renorm component=tdnn11.renorm input=tdnn11.relu input-dim=256 output-dim=256
component-node name=tdnnFINAL.affine component=tdnnFINAL.affine input=Append(Offset(tdnn11.renorm, -3), Offset(tdnn11.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnnFINAL.relu component=tdnnFINAL.relu input=tdnnFINAL.affine input-dim=256 output-dim=256
component-node name=tdnnFINAL.renorm component=tdnnFINAL.renorm input=tdnnFINAL.relu input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.affine component=prefinal-affine-task-0.affine input=tdnnFINAL.renorm input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.relu component=prefinal-affine-task-0.relu input=prefinal-affine-task-0.affine input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.renorm component=prefinal-affine-task-0.renorm input=prefinal-affine-task-0.relu input-dim=256 output-dim=256
component-node name=output-0.affine component=output-0.affine input=prefinal-affine-task-0.renorm input-dim=256 output-dim=96
component-node name=output-0.log-softmax component=output-0.log-softmax input=output-0.affine input-dim=96 output-dim=96
output-node name=output-0 input=output-0.log-softmax dim=96 objective=linear
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=65, output-dim=256, learning-rate=0.000502448, max-change=0.75, linear-params-rms=0.1485, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.87,0.88,0.92 0.94,1.0,1.1,1.3,1.5 1.6,1.6,1.7,1.8), mean=1.18, stddev=0.201], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.0,2.0,2.0 2.1,2.1,2.3,2.6,2.7 2.8,2.9,3.0,3.1), mean=2.36, stddev=0.268], bias-{mean,stddev}=0.01696,1.1, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=9.73e+04, self-repaired-proportion=0.0497396, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.03,0.08,0.36,1.5,2.0 2.7,3.3,3.8,5.8), mean=0.788, stddev=0.954], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.06 0.08,0.13,0.37,0.85,0.92 0.94,0.95,0.95,0.98), mean=0.452, stddev=0.317], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.003 0.004,0.004,0.005,0.007,0.008 0.009,0.01,0.01,0.01), mean=0.00543, stddev=0.00166], oderiv-count=143360
component name=tdnn1.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=256, learning-rate=0.000502448, max-change=0.75, linear-params-rms=0.0647, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.89,0.91,0.94 0.96,0.99,1.0,1.1,1.1 1.1,1.1,1.2,1.2), mean=1.03, stddev=0.0581], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.92,0.92,0.94 0.96,0.98,1.0,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.03, stddev=0.0586], bias-{mean,stddev}=0.03401,1.089, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=9.73e+04, self-repaired-proportion=0.0414062, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.01,0.02,0.02 0.03,0.06,0.31,0.86,1.1 1.5,1.7,1.9,3.6), mean=0.488, stddev=0.53], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.08 0.09,0.18,0.44,0.73,0.85 0.92,0.95,0.96,0.99), mean=0.46, stddev=0.273], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.005,0.006 0.006,0.006,0.008,0.01,0.01 0.01,0.01,0.02,0.02), mean=0.00824, stddev=0.00243], oderiv-count=133120
component name=tdnn2.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000502448, max-change=0.75, linear-params-rms=0.04687, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.96,0.98 0.99,1.0,1.1,1.1,1.1 1.2,1.2,1.2,1.3), mean=1.06, stddev=0.0589], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.65,0.66,0.67 0.69,0.71,0.74,0.79,0.81 0.84,0.86,0.87,0.92), mean=0.748, stddev=0.049], bias-{mean,stddev}=0.07211,0.9826, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.86e+04, self-repaired-proportion=0.065625, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,2e-05,0.005,0.01 0.02,0.08,0.37,1.1,1.4 1.9,2.2,2.5,2.8), mean=0.6, stddev=0.621], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0003,0.02,0.06 0.08,0.18,0.44,0.75,0.82 0.90,0.93,0.97,0.99), mean=0.46, stddev=0.278], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.005,0.006 0.006,0.007,0.009,0.01,0.02 0.02,0.02,0.02,0.02), mean=0.0101, stddev=0.00378], oderiv-count=81920
component name=tdnn3.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000502448, max-change=0.75, linear-params-rms=0.04691, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.94,0.96,0.97 0.99,1.0,1.1,1.1,1.1 1.2,1.2,1.2,1.3), mean=1.06, stddev=0.0613], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.66,0.67 0.69,0.70,0.74,0.79,0.82 0.84,0.87,0.88,0.92), mean=0.749, stddev=0.0522], bias-{mean,stddev}=-0.04935,1.016, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=3.23e+04, self-repaired-proportion=0.0509766, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,6e-05,0.002,0.01 0.02,0.06,0.32,1.1,1.4 1.9,2.2,2.9,3.2), mean=0.565, stddev=0.646], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0009,0.02,0.05 0.08,0.14,0.38,0.70,0.80 0.88,0.92,0.94,1.0), mean=0.418, stddev=0.272], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.006,0.006 0.006,0.007,0.009,0.01,0.02 0.02,0.02,0.02,0.02), mean=0.0101, stddev=0.00388], oderiv-count=64512
component name=tdnn4.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000502448, max-change=0.75, linear-params-rms=0.0466, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.94,0.97 0.98,1.0,1.0,1.1,1.1 1.2,1.2,1.2,1.3), mean=1.05, stddev=0.0568], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.65,0.67,0.68 0.69,0.70,0.74,0.78,0.81 0.84,0.86,0.87,0.92), mean=0.744, stddev=0.0492], bias-{mean,stddev}=-0.1218,0.9712, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.92e+04, self-repaired-proportion=0.0729167, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,2e-05,0.0003,0.007 0.02,0.07,0.31,1.0,1.5 2.1,2.7,2.9,3.9), mean=0.59, stddev=0.707], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0001,0.003,0.03 0.06,0.16,0.40,0.73,0.84 0.90,0.93,0.95,0.98), mean=0.43, stddev=0.278], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.005,0.006 0.006,0.007,0.008,0.01,0.01 0.02,0.02,0.02,0.02), mean=0.0096, stddev=0.00369], oderiv-count=65536
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000502448, max-change=0.75, linear-params-rms=0.04663, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.96,0.97 0.98,1.0,1.0,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.05, stddev=0.0556], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.66,0.66,0.68 0.69,0.70,0.74,0.78,0.81 0.84,0.86,0.87,0.90), mean=0.745, stddev=0.0478], bias-{mean,stddev}=0.08843,1.067, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=2.87e+04, self-repaired-proportion=0.0876465, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,4e-06,0.0004,0.004 0.01,0.05,0.38,1.1,1.6 2.1,2.4,2.5,3.2), mean=0.623, stddev=0.68], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,3e-05,0.003,0.02 0.06,0.14,0.40,0.77,0.84 0.91,0.93,0.94,0.97), mean=0.445, stddev=0.294], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.006,0.006 0.006,0.007,0.009,0.01,0.01 0.02,0.02,0.02,0.02), mean=0.00988, stddev=0.00342], oderiv-count=43008
component name=tdnn6.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn7.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000502448, max-change=0.75, linear-params-rms=0.04661, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.96,0.98 1.0,1.0,1.0,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.05, stddev=0.0504], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.65,0.67 0.69,0.70,0.74,0.78,0.81 0.83,0.84,0.85,0.90), mean=0.744, stddev=0.0476], bias-{mean,stddev}=-0.02727,1.021, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn7.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=3.69e+04, self-repaired-proportion=0.0985577, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,4e-05,0.0004 0.02,0.05,0.32,1.2,1.6 2.0,2.3,2.6,3.3), mean=0.617, stddev=0.684], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0004,0.004 0.07,0.15,0.42,0.75,0.84 0.88,0.93,0.97,0.98), mean=0.442, stddev=0.287], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.006,0.006 0.007,0.007,0.01,0.01,0.02 0.02,0.02,0.02,0.03), mean=0.0105, stddev=0.00359], oderiv-count=43008
component name=tdnn7.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn8.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000502448, max-change=0.75, linear-params-rms=0.04626, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.95,0.97 0.98,0.99,1.0,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.05, stddev=0.0523], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.66,0.66,0.68 0.69,0.70,0.74,0.78,0.79 0.81,0.84,0.85,0.90), mean=0.739, stddev=0.0439], bias-{mean,stddev}=-0.003148,1.066, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn8.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=2.56e+04, self-repaired-proportion=0.162598, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,1e-05 0.003,0.02,0.36,1.1,1.6 2.1,2.6,2.8,3.4), mean=0.629, stddev=0.713], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0001 0.02,0.07,0.41,0.76,0.84 0.88,0.94,0.97,1.0), mean=0.42, stddev=0.307], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.007,0.007,0.008 0.008,0.009,0.01,0.02,0.02 0.02,0.02,0.02,0.03), mean=0.012, stddev=0.00362], oderiv-count=38400
component name=tdnn8.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn9.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000502448, max-change=0.75, linear-params-rms=0.04643, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.95,0.96,0.97 0.99,1.0,1.0,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.05, stddev=0.0503], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.65,0.66,0.68 0.69,0.70,0.74,0.78,0.80 0.82,0.85,0.86,0.88), mean=0.742, stddev=0.0454], bias-{mean,stddev}=-0.03463,0.9973, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn9.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.84e+04, self-repaired-proportion=0.121324, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0007 0.008,0.04,0.34,1.1,1.5 1.9,2.4,2.8,3.6), mean=0.598, stddev=0.672], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.006 0.04,0.11,0.41,0.74,0.83 0.89,0.93,0.96,0.99), mean=0.428, stddev=0.289], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.01 0.01,0.01,0.01,0.02,0.02 0.02,0.03,0.03,0.03), mean=0.0154, stddev=0.00421], oderiv-count=28672
component name=tdnn9.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn10.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000502448, max-change=0.75, linear-params-rms=0.04667, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.95,0.97 0.98,1.0,1.1,1.1,1.1 1.1,1.1,1.2,1.2), mean=1.05, stddev=0.0523], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.65,0.66,0.67 0.69,0.70,0.74,0.78,0.81 0.83,0.85,0.86,0.89), mean=0.745, stddev=0.0475], bias-{mean,stddev}=0.06535,1.074, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn10.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.08e+04, self-repaired-proportion=0.182943, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,4e-05 0.004,0.04,0.40,1.3,1.7 2.0,2.4,2.5,3.3), mean=0.667, stddev=0.702], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0005 0.02,0.12,0.45,0.80,0.87 0.93,0.97,0.98,1.0), mean=0.456, stddev=0.315], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.02,0.02,0.03 0.03,0.03,0.03,0.04), mean=0.0192, stddev=0.0048], oderiv-count=23040
component name=tdnn10.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn11.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000502448, max-change=0.75, linear-params-rms=0.04706, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.93,0.96,0.97 0.98,1.0,1.1,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.06, stddev=0.0594], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.66,0.67 0.69,0.71,0.74,0.80,0.82 0.84,0.87,0.89,0.92), mean=0.751, stddev=0.0523], bias-{mean,stddev}=-0.03507,1.048, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn11.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=6.66e+03, self-repaired-proportion=0.243304, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.0002,0.01,0.29,1.1,1.8 2.3,2.4,2.7,3.8), mean=0.609, stddev=0.727], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.002,0.06,0.37,0.73,0.88 0.94,0.98,0.99,1.0), mean=0.413, stddev=0.315], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.04,0.04 0.04,0.05,0.05,0.05), mean=0.0287, stddev=0.00727], oderiv-count=13824
component name=tdnn11.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnnFINAL.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000502448, max-change=0.75, linear-params-rms=0.04772, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.92,0.96,0.97 0.98,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.08, stddev=0.0771], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.65,0.65,0.67 0.69,0.71,0.75,0.82,0.85 0.88,0.90,0.92,0.97), mean=0.761, stddev=0.0636], bias-{mean,stddev}=-0.07718,0.9502, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnnFINAL.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.35e+03, self-repaired-proportion=0.23989, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.0003,0.01,0.28,1.2,1.6 2.0,2.3,3.1,3.7), mean=0.582, stddev=0.722], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.003,0.05,0.37,0.72,0.84 0.90,0.97,0.98,1.0), mean=0.387, stddev=0.312], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.06,0.07 0.07,0.07,0.08,0.09), mean=0.0463, stddev=0.0132], oderiv-count=6656
component name=tdnnFINAL.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=prefinal-affine-task-0.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=256, learning-rate=0.000502448, max-change=0.75, linear-params-rms=0.06667, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.92,0.93,0.95 0.97,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.06, stddev=0.0731], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.92,0.93,0.96 0.97,0.99,1.1,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.06, stddev=0.0773], bias-{mean,stddev}=-0.0008181,1.011, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-affine-task-0.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=3.58e+03, self-repaired-proportion=0.197266, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.0004,0.03,0.33,1.1,1.4 1.6,1.9,2.0,2.6), mean=0.545, stddev=0.572], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.004,0.09,0.42,0.79,0.89 0.93,0.96,0.97,0.98), mean=0.437, stddev=0.313], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-08,8e-08,1e-07,4e-06 0.0006,0.01,0.05,0.06,0.07 0.08,0.08,0.09,0.09), mean=0.0409, stddev=0.0264], oderiv-count=7168
component name=prefinal-affine-task-0.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output-0.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=96, learning-rate=0.000502448, max-change=1.5, linear-params-rms=0.05884, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.22,0.24,0.64 0.75,0.80,0.91,1.0,1.1 1.3,1.3,1.5,1.7), mean=0.919, stddev=0.205], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-07,9e-07,1e-06,6e-05 0.008,0.11,0.55,0.77,0.86 0.94,1.0,1.1,1.1), mean=0.479, stddev=0.32], bias-{mean,stddev}=-6.329e-08,0.01375, rank-in=20, rank-out=48, num-samples-history=2000, update-period=4, alpha=4
component name=output-0.log-softmax type=LogSoftmaxComponent, dim=96, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.03 0.06,0.07,0.09,0.11,0.14 0.15,0.22,0.27,0.29), mean=0.0926, stddev=0.0429], oderiv-count=8448
nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/19.raw MTL/exp/nnet3/multitask/20.raw 
LOG (nnet3-show-progress[5.4.217~1-8ae5]:SelectGpuId():cu-device.cc:123) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.561525 tdnn2.affine:0.345955 tdnn3.affine:0.440635 tdnn4.affine:0.412739 tdnn5.affine:0.380325 tdnn6.affine:0.350502 tdnn7.affine:0.336689 tdnn8.affine:0.338551 tdnn9.affine:0.370386 tdnn10.affine:0.400905 tdnn11.affine:0.466215 tdnnFINAL.affine:0.55275 prefinal-affine-task-0.affine:0.410254 output-0.affine:0.548571 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:26.0235 tdnn2.affine:24.0437 tdnn3.affine:23.1604 tdnn4.affine:23.5238 tdnn5.affine:23.0206 tdnn6.affine:24.0505 tdnn7.affine:23.4964 tdnn8.affine:23.9049 tdnn9.affine:23.1849 tdnn10.affine:24.1249 tdnn11.affine:23.9129 tdnnFINAL.affine:23.0459 prefinal-affine-task-0.affine:23.5099 output-0.affine:9.22461 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0216338 tdnn2.affine:0.0143972 tdnn3.affine:0.0190432 tdnn4.affine:0.0175641 tdnn5.affine:0.0165375 tdnn6.affine:0.0145866 tdnn7.affine:0.0143405 tdnn8.affine:0.0141736 tdnn9.affine:0.0159902 tdnn10.affine:0.0166338 tdnn11.affine:0.0195201 tdnnFINAL.affine:0.0240247 prefinal-affine-task-0.affine:0.0174724 output-0.affine:0.0604549 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Tue Jul 24 11:16:15 UTC 2018, elapsed time 0 seconds
