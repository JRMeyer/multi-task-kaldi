# nnet3-info MTL/exp/nnet3/multitask/16.raw && nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/15.raw MTL/exp/nnet3/multitask/16.raw 
# Started at Tue Jul 24 11:15:38 UTC 2018
#
nnet3-info MTL/exp/nnet3/multitask/16.raw 
num-parameters: 1486432
modulus: 1
input-node name=input dim=13
component-node name=tdnn1.affine component=tdnn1.affine input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=65 output-dim=256
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=256 output-dim=256
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=256 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=tdnn1.renorm input-dim=256 output-dim=256
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=256 output-dim=256
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=256 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -1), Offset(tdnn2.renorm, 2)) input-dim=512 output-dim=256
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=256 output-dim=256
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=256 output-dim=256
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -3), Offset(tdnn3.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=256 output-dim=256
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=256 output-dim=256
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -3), Offset(tdnn4.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.renorm, -3), Offset(tdnn5.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=256 output-dim=256
component-node name=tdnn6.renorm component=tdnn6.renorm input=tdnn6.relu input-dim=256 output-dim=256
component-node name=tdnn7.affine component=tdnn7.affine input=Append(Offset(tdnn6.renorm, -3), Offset(tdnn6.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn7.relu component=tdnn7.relu input=tdnn7.affine input-dim=256 output-dim=256
component-node name=tdnn7.renorm component=tdnn7.renorm input=tdnn7.relu input-dim=256 output-dim=256
component-node name=tdnn8.affine component=tdnn8.affine input=Append(Offset(tdnn7.renorm, -3), Offset(tdnn7.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn8.relu component=tdnn8.relu input=tdnn8.affine input-dim=256 output-dim=256
component-node name=tdnn8.renorm component=tdnn8.renorm input=tdnn8.relu input-dim=256 output-dim=256
component-node name=tdnn9.affine component=tdnn9.affine input=Append(Offset(tdnn8.renorm, -3), Offset(tdnn8.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn9.relu component=tdnn9.relu input=tdnn9.affine input-dim=256 output-dim=256
component-node name=tdnn9.renorm component=tdnn9.renorm input=tdnn9.relu input-dim=256 output-dim=256
component-node name=tdnn10.affine component=tdnn10.affine input=Append(Offset(tdnn9.renorm, -3), Offset(tdnn9.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn10.relu component=tdnn10.relu input=tdnn10.affine input-dim=256 output-dim=256
component-node name=tdnn10.renorm component=tdnn10.renorm input=tdnn10.relu input-dim=256 output-dim=256
component-node name=tdnn11.affine component=tdnn11.affine input=Append(Offset(tdnn10.renorm, -3), Offset(tdnn10.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn11.relu component=tdnn11.relu input=tdnn11.affine input-dim=256 output-dim=256
component-node name=tdnn11.renorm component=tdnn11.renorm input=tdnn11.relu input-dim=256 output-dim=256
component-node name=tdnnFINAL.affine component=tdnnFINAL.affine input=Append(Offset(tdnn11.renorm, -3), Offset(tdnn11.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnnFINAL.relu component=tdnnFINAL.relu input=tdnnFINAL.affine input-dim=256 output-dim=256
component-node name=tdnnFINAL.renorm component=tdnnFINAL.renorm input=tdnnFINAL.relu input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.affine component=prefinal-affine-task-0.affine input=tdnnFINAL.renorm input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.relu component=prefinal-affine-task-0.relu input=prefinal-affine-task-0.affine input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.renorm component=prefinal-affine-task-0.renorm input=prefinal-affine-task-0.relu input-dim=256 output-dim=256
component-node name=output-0.affine component=output-0.affine input=prefinal-affine-task-0.renorm input-dim=256 output-dim=96
component-node name=output-0.log-softmax component=output-0.log-softmax input=output-0.affine input-dim=96 output-dim=96
output-node name=output-0 input=output-0.log-softmax dim=96 objective=linear
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=65, output-dim=256, learning-rate=0.000632545, max-change=0.75, linear-params-rms=0.1458, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.85,0.87,0.91 0.93,0.99,1.1,1.3,1.4 1.5,1.6,1.6,1.7), mean=1.16, stddev=0.191], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,2.0,2.0 2.0,2.1,2.3,2.6,2.6 2.8,2.8,3.0,3.0), mean=2.32, stddev=0.265], bias-{mean,stddev}=0.01673,1.099, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=6.66e+04, self-repaired-proportion=0.0550987, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.02,0.02 0.04,0.07,0.39,1.5,1.9 2.6,3.1,3.4,5.4), mean=0.772, stddev=0.911], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.06 0.08,0.12,0.40,0.84,0.91 0.94,0.95,0.96,0.98), mean=0.457, stddev=0.317], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.003 0.003,0.003,0.004,0.006,0.007 0.008,0.009,0.009,0.01), mean=0.00468, stddev=0.00154], oderiv-count=153600
component name=tdnn1.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=256, learning-rate=0.000632545, max-change=0.75, linear-params-rms=0.06437, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.89,0.91,0.94 0.96,0.98,1.0,1.1,1.1 1.1,1.1,1.2,1.2), mean=1.03, stddev=0.0561], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.92,0.92,0.93 0.96,0.98,1.0,1.1,1.1 1.1,1.1,1.2,1.2), mean=1.03, stddev=0.0557], bias-{mean,stddev}=0.03406,1.089, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=8.7e+04, self-repaired-proportion=0.0609809, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.004,0.007,0.01 0.02,0.05,0.31,0.86,1.2 1.5,1.7,1.9,3.7), mean=0.491, stddev=0.534], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.03,0.04,0.05 0.08,0.18,0.46,0.73,0.87 0.92,0.94,0.95,1.0), mean=0.459, stddev=0.279], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.005,0.005,0.006,0.008,0.01 0.01,0.01,0.01,0.02), mean=0.00687, stddev=0.00216], oderiv-count=122880
component name=tdnn2.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000632545, max-change=0.75, linear-params-rms=0.04652, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.95,0.97 0.99,1.0,1.0,1.1,1.1 1.2,1.2,1.2,1.3), mean=1.05, stddev=0.0562], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.65,0.66,0.67 0.69,0.71,0.74,0.78,0.80 0.83,0.85,0.87,0.90), mean=0.743, stddev=0.0463], bias-{mean,stddev}=0.07214,0.9826, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=5.63e+04, self-repaired-proportion=0.0653783, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,1e-05,0.001,0.01 0.02,0.07,0.38,1.1,1.5 2.0,2.3,2.4,2.9), mean=0.61, stddev=0.641], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0002,0.01,0.06 0.08,0.15,0.42,0.75,0.83 0.91,0.93,0.97,1.0), mean=0.458, stddev=0.283], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.005 0.005,0.006,0.007,0.01,0.01 0.02,0.02,0.02,0.02), mean=0.00826, stddev=0.00329], oderiv-count=74240
component name=tdnn3.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000632545, max-change=0.75, linear-params-rms=0.04653, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.94,0.96,0.97 0.98,1.0,1.0,1.1,1.1 1.1,1.2,1.2,1.3), mean=1.05, stddev=0.0575], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.66,0.67 0.69,0.70,0.74,0.78,0.81 0.83,0.86,0.86,0.90), mean=0.743, stddev=0.049], bias-{mean,stddev}=-0.04937,1.016, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.84e+04, self-repaired-proportion=0.0797335, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,6e-05,0.001,0.007 0.02,0.05,0.31,1.1,1.5 1.9,2.3,2.8,3.4), mean=0.575, stddev=0.671], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0004,0.01,0.04 0.06,0.14,0.37,0.69,0.81 0.88,0.93,0.95,1.0), mean=0.414, stddev=0.278], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.005 0.005,0.006,0.007,0.01,0.01 0.02,0.02,0.02,0.02), mean=0.00826, stddev=0.00334], oderiv-count=78336
component name=tdnn4.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000632545, max-change=0.75, linear-params-rms=0.04625, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.94,0.97 0.98,1.0,1.0,1.1,1.1 1.1,1.2,1.2,1.3), mean=1.05, stddev=0.053], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.65,0.66,0.67 0.69,0.70,0.73,0.78,0.80 0.82,0.85,0.86,0.92), mean=0.739, stddev=0.0464], bias-{mean,stddev}=-0.1217,0.9713, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=3.89e+04, self-repaired-proportion=0.0971467, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,3e-07,0.0002,0.004 0.01,0.06,0.33,1.0,1.6 2.2,2.8,3.1,4.2), mean=0.598, stddev=0.732], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,3e-05,0.002,0.02 0.06,0.15,0.39,0.74,0.84 0.90,0.93,0.94,0.98), mean=0.427, stddev=0.283], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.005 0.005,0.005,0.007,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.00798, stddev=0.00322], oderiv-count=45056
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000632545, max-change=0.75, linear-params-rms=0.04631, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.96,0.97 0.98,1.0,1.0,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.05, stddev=0.052], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.65,0.66,0.67 0.68,0.70,0.73,0.77,0.80 0.82,0.85,0.86,0.89), mean=0.74, stddev=0.045], bias-{mean,stddev}=0.08846,1.067, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.12e+04, self-repaired-proportion=0.10006, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,3e-06,0.0002,0.002 0.01,0.05,0.38,1.2,1.7 2.2,2.4,2.6,3.3), mean=0.631, stddev=0.699], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,2e-05,0.002,0.01 0.05,0.14,0.40,0.78,0.85 0.90,0.92,0.95,0.98), mean=0.442, stddev=0.299], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.005 0.005,0.006,0.007,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.00822, stddev=0.00297], oderiv-count=46592
component name=tdnn6.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn7.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000632545, max-change=0.75, linear-params-rms=0.04631, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.96,0.98 0.99,1.0,1.0,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.05, stddev=0.0474], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.64,0.65,0.67 0.68,0.70,0.74,0.78,0.80 0.82,0.83,0.84,0.89), mean=0.74, stddev=0.0452], bias-{mean,stddev}=-0.02726,1.021, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn7.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=3.23e+04, self-repaired-proportion=0.103237, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,7e-06,0.0001 0.01,0.05,0.32,1.2,1.5 2.1,2.4,2.7,3.5), mean=0.621, stddev=0.699], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0002,0.0008 0.06,0.13,0.42,0.75,0.83 0.88,0.93,0.97,0.99), mean=0.437, stddev=0.289], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.005,0.005 0.006,0.006,0.008,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.00884, stddev=0.00318], oderiv-count=47616
component name=tdnn7.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn8.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000632545, max-change=0.75, linear-params-rms=0.04594, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.93,0.95,0.97 0.98,0.99,1.0,1.1,1.1 1.1,1.1,1.2,1.2), mean=1.04, stddev=0.0485], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.65,0.66,0.67 0.68,0.70,0.73,0.77,0.79 0.80,0.82,0.84,0.89), mean=0.734, stddev=0.0413], bias-{mean,stddev}=-0.003125,1.066, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn8.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.79e+04, self-repaired-proportion=0.201923, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,1e-06 0.001,0.02,0.34,1.1,1.7 2.1,2.6,2.9,3.4), mean=0.638, stddev=0.732], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,6e-05 0.01,0.06,0.41,0.77,0.84 0.90,0.95,0.97,0.99), mean=0.42, stddev=0.313], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.006,0.006 0.007,0.007,0.009,0.01,0.01 0.02,0.02,0.02,0.02), mean=0.00996, stddev=0.00316], oderiv-count=35840
component name=tdnn8.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn9.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000632545, max-change=0.75, linear-params-rms=0.04609, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.94,0.96,0.97 0.99,1.0,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.04, stddev=0.047], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.65,0.66,0.67 0.69,0.70,0.73,0.77,0.79 0.81,0.84,0.84,0.87), mean=0.736, stddev=0.0424], bias-{mean,stddev}=-0.03459,0.9974, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn9.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.74e+04, self-repaired-proportion=0.138428, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0006 0.007,0.04,0.34,1.1,1.5 1.9,2.5,2.9,3.8), mean=0.604, stddev=0.693], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.005 0.04,0.10,0.41,0.74,0.84 0.90,0.93,0.97,1.0), mean=0.427, stddev=0.296], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.008,0.008,0.008 0.009,0.009,0.01,0.02,0.02 0.02,0.02,0.02,0.02), mean=0.0128, stddev=0.00365], oderiv-count=31744
component name=tdnn9.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn10.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000632545, max-change=0.75, linear-params-rms=0.04629, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.96,0.97 0.98,1.0,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.05, stddev=0.0489], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.65,0.66,0.67 0.68,0.70,0.74,0.78,0.80 0.82,0.84,0.85,0.88), mean=0.739, stddev=0.0446], bias-{mean,stddev}=0.06539,1.074, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn10.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.54e+04, self-repaired-proportion=0.200469, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,1e-05 0.003,0.03,0.38,1.3,1.8 2.1,2.4,2.6,3.4), mean=0.676, stddev=0.728], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0001 0.02,0.09,0.45,0.79,0.88 0.95,0.97,0.98,1.0), mean=0.454, stddev=0.32], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.02,0.02,0.02 0.02,0.03,0.03,0.03), mean=0.0161, stddev=0.0042], oderiv-count=21504
component name=tdnn10.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn11.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000632545, max-change=0.75, linear-params-rms=0.04661, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.93,0.95,0.96 0.98,1.0,1.1,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.05, stddev=0.0543], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.66,0.67 0.68,0.71,0.74,0.79,0.81 0.83,0.86,0.88,0.90), mean=0.744, stddev=0.0488], bias-{mean,stddev}=-0.03502,1.048, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn11.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=9.73e+03, self-repaired-proportion=0.2602, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.0002,0.01,0.30,1.1,1.8 2.3,2.5,2.7,4.0), mean=0.626, stddev=0.758], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.003,0.05,0.37,0.74,0.88 0.95,0.98,1.0,1.0), mean=0.414, stddev=0.322], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.04,0.04,0.04,0.04), mean=0.0244, stddev=0.00636], oderiv-count=16384
component name=tdnn11.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnnFINAL.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000632545, max-change=0.75, linear-params-rms=0.04716, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.92,0.95,0.97 0.98,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.06, stddev=0.07], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.65,0.65,0.67 0.68,0.70,0.75,0.80,0.83 0.86,0.89,0.91,0.96), mean=0.752, stddev=0.0584], bias-{mean,stddev}=-0.07709,0.9503, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnnFINAL.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.86e+03, self-repaired-proportion=0.27105, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.0001,0.009,0.26,1.2,1.7 2.1,2.5,3.1,4.0), mean=0.602, stddev=0.767], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.002,0.04,0.35,0.73,0.84 0.93,0.97,0.98,1.0), mean=0.388, stddev=0.321], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.04,0.05,0.06 0.06,0.07,0.07,0.08), mean=0.0407, stddev=0.0119], oderiv-count=7424
component name=tdnnFINAL.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=prefinal-affine-task-0.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=256, learning-rate=0.000632545, max-change=0.75, linear-params-rms=0.06596, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.92,0.93,0.94 0.96,0.99,1.1,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.05, stddev=0.0682], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.92,0.93,0.95 0.97,0.99,1.0,1.1,1.2 1.2,1.2,1.2,1.2), mean=1.05, stddev=0.0707], bias-{mean,stddev}=-0.0005636,1.011, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-affine-task-0.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=5.12e+03, self-repaired-proportion=0.234835, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.0002,0.02,0.32,1.1,1.5 1.8,2.1,2.2,2.8), mean=0.577, stddev=0.629], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.003,0.07,0.42,0.81,0.90 0.96,0.97,0.99,0.99), mean=0.444, stddev=0.327], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-08,7e-08,8e-08,2e-07 0.0003,0.009,0.04,0.06,0.07 0.07,0.08,0.08,0.09), mean=0.0368, stddev=0.0244], oderiv-count=8192
component name=prefinal-affine-task-0.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output-0.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=96, learning-rate=0.000632545, max-change=1.5, linear-params-rms=0.05466, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.22,0.23,0.59 0.68,0.73,0.84,0.98,1.1 1.2,1.3,1.4,1.6), mean=0.851, stddev=0.2], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-07,9e-07,1e-06,3e-06 0.005,0.09,0.50,0.73,0.81 0.89,0.93,1.1,1.1), mean=0.442, stddev=0.303], bias-{mean,stddev}=-6.34e-08,0.01368, rank-in=20, rank-out=48, num-samples-history=2000, update-period=4, alpha=4
component name=output-0.log-softmax type=LogSoftmaxComponent, dim=96, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.04 0.06,0.07,0.09,0.11,0.13 0.15,0.24,0.26,0.28), mean=0.0923, stddev=0.0424], oderiv-count=6912
nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/15.raw MTL/exp/nnet3/multitask/16.raw 
LOG (nnet3-show-progress[5.4.217~1-8ae5]:SelectGpuId():cu-device.cc:123) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.638256 tdnn2.affine:0.369031 tdnn3.affine:0.474111 tdnn4.affine:0.440511 tdnn5.affine:0.414099 tdnn6.affine:0.386671 tdnn7.affine:0.372098 tdnn8.affine:0.378693 tdnn9.affine:0.41375 tdnn10.affine:0.449814 tdnn11.affine:0.522994 tdnnFINAL.affine:0.63329 prefinal-affine-task-0.affine:0.489165 output-0.affine:0.715638 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:25.7487 tdnn2.affine:23.9863 tdnn3.affine:23.07 tdnn4.affine:23.4249 tdnn5.affine:22.9276 tdnn6.affine:23.9677 tdnn7.affine:23.4171 tdnn8.affine:23.8262 tdnn9.affine:23.0952 tdnn10.affine:24.0299 tdnn11.affine:23.7992 tdnnFINAL.affine:22.8948 prefinal-affine-task-0.affine:23.3822 output-0.affine:8.5702 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0248621 tdnn2.affine:0.015394 tdnn3.affine:0.0205697 tdnn4.affine:0.0188229 tdnn5.affine:0.0180779 tdnn6.affine:0.0161455 tdnn7.affine:0.0159019 tdnn8.affine:0.0159059 tdnn9.affine:0.0179304 tdnn10.affine:0.0187353 tdnn11.affine:0.021997 tdnnFINAL.affine:0.0276998 prefinal-affine-task-0.affine:0.0209471 output-0.affine:0.0849817 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Tue Jul 24 11:15:39 UTC 2018, elapsed time 1 seconds
