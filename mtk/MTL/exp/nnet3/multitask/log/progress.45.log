# nnet3-info MTL/exp/nnet3/multitask/45.raw && nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/44.raw MTL/exp/nnet3/multitask/45.raw 
# Started at Sat Jul 28 03:14:39 UTC 2018
#
nnet3-info MTL/exp/nnet3/multitask/45.raw 
num-parameters: 13897312
modulus: 1
input-node name=input dim=13
component-node name=tdnn1.affine component=tdnn1.affine input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=65 output-dim=768
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=768 output-dim=768
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=768 output-dim=768
component-node name=tdnn2.affine component=tdnn2.affine input=tdnn1.renorm input-dim=768 output-dim=768
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=768 output-dim=768
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=768 output-dim=768
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -1), Offset(tdnn2.renorm, 2)) input-dim=1536 output-dim=768
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=768 output-dim=768
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=768 output-dim=768
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -3), Offset(tdnn3.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=768 output-dim=768
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=768 output-dim=768
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -3), Offset(tdnn4.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=768 output-dim=768
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=768 output-dim=768
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.renorm, -3), Offset(tdnn5.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=768 output-dim=768
component-node name=tdnn6.renorm component=tdnn6.renorm input=tdnn6.relu input-dim=768 output-dim=768
component-node name=tdnn7.affine component=tdnn7.affine input=Append(Offset(tdnn6.renorm, -3), Offset(tdnn6.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn7.relu component=tdnn7.relu input=tdnn7.affine input-dim=768 output-dim=768
component-node name=tdnn7.renorm component=tdnn7.renorm input=tdnn7.relu input-dim=768 output-dim=768
component-node name=tdnn8.affine component=tdnn8.affine input=Append(Offset(tdnn7.renorm, -3), Offset(tdnn7.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn8.relu component=tdnn8.relu input=tdnn8.affine input-dim=768 output-dim=768
component-node name=tdnn8.renorm component=tdnn8.renorm input=tdnn8.relu input-dim=768 output-dim=768
component-node name=tdnn9.affine component=tdnn9.affine input=Append(Offset(tdnn8.renorm, -3), Offset(tdnn8.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn9.relu component=tdnn9.relu input=tdnn9.affine input-dim=768 output-dim=768
component-node name=tdnn9.renorm component=tdnn9.renorm input=tdnn9.relu input-dim=768 output-dim=768
component-node name=tdnn10.affine component=tdnn10.affine input=Append(Offset(tdnn9.renorm, -3), Offset(tdnn9.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn10.relu component=tdnn10.relu input=tdnn10.affine input-dim=768 output-dim=768
component-node name=tdnn10.renorm component=tdnn10.renorm input=tdnn10.relu input-dim=768 output-dim=768
component-node name=tdnn11.affine component=tdnn11.affine input=Append(Offset(tdnn10.renorm, -3), Offset(tdnn10.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn11.relu component=tdnn11.relu input=tdnn11.affine input-dim=768 output-dim=768
component-node name=tdnn11.renorm component=tdnn11.renorm input=tdnn11.relu input-dim=768 output-dim=768
component-node name=tdnnFINAL.affine component=tdnnFINAL.affine input=Append(Offset(tdnn11.renorm, -3), Offset(tdnn11.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnnFINAL.relu component=tdnnFINAL.relu input=tdnnFINAL.affine input-dim=768 output-dim=768
component-node name=tdnnFINAL.renorm component=tdnnFINAL.renorm input=tdnnFINAL.relu input-dim=768 output-dim=768
component-node name=prefinal-affine-task-0.affine component=prefinal-affine-task-0.affine input=tdnnFINAL.renorm input-dim=768 output-dim=768
component-node name=prefinal-affine-task-0.relu component=prefinal-affine-task-0.relu input=prefinal-affine-task-0.affine input-dim=768 output-dim=768
component-node name=prefinal-affine-task-0.renorm component=prefinal-affine-task-0.renorm input=prefinal-affine-task-0.relu input-dim=768 output-dim=768
component-node name=output-0.affine component=output-0.affine input=prefinal-affine-task-0.renorm input-dim=768 output-dim=168
component-node name=output-0.log-softmax component=output-0.log-softmax input=output-0.affine input-dim=168 output-dim=168
output-node name=output-0 input=output-0.log-softmax dim=168 objective=linear
component-node name=prefinal-affine-task-1.affine component=prefinal-affine-task-1.affine input=tdnnFINAL.renorm input-dim=768 output-dim=768
component-node name=prefinal-affine-task-1.relu component=prefinal-affine-task-1.relu input=prefinal-affine-task-1.affine input-dim=768 output-dim=768
component-node name=prefinal-affine-task-1.renorm component=prefinal-affine-task-1.renorm input=prefinal-affine-task-1.relu input-dim=768 output-dim=768
component-node name=output-1.affine component=output-1.affine input=prefinal-affine-task-1.renorm input-dim=768 output-dim=184
component-node name=output-1.log-softmax component=output-1.log-softmax input=output-1.affine input-dim=184 output-dim=184
output-node name=output-1 input=output-1.log-softmax dim=184 objective=linear
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=65, output-dim=768, learning-rate=0.000796327, max-change=0.75, linear-params-rms=0.1457, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.83,0.87,0.91 0.95,1.0,1.1,1.3,1.4 1.5,1.6,1.6,1.9), mean=1.16, stddev=0.176], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.6,3.6,3.7,3.7 3.8,3.8,4.0,4.2,4.3 4.4,4.5,4.6,4.6), mean=4.03, stddev=0.219], bias-{mean,stddev}=0.02871,1.034, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=1.69e+05, self-repaired-proportion=0.0106267, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.02,0.02,0.03 0.04,0.06,0.33,1.4,1.9 2.3,3.0,3.5,6.8), mean=0.719, stddev=0.83], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.09,0.12,0.41,0.87,0.91 0.93,0.94,0.95,0.95), mean=0.48, stddev=0.327], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0009,0.0009,0.001 0.001,0.001,0.001,0.002,0.002 0.002,0.003,0.003,0.003), mean=0.00145, stddev=0.000441], oderiv-count=276480
component name=tdnn1.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=768, learning-rate=0.000796327, max-change=0.75, linear-params-rms=0.03792, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.96,0.97,0.99 1.0,1.0,1.0,1.1,1.1 1.1,1.1,1.2,1.2), mean=1.05, stddev=0.0412], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.96,0.97,0.98 0.99,1.0,1.0,1.1,1.1 1.1,1.2,1.2,1.3), mean=1.05, stddev=0.0505], bias-{mean,stddev}=0.01179,1.051, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=1.69e+05, self-repaired-proportion=0.00491898, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.05,0.09,0.32,0.94,1.3 1.5,1.9,2.1,2.9), mean=0.519, stddev=0.523], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.07,0.10 0.14,0.20,0.42,0.74,0.84 0.89,0.92,0.93,0.95), mean=0.462, stddev=0.257], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002,0.003 0.003,0.003,0.003,0.004), mean=0.00189, stddev=0.00045], oderiv-count=250880
component name=tdnn2.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000796327, max-change=0.75, linear-params-rms=0.02743, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,0.99,1.0,1.0 1.0,1.0,1.1,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.07, stddev=0.0428], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.68,0.69,0.70 0.71,0.72,0.75,0.80,0.82 0.84,0.86,0.87,0.91), mean=0.759, stddev=0.0435], bias-{mean,stddev}=0.01776,1.008, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=8.19e+04, self-repaired-proportion=0.00224497, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.03,0.04,0.05 0.07,0.13,0.40,0.96,1.3 1.6,2.0,2.2,3.0), mean=0.571, stddev=0.518], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.08,0.10,0.12 0.15,0.22,0.42,0.66,0.76 0.83,0.88,0.90,0.93), mean=0.441, stddev=0.223], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.003,0.004 0.004,0.004,0.005,0.006), mean=0.00272, stddev=0.000696], oderiv-count=117760
component name=tdnn3.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000796327, max-change=0.75, linear-params-rms=0.02755, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.99,0.99,1.0 1.0,1.0,1.1,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.08, stddev=0.0474], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.68,0.69,0.70 0.71,0.72,0.76,0.80,0.82 0.84,0.86,0.88,0.93), mean=0.762, stddev=0.045], bias-{mean,stddev}=0.007478,1.004, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=7.14e+04, self-repaired-proportion=0.00146484, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.03,0.03,0.05 0.07,0.13,0.40,0.88,1.3 1.6,1.9,2.0,2.5), mean=0.551, stddev=0.495], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.07,0.09,0.11 0.15,0.21,0.41,0.63,0.74 0.81,0.86,0.90,0.93), mean=0.43, stddev=0.218], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.003,0.004 0.004,0.005,0.005,0.006), mean=0.00284, stddev=0.000682], oderiv-count=131328
component name=tdnn4.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000796327, max-change=0.75, linear-params-rms=0.02773, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,0.99,1.0,1.0 1.0,1.0,1.1,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.09, stddev=0.0476], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.68,0.69,0.70 0.71,0.72,0.76,0.81,0.83 0.85,0.87,0.89,0.97), mean=0.767, stddev=0.0462], bias-{mean,stddev}=0.02204,1.014, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=7.78e+04, self-repaired-proportion=0.000366211, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.04,0.06 0.09,0.16,0.41,0.95,1.2 1.5,1.8,2.0,2.7), mean=0.56, stddev=0.472], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.09,0.12 0.17,0.24,0.43,0.64,0.76 0.80,0.86,0.89,0.94), mean=0.445, stddev=0.21], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.003,0.003,0.004,0.004 0.004,0.005,0.005,0.006), mean=0.00318, stddev=0.000656], oderiv-count=96256
component name=tdnn5.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000796327, max-change=0.75, linear-params-rms=0.02795, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,1.0,1.0,1.0 1.0,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.2), mean=1.09, stddev=0.0464], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.69,0.69,0.71 0.72,0.73,0.77,0.81,0.83 0.85,0.87,0.87,0.92), mean=0.773, stddev=0.0452], bias-{mean,stddev}=0.04581,1.007, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=6.81e+04, self-repaired-proportion=0.000420027, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.05,0.07 0.11,0.17,0.41,0.88,1.2 1.5,1.9,2.1,2.7), mean=0.552, stddev=0.464], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.08,0.10,0.14 0.19,0.26,0.42,0.63,0.74 0.80,0.86,0.89,0.92), mean=0.444, stddev=0.202], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.003 0.003,0.003,0.004,0.004,0.005 0.005,0.005,0.006,0.007), mean=0.00372, stddev=0.000693], oderiv-count=89600
component name=tdnn6.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn7.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000796327, max-change=0.75, linear-params-rms=0.02817, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,1.0,1.0,1.0 1.0,1.1,1.1,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.1, stddev=0.0489], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.69,0.70,0.71 0.72,0.74,0.78,0.82,0.84 0.86,0.87,0.89,0.97), mean=0.779, stddev=0.0459], bias-{mean,stddev}=0.01655,0.9737, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn7.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=4.15e+04, self-repaired-proportion=0.00269501, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.04,0.06,0.09 0.12,0.18,0.41,0.86,1.2 1.5,1.9,2.1,3.9), mean=0.553, stddev=0.467], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.08,0.12,0.17 0.20,0.26,0.42,0.62,0.74 0.80,0.86,0.90,1.0), mean=0.448, stddev=0.197], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.003 0.003,0.004,0.004,0.005,0.005 0.005,0.006,0.006,0.006), mean=0.0042, stddev=0.000726], oderiv-count=79872
component name=tdnn7.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn8.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000796327, max-change=0.75, linear-params-rms=0.02835, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,1.0,1.0,1.0 1.0,1.1,1.1,1.2,1.2 1.2,1.2,1.2,1.2), mean=1.11, stddev=0.0569], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.70,0.70,0.71 0.72,0.74,0.78,0.83,0.85 0.86,0.88,0.89,0.94), mean=0.784, stddev=0.0469], bias-{mean,stddev}=-0.05804,1.063, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn8.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=4.74e+04, self-repaired-proportion=0.00708206, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.02,0.03,0.05 0.08,0.15,0.38,0.91,1.3 1.6,2.0,2.2,2.9), mean=0.551, stddev=0.507], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.06,0.07,0.10 0.15,0.23,0.41,0.63,0.74 0.83,0.89,0.92,0.98), mean=0.432, stddev=0.221], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.003 0.004,0.004,0.005,0.005,0.006 0.006,0.007,0.007,0.008), mean=0.00467, stddev=0.00088], oderiv-count=67840
component name=tdnn8.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn9.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000796327, max-change=0.75, linear-params-rms=0.02855, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.99,1.0,1.0 1.0,1.1,1.1,1.2,1.2 1.2,1.2,1.2,1.3), mean=1.12, stddev=0.0611], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.69,0.70,0.71 0.72,0.74,0.79,0.84,0.86 0.88,0.90,0.91,0.96), mean=0.789, stddev=0.0541], bias-{mean,stddev}=-0.05933,0.998, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn9.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=3.79e+04, self-repaired-proportion=0.0218834, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.002,0.02,0.05 0.08,0.15,0.41,0.85,1.2 1.5,1.8,2.0,2.6), mean=0.532, stddev=0.456], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.008,0.05,0.10 0.15,0.24,0.43,0.62,0.74 0.81,0.87,0.90,0.99), mean=0.434, stddev=0.213], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.004 0.004,0.004,0.005,0.006,0.006 0.007,0.007,0.007,0.009), mean=0.00506, stddev=0.000952], oderiv-count=52224
component name=tdnn9.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn10.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000796327, max-change=0.75, linear-params-rms=0.02851, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,0.99,1.0,1.0 1.0,1.1,1.1,1.2,1.2 1.2,1.2,1.2,1.3), mean=1.12, stddev=0.062], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.69,0.69,0.71 0.72,0.74,0.79,0.84,0.86 0.87,0.89,0.90,0.94), mean=0.788, stddev=0.0522], bias-{mean,stddev}=0.02919,1.027, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn10.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=2.46e+04, self-repaired-proportion=0.0279318, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,0.002,0.01,0.04 0.07,0.15,0.40,0.90,1.3 1.5,1.9,2.3,2.7), mean=0.551, stddev=0.497], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.01,0.04,0.08 0.13,0.23,0.43,0.65,0.76 0.83,0.90,0.92,0.99), mean=0.44, stddev=0.228], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.005,0.005,0.006,0.007,0.008 0.008,0.009,0.009,0.009), mean=0.00612, stddev=0.00119], oderiv-count=41472
component name=tdnn10.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn11.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000796327, max-change=0.75, linear-params-rms=0.02859, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,0.97,0.98,1.0 1.0,1.0,1.1,1.2,1.2 1.2,1.2,1.3,1.3), mean=1.12, stddev=0.0725], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.69,0.70,0.71 0.72,0.74,0.79,0.84,0.86 0.88,0.89,0.91,0.95), mean=0.791, stddev=0.0532], bias-{mean,stddev}=0.03176,1.019, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn11.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=1.43e+04, self-repaired-proportion=0.0731771, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0002,0.0007,0.008 0.03,0.10,0.39,0.92,1.3 1.7,2.0,2.5,3.5), mean=0.557, stddev=0.555], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0007,0.003,0.03 0.08,0.18,0.42,0.66,0.78 0.87,0.93,0.96,1.0), mean=0.429, stddev=0.253], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.005,0.005 0.006,0.006,0.007,0.009,0.01 0.01,0.01,0.01,0.01), mean=0.00756, stddev=0.0016], oderiv-count=25600
component name=tdnn11.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnnFINAL.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000796327, max-change=0.75, linear-params-rms=0.02888, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.97,0.98,1.0 1.0,1.0,1.1,1.2,1.2 1.3,1.3,1.3,1.3), mean=1.13, stddev=0.0838], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.68,0.69,0.70 0.71,0.73,0.80,0.86,0.88 0.91,0.93,0.94,0.97), mean=0.798, stddev=0.0659], bias-{mean,stddev}=-0.06728,0.9591, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnnFINAL.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=8.19e+03, self-repaired-proportion=0.101114, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,9e-05,0.002 0.02,0.08,0.34,0.80,1.1 1.3,1.8,2.0,2.7), mean=0.47, stddev=0.452], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0005,0.007 0.05,0.15,0.38,0.60,0.69 0.77,0.85,0.90,0.98), mean=0.383, stddev=0.234], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.007,0.007,0.007 0.008,0.008,0.01,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.0109, stddev=0.00247], oderiv-count=12544
component name=tdnnFINAL.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=prefinal-affine-task-0.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=768, learning-rate=0.000796327, max-change=0.75, linear-params-rms=0.03878, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.96,0.96,0.97 0.99,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.07, stddev=0.0683], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.96,0.97,0.98 0.99,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.07, stddev=0.0608], bias-{mean,stddev}=0.000836,1.006, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-affine-task-0.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=4.1e+03, self-repaired-proportion=0.133655, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,6e-05,0.0008 0.006,0.05,0.36,0.80,1.0 1.1,1.3,1.4,1.8), mean=0.435, stddev=0.387], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0005,0.004 0.02,0.12,0.39,0.66,0.75 0.81,0.83,0.85,0.91), mean=0.397, stddev=0.257], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-08,5e-06,4e-05,0.0002 0.0007,0.003,0.01,0.02,0.02 0.02,0.02,0.02,0.03), mean=0.0103, stddev=0.00622], oderiv-count=7424
component name=prefinal-affine-task-0.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=output-0.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=168, learning-rate=0.000796327, max-change=1.5, linear-params-rms=0.04754, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.86,1.0 1.1,1.2,1.3,1.4,1.6 1.6,1.7,1.7,1.9), mean=1.3, stddev=0.221], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-07,0.0003,0.001,0.007 0.03,0.13,0.61,0.83,0.89 0.95,1.0,1.1,1.2), mean=0.52, stddev=0.33], bias-{mean,stddev}=2.151e-07,0.003895, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-0.log-softmax type=LogSoftmaxComponent, dim=168, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.01,0.02 0.03,0.03,0.05,0.07,0.08 0.10,0.13,0.15,0.26), mean=0.0533, stddev=0.0312], oderiv-count=6656
component name=prefinal-affine-task-1.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=768, learning-rate=0.000796327, max-change=0.75, linear-params-rms=0.03653, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.95,0.95,0.96 0.98,0.99,1.0,1.0,1.0 1.1,1.1,1.1,1.1), mean=1.01, stddev=0.0298], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.95,0.97 0.98,0.99,1.0,1.0,1.0 1.1,1.1,1.1,1.1), mean=1.01, stddev=0.0284], bias-{mean,stddev}=-0.07011,1.031, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-affine-task-1.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=4.86e+03, self-repaired-proportion=0.169922, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,2e-05,0.0005 0.007,0.03,0.29,0.66,0.86 1.0,1.2,1.3,1.7), mean=0.366, stddev=0.346], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0002,0.003 0.02,0.08,0.44,0.73,0.82 0.88,0.92,0.94,0.98), mean=0.426, stddev=0.297], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-09,1e-08,1e-05,8e-05 0.0003,0.001,0.006,0.008,0.008 0.009,0.01,0.01,0.01), mean=0.00496, stddev=0.0031], oderiv-count=6912
component name=prefinal-affine-task-1.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=output-1.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=184, learning-rate=0.000796327, max-change=1.5, linear-params-rms=0.02511, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.07 0.07,0.07,0.07,1.1,1.2 1.3,1.3,1.4,1.4), mean=0.485, stddev=0.499], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,5e-07,0.0006,0.005 0.02,0.06,0.33,0.46,0.50 0.53,0.56,0.58,0.66), mean=0.287, stddev=0.183], bias-{mean,stddev}=-5.39e-07,0.002167, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-1.log-softmax type=LogSoftmaxComponent, dim=184, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.02,0.03 0.03,0.04,0.05,0.06), mean=0.00807, stddev=0.0123], oderiv-count=6912
nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/44.raw MTL/exp/nnet3/multitask/45.raw 
LOG (nnet3-show-progress[5.4.224~1-d4d9]:SelectGpuId():cu-device.cc:123) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.4.224~1-d4d9]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.673235 tdnn2.affine:0.485834 tdnn3.affine:0.664744 tdnn4.affine:0.707978 tdnn5.affine:0.745483 tdnn6.affine:0.78942 tdnn7.affine:0.829345 tdnn8.affine:0.868113 tdnn9.affine:0.904196 tdnn10.affine:0.899538 tdnn11.affine:0.902994 tdnnFINAL.affine:0.928463 prefinal-affine-task-0.affine:0.551538 output-0.affine:0.489788 prefinal-affine-task-1.affine:0.278879 output-1.affine:0.211144 ]
LOG (nnet3-show-progress[5.4.224~1-d4d9]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:43.3648 tdnn2.affine:41.1905 tdnn3.affine:40.8494 tdnn4.affine:40.8574 tdnn5.affine:41.2049 tdnn6.affine:41.2605 tdnn7.affine:40.8005 tdnn8.affine:42.6423 tdnn9.affine:41.581 tdnn10.affine:42.0735 tdnn11.affine:41.983 tdnnFINAL.affine:41.1607 prefinal-affine-task-0.affine:40.7943 output-0.affine:17.0777 prefinal-affine-task-1.affine:40.0936 output-1.affine:9.43809 ]
LOG (nnet3-show-progress[5.4.224~1-d4d9]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.015531 tdnn2.affine:0.0117967 tdnn3.affine:0.016277 tdnn4.affine:0.0173332 tdnn5.affine:0.0180981 tdnn6.affine:0.0191398 tdnn7.affine:0.0203353 tdnn8.affine:0.0203669 tdnn9.affine:0.0217552 tdnn10.affine:0.0213891 tdnn11.affine:0.0215184 tdnnFINAL.affine:0.0225688 prefinal-affine-task-0.affine:0.0135222 output-0.affine:0.0287915 prefinal-affine-task-1.affine:0.00695623 output-1.affine:0.0225297 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Sat Jul 28 03:14:39 UTC 2018, elapsed time 0 seconds
