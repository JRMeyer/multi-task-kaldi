# nnet3-info MTL/exp/nnet3/multitask/17.raw && nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/16.raw MTL/exp/nnet3/multitask/17.raw 
# Started at Tue Jul 24 11:15:47 UTC 2018
#
nnet3-info MTL/exp/nnet3/multitask/17.raw 
num-parameters: 1486432
modulus: 1
input-node name=input dim=13
component-node name=tdnn1.affine component=tdnn1.affine input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=65 output-dim=256
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=256 output-dim=256
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=256 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=tdnn1.renorm input-dim=256 output-dim=256
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=256 output-dim=256
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=256 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -1), Offset(tdnn2.renorm, 2)) input-dim=512 output-dim=256
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=256 output-dim=256
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=256 output-dim=256
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -3), Offset(tdnn3.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=256 output-dim=256
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=256 output-dim=256
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -3), Offset(tdnn4.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.renorm, -3), Offset(tdnn5.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=256 output-dim=256
component-node name=tdnn6.renorm component=tdnn6.renorm input=tdnn6.relu input-dim=256 output-dim=256
component-node name=tdnn7.affine component=tdnn7.affine input=Append(Offset(tdnn6.renorm, -3), Offset(tdnn6.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn7.relu component=tdnn7.relu input=tdnn7.affine input-dim=256 output-dim=256
component-node name=tdnn7.renorm component=tdnn7.renorm input=tdnn7.relu input-dim=256 output-dim=256
component-node name=tdnn8.affine component=tdnn8.affine input=Append(Offset(tdnn7.renorm, -3), Offset(tdnn7.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn8.relu component=tdnn8.relu input=tdnn8.affine input-dim=256 output-dim=256
component-node name=tdnn8.renorm component=tdnn8.renorm input=tdnn8.relu input-dim=256 output-dim=256
component-node name=tdnn9.affine component=tdnn9.affine input=Append(Offset(tdnn8.renorm, -3), Offset(tdnn8.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn9.relu component=tdnn9.relu input=tdnn9.affine input-dim=256 output-dim=256
component-node name=tdnn9.renorm component=tdnn9.renorm input=tdnn9.relu input-dim=256 output-dim=256
component-node name=tdnn10.affine component=tdnn10.affine input=Append(Offset(tdnn9.renorm, -3), Offset(tdnn9.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn10.relu component=tdnn10.relu input=tdnn10.affine input-dim=256 output-dim=256
component-node name=tdnn10.renorm component=tdnn10.renorm input=tdnn10.relu input-dim=256 output-dim=256
component-node name=tdnn11.affine component=tdnn11.affine input=Append(Offset(tdnn10.renorm, -3), Offset(tdnn10.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn11.relu component=tdnn11.relu input=tdnn11.affine input-dim=256 output-dim=256
component-node name=tdnn11.renorm component=tdnn11.renorm input=tdnn11.relu input-dim=256 output-dim=256
component-node name=tdnnFINAL.affine component=tdnnFINAL.affine input=Append(Offset(tdnn11.renorm, -3), Offset(tdnn11.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnnFINAL.relu component=tdnnFINAL.relu input=tdnnFINAL.affine input-dim=256 output-dim=256
component-node name=tdnnFINAL.renorm component=tdnnFINAL.renorm input=tdnnFINAL.relu input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.affine component=prefinal-affine-task-0.affine input=tdnnFINAL.renorm input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.relu component=prefinal-affine-task-0.relu input=prefinal-affine-task-0.affine input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.renorm component=prefinal-affine-task-0.renorm input=prefinal-affine-task-0.relu input-dim=256 output-dim=256
component-node name=output-0.affine component=output-0.affine input=prefinal-affine-task-0.renorm input-dim=256 output-dim=96
component-node name=output-0.log-softmax component=output-0.log-softmax input=output-0.affine input-dim=96 output-dim=96
output-node name=output-0 input=output-0.log-softmax dim=96 objective=linear
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=65, output-dim=256, learning-rate=0.000597161, max-change=0.75, linear-params-rms=0.1465, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.86,0.88,0.91 0.94,0.99,1.1,1.3,1.4 1.6,1.6,1.7,1.7), mean=1.17, stddev=0.194], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,2.0,2.0 2.1,2.1,2.3,2.6,2.7 2.8,2.9,3.0,3.0), mean=2.33, stddev=0.265], bias-{mean,stddev}=0.01679,1.099, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=9.73e+04, self-repaired-proportion=0.0458984, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.02 0.03,0.08,0.36,1.4,2.0 2.7,3.3,3.8,5.8), mean=0.787, stddev=0.935], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.06 0.08,0.11,0.39,0.84,0.92 0.93,0.95,0.95,0.98), mean=0.461, stddev=0.315], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.003 0.003,0.003,0.004,0.006,0.007 0.008,0.009,0.01,0.01), mean=0.00481, stddev=0.00156], oderiv-count=133120
component name=tdnn1.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=256, learning-rate=0.000597161, max-change=0.75, linear-params-rms=0.06445, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.89,0.91,0.94 0.96,0.98,1.0,1.1,1.1 1.1,1.1,1.2,1.2), mean=1.03, stddev=0.0566], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.92,0.92,0.94 0.96,0.98,1.0,1.1,1.1 1.1,1.1,1.2,1.2), mean=1.03, stddev=0.0563], bias-{mean,stddev}=0.03405,1.089, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.23e+05, self-repaired-proportion=0.0431548, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.007,0.009,0.01 0.02,0.05,0.30,0.88,1.1 1.4,1.7,1.8,3.8), mean=0.483, stddev=0.532], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.04,0.05,0.06 0.08,0.16,0.44,0.74,0.84 0.92,0.93,0.95,0.99), mean=0.453, stddev=0.279], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.005 0.005,0.005,0.007,0.009,0.01 0.01,0.01,0.01,0.02), mean=0.00715, stddev=0.00223], oderiv-count=143360
component name=tdnn2.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000597161, max-change=0.75, linear-params-rms=0.04661, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.96,0.98 0.99,1.0,1.0,1.1,1.1 1.2,1.2,1.2,1.3), mean=1.05, stddev=0.0568], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.65,0.65,0.67 0.69,0.71,0.74,0.78,0.80 0.83,0.85,0.87,0.91), mean=0.744, stddev=0.047], bias-{mean,stddev}=0.07213,0.9826, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=5.38e+04, self-repaired-proportion=0.0641276, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,8e-06,0.002,0.01 0.02,0.07,0.36,1.1,1.5 1.9,2.3,2.5,2.8), mean=0.603, stddev=0.636], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0001,0.01,0.06 0.09,0.15,0.42,0.75,0.84 0.91,0.93,0.97,1.0), mean=0.455, stddev=0.283], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.005,0.005 0.005,0.006,0.008,0.01,0.01 0.02,0.02,0.02,0.02), mean=0.00871, stddev=0.00345], oderiv-count=74240
component name=tdnn3.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000597161, max-change=0.75, linear-params-rms=0.04663, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.94,0.96,0.97 0.98,1.0,1.0,1.1,1.1 1.1,1.2,1.2,1.3), mean=1.05, stddev=0.0585], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.66,0.67 0.69,0.70,0.74,0.79,0.81 0.83,0.86,0.87,0.90), mean=0.744, stddev=0.0498], bias-{mean,stddev}=-0.04937,1.016, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.84e+04, self-repaired-proportion=0.0681641, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,4e-05,0.002,0.008 0.02,0.05,0.31,1.1,1.4 2.0,2.3,3.0,3.3), mean=0.571, stddev=0.669], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0005,0.01,0.05 0.07,0.13,0.38,0.71,0.81 0.89,0.93,0.95,1.0), mean=0.414, stddev=0.277], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.005,0.005 0.005,0.006,0.008,0.01,0.01 0.02,0.02,0.02,0.02), mean=0.00855, stddev=0.00342], oderiv-count=73728
component name=tdnn4.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000597161, max-change=0.75, linear-params-rms=0.04634, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.94,0.97 0.98,1.0,1.0,1.1,1.1 1.1,1.2,1.2,1.3), mean=1.05, stddev=0.0538], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.65,0.66,0.67 0.69,0.70,0.73,0.78,0.80 0.83,0.85,0.86,0.92), mean=0.74, stddev=0.0471], bias-{mean,stddev}=-0.1217,0.9713, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.51e+04, self-repaired-proportion=0.0904018, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0002,0.004 0.01,0.06,0.33,1.0,1.6 2.1,2.7,2.9,4.1), mean=0.599, stddev=0.726], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.002,0.03 0.06,0.15,0.41,0.73,0.84 0.90,0.93,0.94,0.98), mean=0.427, stddev=0.282], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.005 0.005,0.006,0.007,0.01,0.01 0.02,0.02,0.02,0.02), mean=0.00818, stddev=0.00327], oderiv-count=55296
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000597161, max-change=0.75, linear-params-rms=0.04639, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.95,0.97 0.98,1.0,1.0,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.05, stddev=0.053], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.65,0.66,0.67 0.68,0.70,0.74,0.78,0.80 0.83,0.85,0.86,0.89), mean=0.741, stddev=0.0457], bias-{mean,stddev}=0.08845,1.067, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=2.87e+04, self-repaired-proportion=0.0981771, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0003,0.002 0.01,0.05,0.37,1.2,1.7 2.2,2.5,2.6,3.3), mean=0.63, stddev=0.699], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.002,0.01 0.06,0.14,0.40,0.78,0.85 0.90,0.93,0.95,0.97), mean=0.442, stddev=0.299], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.005,0.005 0.005,0.006,0.008,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.00855, stddev=0.00305], oderiv-count=51968
component name=tdnn6.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn7.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000597161, max-change=0.75, linear-params-rms=0.04638, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.96,0.98 0.99,1.0,1.0,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.05, stddev=0.0481], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.65,0.67 0.68,0.70,0.74,0.78,0.80 0.82,0.83,0.85,0.89), mean=0.741, stddev=0.0458], bias-{mean,stddev}=-0.02726,1.021, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn7.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=3.38e+04, self-repaired-proportion=0.0996094, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,1e-05,0.0001 0.01,0.05,0.33,1.2,1.5 2.1,2.4,2.7,3.4), mean=0.621, stddev=0.697], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0003,0.002 0.06,0.13,0.42,0.76,0.84 0.88,0.93,0.97,0.98), mean=0.438, stddev=0.288], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.005,0.005 0.006,0.006,0.008,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.00918, stddev=0.00326], oderiv-count=46080
component name=tdnn7.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn8.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000597161, max-change=0.75, linear-params-rms=0.04602, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.93,0.95,0.97 0.98,0.99,1.0,1.1,1.1 1.1,1.1,1.2,1.2), mean=1.04, stddev=0.0493], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.65,0.66,0.67 0.69,0.70,0.73,0.77,0.79 0.81,0.82,0.84,0.89), mean=0.735, stddev=0.0419], bias-{mean,stddev}=-0.003133,1.066, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn8.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=2.82e+04, self-repaired-proportion=0.198061, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.002,0.02,0.35,1.1,1.7 2.1,2.6,2.9,3.4), mean=0.636, stddev=0.728], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.01,0.07,0.41,0.76,0.84 0.90,0.94,0.97,1.0), mean=0.419, stddev=0.312], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.006,0.007 0.007,0.007,0.009,0.01,0.01 0.02,0.02,0.02,0.02), mean=0.0104, stddev=0.00326], oderiv-count=37120
component name=tdnn8.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn9.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000597161, max-change=0.75, linear-params-rms=0.04617, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.94,0.96,0.97 0.99,1.0,1.0,1.1,1.1 1.1,1.1,1.2,1.2), mean=1.04, stddev=0.0479], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.65,0.66,0.67 0.69,0.70,0.73,0.77,0.79 0.81,0.84,0.85,0.87), mean=0.738, stddev=0.0431], bias-{mean,stddev}=-0.0346,0.9974, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn9.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.74e+04, self-repaired-proportion=0.133301, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0008 0.008,0.04,0.35,1.1,1.5 1.9,2.4,2.9,3.7), mean=0.604, stddev=0.686], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.005 0.03,0.11,0.41,0.74,0.84 0.91,0.92,0.97,1.0), mean=0.428, stddev=0.294], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.008,0.008,0.009 0.009,0.01,0.01,0.02,0.02 0.02,0.02,0.02,0.03), mean=0.0133, stddev=0.00379], oderiv-count=25600
component name=tdnn9.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn10.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000597161, max-change=0.75, linear-params-rms=0.04639, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.96,0.97 0.98,1.0,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.05, stddev=0.0498], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.65,0.66,0.67 0.68,0.70,0.74,0.78,0.80 0.82,0.84,0.85,0.88), mean=0.741, stddev=0.0453], bias-{mean,stddev}=0.06537,1.074, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn10.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.46e+04, self-repaired-proportion=0.196921, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,4e-05 0.004,0.04,0.39,1.3,1.7 2.1,2.5,2.6,3.4), mean=0.672, stddev=0.718], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0004 0.02,0.10,0.44,0.80,0.86 0.95,0.97,0.99,1.0), mean=0.455, stddev=0.318], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.02,0.02,0.02 0.02,0.03,0.03,0.03), mean=0.0168, stddev=0.00433], oderiv-count=20736
component name=tdnn10.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn11.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000597161, max-change=0.75, linear-params-rms=0.04672, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.93,0.95,0.96 0.98,1.0,1.1,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.06, stddev=0.0554], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.66,0.67 0.69,0.71,0.74,0.79,0.81 0.83,0.87,0.88,0.90), mean=0.746, stddev=0.0496], bias-{mean,stddev}=-0.03504,1.048, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn11.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.13e+04, self-repaired-proportion=0.254464, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.0002,0.01,0.30,1.1,1.8 2.3,2.5,2.7,4.0), mean=0.623, stddev=0.754], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.002,0.05,0.38,0.75,0.88 0.95,0.98,1.0,1.0), mean=0.413, stddev=0.319], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.04,0.04,0.04,0.04), mean=0.0252, stddev=0.00656], oderiv-count=14336
component name=tdnn11.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnnFINAL.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000597161, max-change=0.75, linear-params-rms=0.04729, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.92,0.95,0.97 0.98,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.07, stddev=0.0718], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.65,0.65,0.67 0.68,0.70,0.75,0.80,0.84 0.86,0.89,0.91,0.96), mean=0.754, stddev=0.0595], bias-{mean,stddev}=-0.07711,0.9502, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnnFINAL.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.86e+03, self-repaired-proportion=0.251488, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.0003,0.01,0.27,1.2,1.6 2.0,2.4,3.1,3.9), mean=0.599, stddev=0.762], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.002,0.04,0.36,0.72,0.84 0.93,0.97,0.98,1.0), mean=0.387, stddev=0.319], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.03,0.04,0.05,0.06 0.06,0.07,0.07,0.08), mean=0.0419, stddev=0.0121], oderiv-count=8192
component name=tdnnFINAL.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=prefinal-affine-task-0.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=256, learning-rate=0.000597161, max-change=0.75, linear-params-rms=0.06614, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.92,0.93,0.95 0.96,0.99,1.1,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.06, stddev=0.0697], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.92,0.93,0.95 0.97,0.99,1.0,1.1,1.2 1.2,1.2,1.2,1.2), mean=1.06, stddev=0.0726], bias-{mean,stddev}=-0.0006168,1.011, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-affine-task-0.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=5.38e+03, self-repaired-proportion=0.229948, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.0003,0.02,0.32,1.1,1.5 1.7,2.0,2.1,2.8), mean=0.569, stddev=0.614], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.003,0.08,0.42,0.80,0.90 0.96,0.97,0.98,0.99), mean=0.442, stddev=0.324], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-08,7e-08,8e-08,2e-07 0.0004,0.01,0.04,0.06,0.07 0.07,0.08,0.08,0.09), mean=0.0376, stddev=0.0247], oderiv-count=8192
component name=prefinal-affine-task-0.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output-0.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=96, learning-rate=0.000597161, max-change=1.5, linear-params-rms=0.0558, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.22,0.24,0.61 0.69,0.74,0.85,1.0,1.1 1.2,1.3,1.4,1.7), mean=0.87, stddev=0.202], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-07,9e-07,1e-06,3e-06 0.005,0.10,0.51,0.74,0.83 0.91,0.95,1.1,1.1), mean=0.452, stddev=0.308], bias-{mean,stddev}=-6.316e-08,0.01374, rank-in=20, rank-out=48, num-samples-history=2000, update-period=4, alpha=4
component name=output-0.log-softmax type=LogSoftmaxComponent, dim=96, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.04 0.06,0.07,0.09,0.11,0.13 0.15,0.22,0.28,0.28), mean=0.0928, stddev=0.0425], oderiv-count=7680
nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/16.raw MTL/exp/nnet3/multitask/17.raw 
LOG (nnet3-show-progress[5.4.217~1-8ae5]:SelectGpuId():cu-device.cc:123) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.618209 tdnn2.affine:0.363253 tdnn3.affine:0.459311 tdnn4.affine:0.429037 tdnn5.affine:0.397212 tdnn6.affine:0.369964 tdnn7.affine:0.360632 tdnn8.affine:0.363925 tdnn9.affine:0.39764 tdnn10.affine:0.435538 tdnn11.affine:0.502575 tdnnFINAL.affine:0.607135 prefinal-affine-task-0.affine:0.465 output-0.affine:0.660721 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:25.8183 tdnn2.affine:24.0005 tdnn3.affine:23.0925 tdnn4.affine:23.4494 tdnn5.affine:22.9507 tdnn6.affine:23.9876 tdnn7.affine:23.4368 tdnn8.affine:23.8452 tdnn9.affine:23.1169 tdnn10.affine:24.0532 tdnn11.affine:23.8259 tdnnFINAL.affine:22.9309 prefinal-affine-task-0.affine:23.4153 output-0.affine:8.74922 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0240094 tdnn2.affine:0.0151442 tdnn3.affine:0.0199094 tdnn4.affine:0.0183154 tdnn5.affine:0.0173246 tdnn6.affine:0.015436 tdnn7.affine:0.0154004 tdnn8.affine:0.0152741 tdnn9.affine:0.0172174 tdnn10.affine:0.0181248 tdnn11.affine:0.0211173 tdnnFINAL.affine:0.0265185 prefinal-affine-task-0.affine:0.0198869 output-0.affine:0.0770952 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Tue Jul 24 11:15:48 UTC 2018, elapsed time 1 seconds
