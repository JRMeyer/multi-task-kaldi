# nnet3-info MTL/exp/nnet3/multitask/39.raw && nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/38.raw MTL/exp/nnet3/multitask/39.raw 
# Started at Tue Jul 24 11:19:10 UTC 2018
#
nnet3-info MTL/exp/nnet3/multitask/39.raw 
num-parameters: 1486432
modulus: 1
input-node name=input dim=13
component-node name=tdnn1.affine component=tdnn1.affine input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=65 output-dim=256
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=256 output-dim=256
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=256 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=tdnn1.renorm input-dim=256 output-dim=256
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=256 output-dim=256
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=256 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -1), Offset(tdnn2.renorm, 2)) input-dim=512 output-dim=256
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=256 output-dim=256
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=256 output-dim=256
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -3), Offset(tdnn3.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=256 output-dim=256
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=256 output-dim=256
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -3), Offset(tdnn4.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.renorm, -3), Offset(tdnn5.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=256 output-dim=256
component-node name=tdnn6.renorm component=tdnn6.renorm input=tdnn6.relu input-dim=256 output-dim=256
component-node name=tdnn7.affine component=tdnn7.affine input=Append(Offset(tdnn6.renorm, -3), Offset(tdnn6.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn7.relu component=tdnn7.relu input=tdnn7.affine input-dim=256 output-dim=256
component-node name=tdnn7.renorm component=tdnn7.renorm input=tdnn7.relu input-dim=256 output-dim=256
component-node name=tdnn8.affine component=tdnn8.affine input=Append(Offset(tdnn7.renorm, -3), Offset(tdnn7.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn8.relu component=tdnn8.relu input=tdnn8.affine input-dim=256 output-dim=256
component-node name=tdnn8.renorm component=tdnn8.renorm input=tdnn8.relu input-dim=256 output-dim=256
component-node name=tdnn9.affine component=tdnn9.affine input=Append(Offset(tdnn8.renorm, -3), Offset(tdnn8.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn9.relu component=tdnn9.relu input=tdnn9.affine input-dim=256 output-dim=256
component-node name=tdnn9.renorm component=tdnn9.renorm input=tdnn9.relu input-dim=256 output-dim=256
component-node name=tdnn10.affine component=tdnn10.affine input=Append(Offset(tdnn9.renorm, -3), Offset(tdnn9.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn10.relu component=tdnn10.relu input=tdnn10.affine input-dim=256 output-dim=256
component-node name=tdnn10.renorm component=tdnn10.renorm input=tdnn10.relu input-dim=256 output-dim=256
component-node name=tdnn11.affine component=tdnn11.affine input=Append(Offset(tdnn10.renorm, -3), Offset(tdnn10.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn11.relu component=tdnn11.relu input=tdnn11.affine input-dim=256 output-dim=256
component-node name=tdnn11.renorm component=tdnn11.renorm input=tdnn11.relu input-dim=256 output-dim=256
component-node name=tdnnFINAL.affine component=tdnnFINAL.affine input=Append(Offset(tdnn11.renorm, -3), Offset(tdnn11.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnnFINAL.relu component=tdnnFINAL.relu input=tdnnFINAL.affine input-dim=256 output-dim=256
component-node name=tdnnFINAL.renorm component=tdnnFINAL.renorm input=tdnnFINAL.relu input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.affine component=prefinal-affine-task-0.affine input=tdnnFINAL.renorm input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.relu component=prefinal-affine-task-0.relu input=prefinal-affine-task-0.affine input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.renorm component=prefinal-affine-task-0.renorm input=prefinal-affine-task-0.relu input-dim=256 output-dim=256
component-node name=output-0.affine component=output-0.affine input=prefinal-affine-task-0.renorm input-dim=256 output-dim=96
component-node name=output-0.log-softmax component=output-0.log-softmax input=output-0.affine input-dim=96 output-dim=96
output-node name=output-0 input=output-0.log-softmax dim=96 objective=linear
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=65, output-dim=256, learning-rate=0.000168303, max-change=0.75, linear-params-rms=0.1563, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.90,0.90,0.93 0.97,1.0,1.2,1.4,1.6 1.7,1.8,1.8,1.9), mean=1.24, stddev=0.228], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.0,2.1,2.1 2.2,2.3,2.4,2.7,2.9 2.9,3.0,3.1,3.2), mean=2.49, stddev=0.27], bias-{mean,stddev}=0.01705,1.102, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=9.73e+04, self-repaired-proportion=0.0393229, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.04,0.07,0.31,1.6,2.2 2.6,3.1,3.6,5.5), mean=0.767, stddev=0.942], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.06 0.09,0.12,0.34,0.82,0.92 0.94,0.95,0.95,0.97), mean=0.434, stddev=0.31], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.007,0.007 0.007,0.008,0.009,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.00969, stddev=0.00233], oderiv-count=143360
component name=tdnn1.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=256, learning-rate=0.000168303, max-change=0.75, linear-params-rms=0.06584, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.91,0.92,0.95 0.98,1.0,1.0,1.1,1.1 1.2,1.2,1.2,1.3), mean=1.05, stddev=0.0624], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.92,0.93,0.95 0.97,0.99,1.0,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.05, stddev=0.0683], bias-{mean,stddev}=0.03382,1.089, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=8.19e+04, self-repaired-proportion=0.0174753, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.01,0.02 0.04,0.09,0.36,0.83,1.1 1.4,1.6,1.8,3.2), mean=0.484, stddev=0.484], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.08 0.11,0.19,0.46,0.71,0.83 0.90,0.94,0.94,0.98), mean=0.459, stddev=0.255], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.01,0.02,0.02 0.02,0.02,0.03,0.03), mean=0.0157, stddev=0.00365], oderiv-count=133120
component name=tdnn2.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000168303, max-change=0.75, linear-params-rms=0.04808, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.96,0.97,0.99 1.0,1.0,1.1,1.1,1.2 1.2,1.2,1.3,1.3), mean=1.09, stddev=0.0665], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.67,0.68 0.70,0.72,0.76,0.81,0.84 0.87,0.90,0.91,0.96), mean=0.767, stddev=0.0576], bias-{mean,stddev}=0.07198,0.9825, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.35e+04, self-repaired-proportion=0.037534, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.004,0.01,0.02 0.04,0.11,0.40,1.0,1.3 1.7,2.0,2.2,2.5), mean=0.581, stddev=0.552], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.02,0.05,0.07 0.12,0.23,0.43,0.72,0.79 0.87,0.92,0.95,0.98), mean=0.458, stddev=0.253], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.02,0.02,0.03,0.03 0.03,0.04,0.04,0.04), mean=0.0207, stddev=0.00594], oderiv-count=81920
component name=tdnn3.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000168303, max-change=0.75, linear-params-rms=0.04832, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.96,0.97,0.98 1.0,1.0,1.1,1.2,1.2 1.2,1.2,1.2,1.3), mean=1.09, stddev=0.0723], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.66,0.66,0.68 0.70,0.72,0.76,0.83,0.85 0.88,0.91,0.92,0.96), mean=0.771, stddev=0.0626], bias-{mean,stddev}=-0.04939,1.016, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.61e+04, self-repaired-proportion=0.043679, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0007,0.009,0.02 0.04,0.08,0.34,0.97,1.3 1.7,2.0,2.6,2.8), mean=0.541, stddev=0.564], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.005,0.04,0.07 0.11,0.18,0.41,0.67,0.76 0.85,0.89,0.95,0.99), mean=0.422, stddev=0.249], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.02,0.02,0.02,0.03,0.03 0.04,0.04,0.04,0.05), mean=0.0228, stddev=0.00671], oderiv-count=52992
component name=tdnn4.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000168303, max-change=0.75, linear-params-rms=0.04803, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.94,0.97,0.98 1.0,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.08, stddev=0.0694], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.66,0.67,0.69 0.70,0.71,0.76,0.82,0.85 0.88,0.90,0.92,0.95), mean=0.766, stddev=0.0592], bias-{mean,stddev}=-0.1219,0.9711, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.1e+04, self-repaired-proportion=0.0567336, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,5e-05,0.002,0.01 0.03,0.09,0.33,0.88,1.4 1.8,2.5,2.6,3.3), mean=0.555, stddev=0.617], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0004,0.01,0.05 0.09,0.18,0.40,0.70,0.81 0.87,0.91,0.93,0.98), mean=0.431, stddev=0.258], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.02,0.02,0.02,0.03,0.03 0.04,0.04,0.04,0.05), mean=0.0224, stddev=0.00681], oderiv-count=51200
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000168303, max-change=0.75, linear-params-rms=0.04805, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.95,0.97,0.98 1.0,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.09, stddev=0.0692], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.67,0.67,0.68 0.70,0.72,0.76,0.81,0.84 0.87,0.90,0.92,0.94), mean=0.767, stddev=0.0576], bias-{mean,stddev}=0.08829,1.067, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=2.87e+04, self-repaired-proportion=0.0556641, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,8e-05,0.001,0.01 0.03,0.08,0.39,1.0,1.5 1.9,2.1,2.2,3.1), mean=0.58, stddev=0.598], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0006,0.008,0.05 0.10,0.17,0.43,0.73,0.84 0.89,0.93,0.94,0.97), mean=0.45, stddev=0.275], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.04,0.04,0.04), mean=0.0235, stddev=0.00645], oderiv-count=48384
component name=tdnn6.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn7.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000168303, max-change=0.75, linear-params-rms=0.04792, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.98,0.98 1.0,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.08, stddev=0.0622], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.66,0.68 0.69,0.71,0.76,0.81,0.84 0.86,0.88,0.90,0.93), mean=0.765, stddev=0.0568], bias-{mean,stddev}=-0.02741,1.021, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn7.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.69e+04, self-repaired-proportion=0.0757068, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0001,0.005 0.04,0.08,0.35,1.1,1.5 1.8,2.0,2.4,2.8), mean=0.574, stddev=0.593], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.001,0.02 0.10,0.18,0.43,0.73,0.83 0.87,0.93,0.95,0.97), mean=0.45, stddev=0.268], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.04,0.04,0.04,0.05), mean=0.0247, stddev=0.00652], oderiv-count=44544
component name=tdnn7.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn8.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000168303, max-change=0.75, linear-params-rms=0.04758, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.95,0.96,0.97 0.99,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.2), mean=1.07, stddev=0.0672], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.66,0.67,0.68 0.69,0.71,0.75,0.81,0.83 0.85,0.88,0.89,0.94), mean=0.759, stddev=0.0535], bias-{mean,stddev}=-0.003252,1.066, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn8.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=2.18e+04, self-repaired-proportion=0.131592, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0004 0.01,0.04,0.34,1.1,1.4 1.8,2.3,2.5,3.2), mean=0.577, stddev=0.627], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.003 0.05,0.12,0.41,0.74,0.82 0.88,0.94,0.97,0.99), mean=0.425, stddev=0.29], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.04 0.04,0.04,0.04,0.06), mean=0.028, stddev=0.00687], oderiv-count=34560
component name=tdnn8.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn9.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000168303, max-change=0.75, linear-params-rms=0.04787, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.96,0.97,0.99 1.0,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.08, stddev=0.0632], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.66,0.66,0.68 0.70,0.71,0.76,0.81,0.84 0.87,0.90,0.91,0.94), mean=0.764, stddev=0.0582], bias-{mean,stddev}=-0.03479,0.9971, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn9.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=2.25e+04, self-repaired-proportion=0.115412, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,2e-05,0.001 0.01,0.06,0.36,1.0,1.4 1.8,2.0,2.4,3.4), mean=0.558, stddev=0.595], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0002,0.009 0.05,0.14,0.42,0.71,0.82 0.87,0.93,0.96,0.99), mean=0.432, stddev=0.275], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.03,0.04,0.04 0.05,0.05,0.05,0.06), mean=0.0344, stddev=0.00791], oderiv-count=26624
component name=tdnn9.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn10.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000168303, max-change=0.75, linear-params-rms=0.04818, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.96,0.98 1.0,1.0,1.1,1.2,1.2 1.2,1.2,1.2,1.2), mean=1.09, stddev=0.0666], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.66,0.67,0.68 0.70,0.72,0.76,0.82,0.85 0.87,0.91,0.91,0.94), mean=0.769, stddev=0.0591], bias-{mean,stddev}=0.06518,1.074, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn10.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.77e+04, self-repaired-proportion=0.154182, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,5e-05,0.0003 0.005,0.06,0.38,1.1,1.5 1.9,2.2,2.4,3.1), mean=0.608, stddev=0.624], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0003,0.003 0.02,0.15,0.44,0.78,0.86 0.93,0.95,0.99,1.0), mean=0.453, stddev=0.301], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.05,0.05 0.06,0.06,0.06,0.07), mean=0.0403, stddev=0.00866], oderiv-count=24576
component name=tdnn10.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn11.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000168303, max-change=0.75, linear-params-rms=0.04868, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.94,0.96,0.98 0.99,1.0,1.1,1.2,1.2 1.2,1.2,1.3,1.3), mean=1.1, stddev=0.077], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.66,0.66,0.68 0.70,0.72,0.77,0.83,0.86 0.89,0.91,0.94,0.99), mean=0.776, stddev=0.0641], bias-{mean,stddev}=-0.03522,1.048, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn11.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=8.7e+03, self-repaired-proportion=0.181895, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,4e-05 0.001,0.03,0.31,0.95,1.5 1.9,2.1,2.4,3.0), mean=0.542, stddev=0.612], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0005 0.006,0.09,0.42,0.69,0.87 0.93,0.97,0.99,1.0), mean=0.415, stddev=0.298], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.04 0.04,0.04,0.05,0.07,0.07 0.08,0.08,0.08,0.09), mean=0.0554, stddev=0.0127], oderiv-count=15872
component name=tdnn11.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnnFINAL.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000168303, max-change=0.75, linear-params-rms=0.04944, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.92,0.96,0.97 0.99,1.0,1.1,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.11, stddev=0.0967], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.65,0.66,0.68 0.70,0.71,0.78,0.86,0.89 0.92,0.94,0.97,1.0), mean=0.787, stddev=0.0782], bias-{mean,stddev}=-0.07742,0.9499, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnnFINAL.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=3.07e+03, self-repaired-proportion=0.202919, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,5e-05 0.001,0.02,0.26,0.95,1.3 1.7,1.9,2.5,3.2), mean=0.495, stddev=0.585], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0003 0.009,0.07,0.36,0.67,0.82 0.85,0.97,0.98,1.0), mean=0.381, stddev=0.29], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.05 0.06,0.06,0.08,0.10,0.11 0.11,0.12,0.13,0.13), mean=0.079, stddev=0.0205], oderiv-count=7424
component name=tdnnFINAL.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=prefinal-affine-task-0.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=256, learning-rate=0.000168303, max-change=0.75, linear-params-rms=0.06848, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.92,0.93,0.95 0.98,1.0,1.1,1.2,1.2 1.2,1.3,1.3,1.3), mean=1.09, stddev=0.0866], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.93,0.94,0.96 0.98,1.0,1.1,1.2,1.2 1.3,1.3,1.3,1.3), mean=1.09, stddev=0.092], bias-{mean,stddev}=-0.001876,1.01, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-affine-task-0.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=5.38e+03, self-repaired-proportion=0.14926, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,3e-05 0.002,0.05,0.28,0.73,0.89 1.1,1.2,1.3,1.6), mean=0.391, stddev=0.364], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0002 0.009,0.12,0.39,0.65,0.77 0.81,0.84,0.86,0.87), mean=0.395, stddev=0.262], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-08,2e-07,4e-07,0.0001 0.002,0.02,0.07,0.09,0.10 0.11,0.12,0.12,0.13), mean=0.0605, stddev=0.0367], oderiv-count=8448
component name=prefinal-affine-task-0.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output-0.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=96, learning-rate=0.000168303, max-change=1.5, linear-params-rms=0.07059, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.23,0.27,0.79 0.93,1.0,1.1,1.2,1.3 1.4,1.5,1.7,1.8), mean=1.11, stddev=0.217], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-07,2e-06,4e-06,0.0008 0.01,0.16,0.67,0.92,1.0 1.1,1.2,1.2,1.3), mean=0.585, stddev=0.369], bias-{mean,stddev}=-6.545e-08,0.01377, rank-in=20, rank-out=48, num-samples-history=2000, update-period=4, alpha=4
component name=output-0.log-softmax type=LogSoftmaxComponent, dim=96, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.03 0.06,0.07,0.08,0.11,0.14 0.15,0.23,0.26,0.28), mean=0.0923, stddev=0.0425], oderiv-count=6656
nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/38.raw MTL/exp/nnet3/multitask/39.raw 
LOG (nnet3-show-progress[5.4.217~1-8ae5]:SelectGpuId():cu-device.cc:123) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.305435 tdnn2.affine:0.193828 tdnn3.affine:0.270596 tdnn4.affine:0.279349 tdnn5.affine:0.270646 tdnn6.affine:0.255505 tdnn7.affine:0.246615 tdnn8.affine:0.24994 tdnn9.affine:0.270543 tdnn10.affine:0.281122 tdnn11.affine:0.302561 tdnnFINAL.affine:0.315021 prefinal-affine-task-0.affine:0.204606 output-0.affine:0.189504 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:26.7835 tdnn2.affine:24.2444 tdnn3.affine:23.4825 tdnn4.affine:23.8941 tdnn5.affine:23.3999 tdnn6.affine:24.4111 tdnn7.affine:23.8364 tdnn8.affine:24.2417 tdnn9.affine:23.562 tdnn10.affine:24.5088 tdnn11.affine:24.3336 tdnnFINAL.affine:23.5129 prefinal-affine-task-0.affine:23.8395 output-0.affine:11.0663 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0114116 tdnn2.affine:0.00799654 tdnn3.affine:0.011528 tdnn4.affine:0.0116966 tdnn5.affine:0.0115727 tdnn6.affine:0.0104721 tdnn7.affine:0.0103517 tdnn8.affine:0.0103159 tdnn9.affine:0.0114892 tdnn10.affine:0.0114769 tdnn11.affine:0.0124413 tdnnFINAL.affine:0.013406 prefinal-affine-task-0.affine:0.00858519 output-0.affine:0.0172249 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Tue Jul 24 11:19:10 UTC 2018, elapsed time 0 seconds
