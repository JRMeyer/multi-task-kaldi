# nnet3-info MTL/exp/nnet3/multitask/23.raw && nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/22.raw MTL/exp/nnet3/multitask/23.raw 
# Started at Tue Jul 24 11:16:42 UTC 2018
#
nnet3-info MTL/exp/nnet3/multitask/23.raw 
num-parameters: 1486432
modulus: 1
input-node name=input dim=13
component-node name=tdnn1.affine component=tdnn1.affine input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=65 output-dim=256
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=256 output-dim=256
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=256 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=tdnn1.renorm input-dim=256 output-dim=256
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=256 output-dim=256
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=256 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -1), Offset(tdnn2.renorm, 2)) input-dim=512 output-dim=256
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=256 output-dim=256
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=256 output-dim=256
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -3), Offset(tdnn3.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=256 output-dim=256
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=256 output-dim=256
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -3), Offset(tdnn4.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.renorm, -3), Offset(tdnn5.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=256 output-dim=256
component-node name=tdnn6.renorm component=tdnn6.renorm input=tdnn6.relu input-dim=256 output-dim=256
component-node name=tdnn7.affine component=tdnn7.affine input=Append(Offset(tdnn6.renorm, -3), Offset(tdnn6.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn7.relu component=tdnn7.relu input=tdnn7.affine input-dim=256 output-dim=256
component-node name=tdnn7.renorm component=tdnn7.renorm input=tdnn7.relu input-dim=256 output-dim=256
component-node name=tdnn8.affine component=tdnn8.affine input=Append(Offset(tdnn7.renorm, -3), Offset(tdnn7.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn8.relu component=tdnn8.relu input=tdnn8.affine input-dim=256 output-dim=256
component-node name=tdnn8.renorm component=tdnn8.renorm input=tdnn8.relu input-dim=256 output-dim=256
component-node name=tdnn9.affine component=tdnn9.affine input=Append(Offset(tdnn8.renorm, -3), Offset(tdnn8.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn9.relu component=tdnn9.relu input=tdnn9.affine input-dim=256 output-dim=256
component-node name=tdnn9.renorm component=tdnn9.renorm input=tdnn9.relu input-dim=256 output-dim=256
component-node name=tdnn10.affine component=tdnn10.affine input=Append(Offset(tdnn9.renorm, -3), Offset(tdnn9.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn10.relu component=tdnn10.relu input=tdnn10.affine input-dim=256 output-dim=256
component-node name=tdnn10.renorm component=tdnn10.renorm input=tdnn10.relu input-dim=256 output-dim=256
component-node name=tdnn11.affine component=tdnn11.affine input=Append(Offset(tdnn10.renorm, -3), Offset(tdnn10.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn11.relu component=tdnn11.relu input=tdnn11.affine input-dim=256 output-dim=256
component-node name=tdnn11.renorm component=tdnn11.renorm input=tdnn11.relu input-dim=256 output-dim=256
component-node name=tdnnFINAL.affine component=tdnnFINAL.affine input=Append(Offset(tdnn11.renorm, -3), Offset(tdnn11.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnnFINAL.relu component=tdnnFINAL.relu input=tdnnFINAL.affine input-dim=256 output-dim=256
component-node name=tdnnFINAL.renorm component=tdnnFINAL.renorm input=tdnnFINAL.relu input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.affine component=prefinal-affine-task-0.affine input=tdnnFINAL.renorm input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.relu component=prefinal-affine-task-0.relu input=prefinal-affine-task-0.affine input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.renorm component=prefinal-affine-task-0.renorm input=prefinal-affine-task-0.relu input-dim=256 output-dim=256
component-node name=output-0.affine component=output-0.affine input=prefinal-affine-task-0.renorm input-dim=256 output-dim=96
component-node name=output-0.log-softmax component=output-0.log-softmax input=output-0.affine input-dim=96 output-dim=96
output-node name=output-0 input=output-0.log-softmax dim=96 objective=linear
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=65, output-dim=256, learning-rate=0.000422757, max-change=0.75, linear-params-rms=0.1504, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.87,0.89,0.92 0.95,1.0,1.2,1.4,1.5 1.6,1.7,1.7,1.8), mean=1.19, stddev=0.208], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.0,2.0,2.0 2.1,2.2,2.3,2.7,2.7 2.8,2.9,3.0,3.1), mean=2.39, stddev=0.267], bias-{mean,stddev}=0.01712,1.101, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=9.73e+04, self-repaired-proportion=0.0450521, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.04,0.07,0.32,1.5,2.2 2.7,3.1,3.7,5.5), mean=0.776, stddev=0.946], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.06 0.08,0.13,0.36,0.81,0.91 0.94,0.95,0.96,0.97), mean=0.444, stddev=0.314], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.004 0.004,0.005,0.006,0.007,0.009 0.01,0.01,0.01,0.01), mean=0.00616, stddev=0.00181], oderiv-count=163840
component name=tdnn1.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=256, learning-rate=0.000422757, max-change=0.75, linear-params-rms=0.06494, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.90,0.91,0.94 0.96,0.99,1.0,1.1,1.1 1.1,1.1,1.2,1.2), mean=1.04, stddev=0.059], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.92,0.92,0.94 0.96,0.98,1.0,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.04, stddev=0.0605], bias-{mean,stddev}=0.03402,1.089, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=7.17e+04, self-repaired-proportion=0.0421549, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.01,0.01,0.02 0.03,0.07,0.33,0.86,1.1 1.4,1.6,2.1,3.5), mean=0.486, stddev=0.516], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.06,0.07 0.10,0.18,0.45,0.75,0.85 0.93,0.94,0.97,0.98), mean=0.461, stddev=0.271], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.006,0.006 0.007,0.007,0.009,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.00927, stddev=0.00264], oderiv-count=158720
component name=tdnn2.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000422757, max-change=0.75, linear-params-rms=0.04711, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.96,0.98 0.99,1.0,1.1,1.1,1.1 1.2,1.2,1.2,1.3), mean=1.06, stddev=0.0607], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.65,0.66,0.67 0.69,0.71,0.75,0.79,0.82 0.85,0.86,0.88,0.92), mean=0.752, stddev=0.0508], bias-{mean,stddev}=0.07207,0.9826, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=5.38e+04, self-repaired-proportion=0.056296, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,5e-05,0.006,0.01 0.03,0.08,0.39,1.1,1.4 1.9,2.1,2.3,2.8), mean=0.592, stddev=0.6], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0006,0.02,0.06 0.09,0.19,0.42,0.73,0.81 0.89,0.92,0.96,0.99), mean=0.458, stddev=0.27], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.006,0.007 0.007,0.008,0.01,0.01,0.02 0.02,0.02,0.02,0.03), mean=0.0116, stddev=0.00418], oderiv-count=74240
component name=tdnn3.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000422757, max-change=0.75, linear-params-rms=0.04718, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.94,0.96,0.97 0.99,1.0,1.1,1.1,1.1 1.2,1.2,1.2,1.3), mean=1.07, stddev=0.0635], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.66,0.68 0.69,0.71,0.75,0.80,0.83 0.85,0.88,0.89,0.92), mean=0.753, stddev=0.0543], bias-{mean,stddev}=-0.04936,1.016, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.84e+04, self-repaired-proportion=0.044807, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0005,0.002,0.02 0.02,0.06,0.33,1.0,1.4 1.9,2.1,2.8,3.2), mean=0.561, stddev=0.63], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.003,0.02,0.06 0.09,0.15,0.40,0.69,0.80 0.88,0.91,0.95,1.0), mean=0.419, stddev=0.265], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.007,0.007 0.007,0.008,0.01,0.01,0.02 0.02,0.02,0.02,0.03), mean=0.0116, stddev=0.00428], oderiv-count=43776
component name=tdnn4.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000422757, max-change=0.75, linear-params-rms=0.04687, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.94,0.97 0.99,1.0,1.1,1.1,1.1 1.2,1.2,1.2,1.3), mean=1.06, stddev=0.0593], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.66,0.67,0.68 0.69,0.70,0.74,0.79,0.82 0.84,0.87,0.89,0.93), mean=0.748, stddev=0.0513], bias-{mean,stddev}=-0.1218,0.9712, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=3.69e+04, self-repaired-proportion=0.0730699, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0005,0.008 0.02,0.08,0.31,1.0,1.5 2.0,2.7,2.9,3.8), mean=0.585, stddev=0.692], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.004,0.04 0.07,0.17,0.39,0.72,0.84 0.90,0.93,0.94,0.98), mean=0.429, stddev=0.275], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.006,0.007 0.007,0.008,0.01,0.01,0.02 0.02,0.02,0.02,0.03), mean=0.0111, stddev=0.00413], oderiv-count=69632
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000422757, max-change=0.75, linear-params-rms=0.0469, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.95,0.96,0.97 0.99,1.0,1.1,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.06, stddev=0.0585], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.66,0.67,0.68 0.69,0.70,0.74,0.79,0.81 0.85,0.87,0.88,0.91), mean=0.749, stddev=0.05], bias-{mean,stddev}=0.08842,1.067, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=3.76e+04, self-repaired-proportion=0.0917039, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,2e-06,0.0004,0.005 0.01,0.06,0.36,1.1,1.6 2.1,2.3,2.4,3.2), mean=0.616, stddev=0.668], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,3e-05,0.004,0.03 0.07,0.15,0.40,0.76,0.84 0.91,0.93,0.95,0.98), mean=0.446, stddev=0.292], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.007,0.007 0.007,0.008,0.01,0.01,0.02 0.02,0.02,0.02,0.03), mean=0.0114, stddev=0.00381], oderiv-count=44800
component name=tdnn6.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn7.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000422757, max-change=0.75, linear-params-rms=0.04685, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.97,0.98 1.0,1.0,1.1,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.06, stddev=0.0528], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.65,0.67 0.69,0.70,0.75,0.79,0.81 0.83,0.85,0.86,0.90), mean=0.748, stddev=0.0493], bias-{mean,stddev}=-0.02729,1.021, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn7.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=2.76e+04, self-repaired-proportion=0.0917969, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,3e-05,0.0007 0.02,0.05,0.33,1.2,1.5 2.0,2.2,2.6,3.2), mean=0.61, stddev=0.665], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0004,0.007 0.08,0.15,0.42,0.75,0.84 0.88,0.93,0.96,0.97), mean=0.444, stddev=0.282], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.007,0.007,0.007 0.008,0.009,0.01,0.02,0.02 0.02,0.02,0.02,0.03), mean=0.0121, stddev=0.00398], oderiv-count=36864
component name=tdnn7.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn8.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000422757, max-change=0.75, linear-params-rms=0.0465, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.95,0.97 0.98,1.0,1.0,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.05, stddev=0.0552], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.66,0.66,0.68 0.69,0.70,0.74,0.78,0.80 0.82,0.84,0.85,0.91), mean=0.743, stddev=0.0458], bias-{mean,stddev}=-0.003165,1.066, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn8.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=2.82e+04, self-repaired-proportion=0.150276, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,3e-05 0.005,0.02,0.36,1.1,1.6 2.0,2.5,2.7,3.3), mean=0.62, stddev=0.695], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0005 0.02,0.08,0.41,0.75,0.83 0.89,0.94,0.97,0.99), mean=0.421, stddev=0.303], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.009,0.009,0.009 0.01,0.01,0.01,0.02,0.02 0.02,0.02,0.02,0.03), mean=0.0138, stddev=0.00397], oderiv-count=34560
component name=tdnn8.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn9.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000422757, max-change=0.75, linear-params-rms=0.04669, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.95,0.96,0.98 0.99,1.0,1.1,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.06, stddev=0.0525], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.65,0.66,0.68 0.69,0.70,0.74,0.78,0.81 0.83,0.86,0.87,0.89), mean=0.745, stddev=0.0478], bias-{mean,stddev}=-0.03466,0.9973, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn9.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=2.05e+04, self-repaired-proportion=0.127757, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,2e-06,0.0009 0.008,0.04,0.34,1.1,1.5 1.9,2.3,2.7,3.6), mean=0.595, stddev=0.664], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,5e-05,0.008 0.05,0.12,0.42,0.74,0.83 0.89,0.93,0.96,0.99), mean=0.429, stddev=0.287], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.03,0.03), mean=0.0176, stddev=0.00465], oderiv-count=23552
component name=tdnn9.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn10.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000422757, max-change=0.75, linear-params-rms=0.04695, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.96,0.97 0.98,1.0,1.1,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.06, stddev=0.0553], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.65,0.66,0.68 0.69,0.71,0.74,0.79,0.82 0.84,0.86,0.88,0.90), mean=0.75, stddev=0.0499], bias-{mean,stddev}=0.06532,1.074, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn10.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.38e+04, self-repaired-proportion=0.169819, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0001 0.004,0.04,0.38,1.3,1.7 2.0,2.3,2.6,3.3), mean=0.659, stddev=0.693], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.001 0.02,0.12,0.43,0.79,0.87 0.93,0.97,0.98,1.0), mean=0.455, stddev=0.312], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0218, stddev=0.00524], oderiv-count=25344
component name=tdnn10.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn11.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000422757, max-change=0.75, linear-params-rms=0.04738, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.93,0.96,0.97 0.99,1.0,1.1,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.07, stddev=0.0629], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.66,0.67 0.69,0.71,0.75,0.80,0.83 0.85,0.88,0.91,0.94), mean=0.756, stddev=0.055], bias-{mean,stddev}=-0.03509,1.048, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn11.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.02e+04, self-repaired-proportion=0.213695, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,7e-07 0.0004,0.02,0.33,1.1,1.7 2.2,2.3,2.7,3.5), mean=0.599, stddev=0.7], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0001 0.003,0.07,0.38,0.72,0.87 0.94,0.98,0.99,1.0), mean=0.414, stddev=0.31], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.04,0.04 0.05,0.05,0.05,0.06), mean=0.0322, stddev=0.00796], oderiv-count=14848
component name=tdnn11.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnnFINAL.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000422757, max-change=0.75, linear-params-rms=0.04811, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.92,0.96,0.97 0.98,1.0,1.1,1.2,1.2 1.2,1.2,1.3,1.3), mean=1.09, stddev=0.0817], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.65,0.66,0.67 0.69,0.71,0.76,0.82,0.86 0.89,0.91,0.92,0.99), mean=0.767, stddev=0.0675], bias-{mean,stddev}=-0.07724,0.9501, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnnFINAL.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.61e+03, self-repaired-proportion=0.235026, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,2e-05 0.0003,0.02,0.28,1.1,1.6 1.9,2.3,2.9,3.6), mean=0.569, stddev=0.692], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0002 0.003,0.05,0.36,0.70,0.83 0.89,0.96,0.98,1.0), mean=0.387, stddev=0.307], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.05,0.06,0.07 0.08,0.08,0.09,0.09), mean=0.0515, stddev=0.0144], oderiv-count=6400
component name=tdnnFINAL.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=prefinal-affine-task-0.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=256, learning-rate=0.000422757, max-change=0.75, linear-params-rms=0.06714, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.92,0.93,0.95 0.97,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.07, stddev=0.0763], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.92,0.94,0.96 0.97,1.0,1.1,1.2,1.2 1.2,1.2,1.3,1.3), mean=1.07, stddev=0.0813], bias-{mean,stddev}=-0.001043,1.01, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-affine-task-0.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.35e+03, self-repaired-proportion=0.179932, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.001,0.03,0.32,1.0,1.3 1.6,1.8,1.9,2.4), mean=0.522, stddev=0.536], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.006,0.10,0.42,0.75,0.87 0.92,0.94,0.95,0.98), mean=0.432, stddev=0.305], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-08,8e-08,1e-07,2e-05 0.0009,0.01,0.05,0.07,0.08 0.08,0.09,0.09,0.09), mean=0.0442, stddev=0.0281], oderiv-count=7168
component name=prefinal-affine-task-0.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output-0.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=96, learning-rate=0.000422757, max-change=1.5, linear-params-rms=0.06126, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.22,0.25,0.67 0.78,0.85,0.95,1.1,1.2 1.3,1.4,1.5,1.8), mean=0.958, stddev=0.206], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-07,1e-06,2e-06,0.0002 0.01,0.12,0.58,0.80,0.89 0.96,1.0,1.1,1.1), mean=0.501, stddev=0.33], bias-{mean,stddev}=-6.362e-08,0.01381, rank-in=20, rank-out=48, num-samples-history=2000, update-period=4, alpha=4
component name=output-0.log-softmax type=LogSoftmaxComponent, dim=96, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.01,0.03 0.06,0.07,0.08,0.11,0.14 0.15,0.23,0.26,0.29), mean=0.0923, stddev=0.0424], oderiv-count=8448
nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/22.raw MTL/exp/nnet3/multitask/23.raw 
LOG (nnet3-show-progress[5.4.217~1-8ae5]:SelectGpuId():cu-device.cc:123) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.515671 tdnn2.affine:0.315805 tdnn3.affine:0.411871 tdnn4.affine:0.390087 tdnn5.affine:0.359571 tdnn6.affine:0.330808 tdnn7.affine:0.319696 tdnn8.affine:0.326069 tdnn9.affine:0.356275 tdnn10.affine:0.390546 tdnn11.affine:0.445919 tdnnFINAL.affine:0.5202 prefinal-affine-task-0.affine:0.382882 output-0.affine:0.462868 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:26.2035 tdnn2.affine:24.0854 tdnn3.affine:23.2243 tdnn4.affine:23.5945 tdnn5.affine:23.0916 tdnn6.affine:24.1182 tdnn7.affine:23.5567 tdnn8.affine:23.9653 tdnn9.affine:23.2512 tdnn10.affine:24.1946 tdnn11.affine:23.9957 tdnnFINAL.affine:23.1526 prefinal-affine-task-0.affine:23.5957 output-0.affine:9.60449 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.019722 tdnn2.affine:0.0131193 tdnn3.affine:0.0177491 tdnn4.affine:0.0165484 tdnn5.affine:0.0155857 tdnn6.affine:0.0137277 tdnn7.affine:0.0135823 tdnn8.affine:0.0136164 tdnn9.affine:0.0153365 tdnn10.affine:0.0161566 tdnn11.affine:0.0186035 tdnnFINAL.affine:0.0225003 prefinal-affine-task-0.affine:0.0162459 output-0.affine:0.0487798 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Tue Jul 24 11:16:42 UTC 2018, elapsed time 0 seconds
