# nnet3-info MTL/exp/nnet3/multitask/35.raw && nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/34.raw MTL/exp/nnet3/multitask/35.raw 
# Started at Tue Jul 24 11:18:33 UTC 2018
#
nnet3-info MTL/exp/nnet3/multitask/35.raw 
num-parameters: 1486432
modulus: 1
input-node name=input dim=13
component-node name=tdnn1.affine component=tdnn1.affine input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=65 output-dim=256
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=256 output-dim=256
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=256 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=tdnn1.renorm input-dim=256 output-dim=256
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=256 output-dim=256
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=256 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -1), Offset(tdnn2.renorm, 2)) input-dim=512 output-dim=256
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=256 output-dim=256
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=256 output-dim=256
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -3), Offset(tdnn3.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=256 output-dim=256
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=256 output-dim=256
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -3), Offset(tdnn4.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.renorm, -3), Offset(tdnn5.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=256 output-dim=256
component-node name=tdnn6.renorm component=tdnn6.renorm input=tdnn6.relu input-dim=256 output-dim=256
component-node name=tdnn7.affine component=tdnn7.affine input=Append(Offset(tdnn6.renorm, -3), Offset(tdnn6.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn7.relu component=tdnn7.relu input=tdnn7.affine input-dim=256 output-dim=256
component-node name=tdnn7.renorm component=tdnn7.renorm input=tdnn7.relu input-dim=256 output-dim=256
component-node name=tdnn8.affine component=tdnn8.affine input=Append(Offset(tdnn7.renorm, -3), Offset(tdnn7.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn8.relu component=tdnn8.relu input=tdnn8.affine input-dim=256 output-dim=256
component-node name=tdnn8.renorm component=tdnn8.renorm input=tdnn8.relu input-dim=256 output-dim=256
component-node name=tdnn9.affine component=tdnn9.affine input=Append(Offset(tdnn8.renorm, -3), Offset(tdnn8.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn9.relu component=tdnn9.relu input=tdnn9.affine input-dim=256 output-dim=256
component-node name=tdnn9.renorm component=tdnn9.renorm input=tdnn9.relu input-dim=256 output-dim=256
component-node name=tdnn10.affine component=tdnn10.affine input=Append(Offset(tdnn9.renorm, -3), Offset(tdnn9.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn10.relu component=tdnn10.relu input=tdnn10.affine input-dim=256 output-dim=256
component-node name=tdnn10.renorm component=tdnn10.renorm input=tdnn10.relu input-dim=256 output-dim=256
component-node name=tdnn11.affine component=tdnn11.affine input=Append(Offset(tdnn10.renorm, -3), Offset(tdnn10.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn11.relu component=tdnn11.relu input=tdnn11.affine input-dim=256 output-dim=256
component-node name=tdnn11.renorm component=tdnn11.renorm input=tdnn11.relu input-dim=256 output-dim=256
component-node name=tdnnFINAL.affine component=tdnnFINAL.affine input=Append(Offset(tdnn11.renorm, -3), Offset(tdnn11.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnnFINAL.relu component=tdnnFINAL.relu input=tdnnFINAL.affine input-dim=256 output-dim=256
component-node name=tdnnFINAL.renorm component=tdnnFINAL.renorm input=tdnnFINAL.relu input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.affine component=prefinal-affine-task-0.affine input=tdnnFINAL.renorm input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.relu component=prefinal-affine-task-0.relu input=prefinal-affine-task-0.affine input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.renorm component=prefinal-affine-task-0.renorm input=prefinal-affine-task-0.relu input-dim=256 output-dim=256
component-node name=output-0.affine component=output-0.affine input=prefinal-affine-task-0.renorm input-dim=256 output-dim=96
component-node name=output-0.log-softmax component=output-0.log-softmax input=output-0.affine input-dim=96 output-dim=96
output-node name=output-0 input=output-0.log-softmax dim=96 objective=linear
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=65, output-dim=256, learning-rate=0.000211881, max-change=0.75, linear-params-rms=0.1553, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.89,0.90,0.93 0.96,1.0,1.2,1.4,1.6 1.7,1.8,1.8,1.9), mean=1.23, stddev=0.225], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.0,2.1,2.1 2.2,2.2,2.4,2.7,2.8 2.9,3.0,3.1,3.2), mean=2.47, stddev=0.27], bias-{mean,stddev}=0.0171,1.102, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=6.14e+04, self-repaired-proportion=0.0486111, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.04,0.08,0.30,1.6,2.1 2.7,3.3,3.9,5.5), mean=0.788, stddev=0.961], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.07 0.08,0.12,0.35,0.82,0.92 0.93,0.94,0.96,0.98), mean=0.44, stddev=0.314], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.006,0.006 0.006,0.007,0.008,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.00869, stddev=0.00218], oderiv-count=128000
component name=tdnn1.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=256, learning-rate=0.000211881, max-change=0.75, linear-params-rms=0.06568, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.91,0.92,0.95 0.97,1.0,1.0,1.1,1.1 1.2,1.2,1.2,1.3), mean=1.05, stddev=0.0619], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.92,0.93,0.95 0.97,0.99,1.0,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.05, stddev=0.067], bias-{mean,stddev}=0.03384,1.089, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=9.73e+04, self-repaired-proportion=0.0234375, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.01,0.02,0.02 0.04,0.08,0.34,0.85,1.1 1.4,1.6,1.8,3.2), mean=0.479, stddev=0.485], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.07,0.09 0.12,0.19,0.45,0.72,0.83 0.90,0.92,0.95,0.98), mean=0.459, stddev=0.257], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.01 0.01,0.01,0.01,0.02,0.02 0.02,0.02,0.03,0.03), mean=0.0142, stddev=0.00344], oderiv-count=158720
component name=tdnn2.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000211881, max-change=0.75, linear-params-rms=0.04789, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.96,0.97,0.99 1.0,1.0,1.1,1.1,1.2 1.2,1.2,1.3,1.3), mean=1.08, stddev=0.0656], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.67,0.68 0.70,0.72,0.76,0.81,0.84 0.87,0.89,0.90,0.96), mean=0.764, stddev=0.0564], bias-{mean,stddev}=0.072,0.9825, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.1e+04, self-repaired-proportion=0.0475852, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.001,0.009,0.02 0.04,0.11,0.39,1.0,1.3 1.8,2.1,2.3,2.5), mean=0.588, stddev=0.565], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.008,0.04,0.07 0.12,0.21,0.44,0.73,0.80 0.87,0.93,0.96,0.98), mean=0.459, stddev=0.257], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.02,0.02,0.03 0.03,0.03,0.04,0.04), mean=0.0184, stddev=0.00555], oderiv-count=84480
component name=tdnn3.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000211881, max-change=0.75, linear-params-rms=0.0481, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.96,0.97,0.98 1.0,1.0,1.1,1.2,1.2 1.2,1.2,1.2,1.3), mean=1.09, stddev=0.0707], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.66,0.66,0.68 0.70,0.71,0.76,0.82,0.85 0.88,0.91,0.92,0.96), mean=0.767, stddev=0.0612], bias-{mean,stddev}=-0.04938,1.016, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=3.92e+04, self-repaired-proportion=0.0437012, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,0.001,0.009,0.02 0.03,0.07,0.33,0.98,1.3 1.7,2.0,2.7,2.8), mean=0.543, stddev=0.577], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.007,0.04,0.07 0.10,0.17,0.41,0.67,0.78 0.85,0.90,0.95,0.99), mean=0.421, stddev=0.253], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.02,0.02,0.03 0.03,0.03,0.04,0.04), mean=0.0197, stddev=0.00611], oderiv-count=62208
component name=tdnn4.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000211881, max-change=0.75, linear-params-rms=0.04779, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.94,0.96,0.98 1.0,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.08, stddev=0.0676], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.66,0.67,0.68 0.70,0.71,0.75,0.81,0.84 0.87,0.89,0.91,0.94), mean=0.762, stddev=0.0576], bias-{mean,stddev}=-0.1218,0.9711, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=3.48e+04, self-repaired-proportion=0.0516036, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,5e-05,0.002,0.01 0.03,0.09,0.34,0.86,1.5 1.9,2.5,2.7,3.4), mean=0.561, stddev=0.631], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0004,0.01,0.05 0.08,0.18,0.40,0.69,0.82 0.88,0.92,0.93,0.98), mean=0.431, stddev=0.261], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.02,0.02,0.03 0.03,0.04,0.04,0.04), mean=0.0194, stddev=0.00618], oderiv-count=59392
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000211881, max-change=0.75, linear-params-rms=0.0478, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.95,0.97,0.98 1.0,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.08, stddev=0.0669], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.67,0.67,0.68 0.70,0.71,0.76,0.81,0.83 0.87,0.90,0.92,0.94), mean=0.763, stddev=0.0561], bias-{mean,stddev}=0.08832,1.067, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=3.94e+04, self-repaired-proportion=0.0591797, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0001,0.001,0.01 0.03,0.07,0.39,1.1,1.5 1.9,2.1,2.3,3.1), mean=0.588, stddev=0.611], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0004,0.007,0.05 0.09,0.16,0.42,0.73,0.84 0.89,0.93,0.94,0.98), mean=0.45, stddev=0.278], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.02,0.02,0.03 0.03,0.03,0.03,0.04), mean=0.0198, stddev=0.00573], oderiv-count=48384
component name=tdnn6.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn7.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000211881, max-change=0.75, linear-params-rms=0.04768, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.97,0.98 1.0,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.08, stddev=0.0603], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.66,0.67 0.69,0.71,0.76,0.81,0.83 0.86,0.88,0.90,0.92), mean=0.761, stddev=0.0552], bias-{mean,stddev}=-0.02738,1.021, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn7.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=2.15e+04, self-repaired-proportion=0.0793586, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0001,0.005 0.03,0.08,0.33,1.2,1.5 1.9,2.1,2.5,2.9), mean=0.583, stddev=0.609], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.001,0.02 0.10,0.17,0.42,0.74,0.82 0.88,0.92,0.95,0.96), mean=0.448, stddev=0.271], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.02,0.02,0.03,0.03 0.03,0.03,0.04,0.04), mean=0.021, stddev=0.00582], oderiv-count=41472
component name=tdnn7.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn8.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000211881, max-change=0.75, linear-params-rms=0.04735, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.96,0.97 0.98,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.2), mean=1.07, stddev=0.0648], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.66,0.67,0.68 0.69,0.71,0.75,0.80,0.82 0.84,0.87,0.88,0.93), mean=0.756, stddev=0.0519], bias-{mean,stddev}=-0.003237,1.066, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn8.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=2.05e+04, self-repaired-proportion=0.136533, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0002 0.01,0.04,0.33,1.1,1.5 1.9,2.4,2.6,3.3), mean=0.588, stddev=0.646], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.002 0.04,0.11,0.41,0.74,0.82 0.88,0.94,0.97,0.99), mean=0.424, stddev=0.294], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.04,0.04,0.05), mean=0.0238, stddev=0.00606], oderiv-count=35840
component name=tdnn8.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn9.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000211881, max-change=0.75, linear-params-rms=0.04761, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.96,0.97,0.99 1.0,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.2), mean=1.08, stddev=0.061], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.66,0.66,0.68 0.69,0.71,0.75,0.81,0.84 0.86,0.89,0.90,0.93), mean=0.76, stddev=0.0561], bias-{mean,stddev}=-0.03477,0.9972, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn9.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=2.25e+04, self-repaired-proportion=0.123512, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,6e-06,1e-05,0.0008 0.01,0.05,0.37,1.0,1.4 1.9,2.1,2.5,3.4), mean=0.568, stddev=0.611], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,4e-05,9e-05,0.006 0.05,0.13,0.41,0.72,0.82 0.88,0.92,0.96,0.99), mean=0.431, stddev=0.277], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.04,0.04 0.04,0.04,0.05,0.05), mean=0.0295, stddev=0.00699], oderiv-count=28672
component name=tdnn9.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn10.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000211881, max-change=0.75, linear-params-rms=0.04793, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.96,0.98 1.0,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.2), mean=1.08, stddev=0.0644], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.66,0.66,0.68 0.69,0.71,0.76,0.81,0.84 0.87,0.89,0.91,0.93), mean=0.765, stddev=0.0574], bias-{mean,stddev}=0.0652,1.074, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn10.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.38e+04, self-repaired-proportion=0.162194, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,4e-05,0.0003 0.005,0.06,0.39,1.1,1.5 1.9,2.2,2.3,3.1), mean=0.618, stddev=0.637], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0002,0.002 0.02,0.14,0.44,0.78,0.87 0.93,0.96,0.99,1.0), mean=0.453, stddev=0.303], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.03,0.04,0.05 0.05,0.05,0.05,0.06), mean=0.0353, stddev=0.00778], oderiv-count=22272
component name=tdnn10.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn11.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000211881, max-change=0.75, linear-params-rms=0.04843, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.94,0.96,0.98 0.99,1.0,1.1,1.2,1.2 1.2,1.2,1.2,1.3), mean=1.09, stddev=0.0741], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.66,0.66,0.68 0.69,0.72,0.77,0.83,0.86 0.88,0.91,0.93,0.97), mean=0.772, stddev=0.0624], bias-{mean,stddev}=-0.0352,1.048, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn11.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.08e+04, self-repaired-proportion=0.181066, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,2e-05 0.001,0.03,0.31,0.98,1.6 2.0,2.2,2.5,3.1), mean=0.554, stddev=0.634], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,9e-05 0.005,0.09,0.40,0.70,0.86 0.93,0.96,0.99,1.0), mean=0.413, stddev=0.299], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.05,0.06,0.06 0.07,0.08,0.08,0.08), mean=0.0494, stddev=0.0116], oderiv-count=14336
component name=tdnn11.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnnFINAL.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000211881, max-change=0.75, linear-params-rms=0.0492, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.92,0.96,0.97 0.99,1.0,1.1,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.11, stddev=0.0943], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.65,0.66,0.67 0.69,0.71,0.77,0.85,0.88 0.91,0.93,0.97,1.0), mean=0.783, stddev=0.0764], bias-{mean,stddev}=-0.07739,0.95, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnnFINAL.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=5.63e+03, self-repaired-proportion=0.198785, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0001 0.001,0.02,0.27,0.96,1.4 1.7,1.9,2.6,3.3), mean=0.512, stddev=0.607], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0009 0.009,0.06,0.37,0.69,0.81 0.87,0.97,0.98,1.0), mean=0.383, stddev=0.292], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.05 0.05,0.05,0.07,0.09,0.10 0.11,0.11,0.12,0.12), mean=0.0724, stddev=0.0192], oderiv-count=8448
component name=tdnnFINAL.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=prefinal-affine-task-0.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=256, learning-rate=0.000211881, max-change=0.75, linear-params-rms=0.06827, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.92,0.93,0.95 0.98,1.0,1.1,1.2,1.2 1.2,1.3,1.3,1.3), mean=1.09, stddev=0.0848], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.93,0.94,0.96 0.98,1.0,1.1,1.2,1.2 1.2,1.3,1.3,1.3), mean=1.09, stddev=0.0907], bias-{mean,stddev}=-0.001684,1.01, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-affine-task-0.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.35e+03, self-repaired-proportion=0.151142, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,3e-05 0.001,0.05,0.29,0.78,0.98 1.2,1.4,1.5,1.8), mean=0.419, stddev=0.398], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0002 0.007,0.12,0.40,0.68,0.79 0.85,0.87,0.89,0.90), mean=0.403, stddev=0.272], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-08,1e-07,3e-07,7e-05 0.001,0.02,0.07,0.09,0.10 0.10,0.11,0.11,0.12), mean=0.0572, stddev=0.0349], oderiv-count=6912
component name=prefinal-affine-task-0.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output-0.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=96, learning-rate=0.000211881, max-change=1.5, linear-params-rms=0.06875, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.23,0.26,0.77 0.91,0.97,1.1,1.2,1.3 1.4,1.5,1.7,1.8), mean=1.08, stddev=0.214], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-07,1e-06,3e-06,0.0006 0.01,0.15,0.65,0.90,1.0 1.1,1.2,1.2,1.2), mean=0.569, stddev=0.361], bias-{mean,stddev}=-6.468e-08,0.01377, rank-in=20, rank-out=48, num-samples-history=2000, update-period=4, alpha=4
component name=output-0.log-softmax type=LogSoftmaxComponent, dim=96, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.04 0.06,0.07,0.08,0.11,0.14 0.15,0.22,0.27,0.29), mean=0.0925, stddev=0.0431], oderiv-count=7936
nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/34.raw MTL/exp/nnet3/multitask/35.raw 
LOG (nnet3-show-progress[5.4.217~1-8ae5]:SelectGpuId():cu-device.cc:123) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.348164 tdnn2.affine:0.223642 tdnn3.affine:0.305708 tdnn4.affine:0.307355 tdnn5.affine:0.299434 tdnn6.affine:0.279419 tdnn7.affine:0.26927 tdnn8.affine:0.274025 tdnn9.affine:0.296768 tdnn10.affine:0.315817 tdnn11.affine:0.341776 tdnnFINAL.affine:0.36298 prefinal-affine-task-0.affine:0.245204 output-0.affine:0.239017 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:26.6919 tdnn2.affine:24.2164 tdnn3.affine:23.4333 tdnn4.affine:23.8354 tdnn5.affine:23.3355 tdnn6.affine:24.3479 tdnn7.affine:23.7745 tdnn8.affine:24.1811 tdnn9.affine:23.4951 tdnn10.affine:24.445 tdnn11.affine:24.2673 tdnnFINAL.affine:23.4474 prefinal-affine-task-0.affine:23.8024 output-0.affine:10.7778 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0130576 tdnn2.affine:0.00923867 tdnn3.affine:0.0130541 tdnn4.affine:0.0129033 tdnn5.affine:0.0128413 tdnn6.affine:0.0114837 tdnn7.affine:0.0113337 tdnn8.affine:0.0113395 tdnn9.affine:0.0126408 tdnn10.affine:0.0129289 tdnn11.affine:0.0140944 tdnnFINAL.affine:0.0154924 prefinal-affine-task-0.affine:0.0103065 output-0.affine:0.0223402 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Tue Jul 24 11:18:33 UTC 2018, elapsed time 0 seconds
