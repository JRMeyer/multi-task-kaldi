# nnet3-info MTL/exp/nnet3/multitask/7.raw && nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/6.raw MTL/exp/nnet3/multitask/7.raw 
# Started at Tue Jul 24 11:14:15 UTC 2018
#
nnet3-info MTL/exp/nnet3/multitask/7.raw 
num-parameters: 1486432
modulus: 1
input-node name=input dim=13
component-node name=tdnn1.affine component=tdnn1.affine input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=65 output-dim=256
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=256 output-dim=256
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=256 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=tdnn1.renorm input-dim=256 output-dim=256
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=256 output-dim=256
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=256 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -1), Offset(tdnn2.renorm, 2)) input-dim=512 output-dim=256
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=256 output-dim=256
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=256 output-dim=256
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -3), Offset(tdnn3.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=256 output-dim=256
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=256 output-dim=256
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -3), Offset(tdnn4.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.renorm, -3), Offset(tdnn5.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=256 output-dim=256
component-node name=tdnn6.renorm component=tdnn6.renorm input=tdnn6.relu input-dim=256 output-dim=256
component-node name=tdnn7.affine component=tdnn7.affine input=Append(Offset(tdnn6.renorm, -3), Offset(tdnn6.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn7.relu component=tdnn7.relu input=tdnn7.affine input-dim=256 output-dim=256
component-node name=tdnn7.renorm component=tdnn7.renorm input=tdnn7.relu input-dim=256 output-dim=256
component-node name=tdnn8.affine component=tdnn8.affine input=Append(Offset(tdnn7.renorm, -3), Offset(tdnn7.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn8.relu component=tdnn8.relu input=tdnn8.affine input-dim=256 output-dim=256
component-node name=tdnn8.renorm component=tdnn8.renorm input=tdnn8.relu input-dim=256 output-dim=256
component-node name=tdnn9.affine component=tdnn9.affine input=Append(Offset(tdnn8.renorm, -3), Offset(tdnn8.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn9.relu component=tdnn9.relu input=tdnn9.affine input-dim=256 output-dim=256
component-node name=tdnn9.renorm component=tdnn9.renorm input=tdnn9.relu input-dim=256 output-dim=256
component-node name=tdnn10.affine component=tdnn10.affine input=Append(Offset(tdnn9.renorm, -3), Offset(tdnn9.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn10.relu component=tdnn10.relu input=tdnn10.affine input-dim=256 output-dim=256
component-node name=tdnn10.renorm component=tdnn10.renorm input=tdnn10.relu input-dim=256 output-dim=256
component-node name=tdnn11.affine component=tdnn11.affine input=Append(Offset(tdnn10.renorm, -3), Offset(tdnn10.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn11.relu component=tdnn11.relu input=tdnn11.affine input-dim=256 output-dim=256
component-node name=tdnn11.renorm component=tdnn11.renorm input=tdnn11.relu input-dim=256 output-dim=256
component-node name=tdnnFINAL.affine component=tdnnFINAL.affine input=Append(Offset(tdnn11.renorm, -3), Offset(tdnn11.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnnFINAL.relu component=tdnnFINAL.relu input=tdnnFINAL.affine input-dim=256 output-dim=256
component-node name=tdnnFINAL.renorm component=tdnnFINAL.renorm input=tdnnFINAL.relu input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.affine component=prefinal-affine-task-0.affine input=tdnnFINAL.renorm input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.relu component=prefinal-affine-task-0.relu input=prefinal-affine-task-0.affine input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.renorm component=prefinal-affine-task-0.renorm input=prefinal-affine-task-0.relu input-dim=256 output-dim=256
component-node name=output-0.affine component=output-0.affine input=prefinal-affine-task-0.renorm input-dim=256 output-dim=96
component-node name=output-0.log-softmax component=output-0.log-softmax input=output-0.affine input-dim=96 output-dim=96
output-node name=output-0 input=output-0.log-softmax dim=96 objective=linear
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=65, output-dim=256, learning-rate=0.00106192, max-change=0.75, linear-params-rms=0.1353, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.83,0.85,0.88 0.92,0.95,1.1,1.2,1.3 1.4,1.5,1.5,1.6), mean=1.08, stddev=0.149], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.9,1.9 1.9,2.0,2.1,2.3,2.4 2.6,2.7,2.7,2.8), mean=2.15, stddev=0.224], bias-{mean,stddev}=0.01687,1.093, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=8.7e+04, self-repaired-proportion=0.103711, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.01,0.01,0.02 0.02,0.05,0.34,1.5,2.3 2.8,3.9,4.0,7.2), mean=0.836, stddev=1.08], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.05,0.05,0.06 0.07,0.11,0.36,0.87,0.94 0.95,0.96,0.98,0.99), mean=0.468, stddev=0.34], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.002 0.002,0.002,0.002,0.004,0.004 0.005,0.006,0.007,0.008), mean=0.00279, stddev=0.00116], oderiv-count=153600
component name=tdnn1.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=256, learning-rate=0.00106192, max-change=0.75, linear-params-rms=0.06361, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.88,0.91,0.93 0.95,0.98,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.02, stddev=0.0526], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.91,0.92,0.93 0.95,0.97,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.02, stddev=0.0502], bias-{mean,stddev}=0.03406,1.089, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=8.19e+04, self-repaired-proportion=0.158306, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,3e-07,0.0001,0.002 0.008,0.03,0.24,0.90,1.2 1.6,2.0,2.6,4.1), mean=0.489, stddev=0.605], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,1e-05,0.0007,0.02 0.05,0.10,0.40,0.81,0.90 0.95,0.96,0.99,1.0), mean=0.452, stddev=0.317], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.003,0.003,0.004,0.005,0.006 0.007,0.008,0.009,0.01), mean=0.00408, stddev=0.00156], oderiv-count=138240
component name=tdnn2.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00106192, max-change=0.75, linear-params-rms=0.04569, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.95,0.97 0.98,1.0,1.0,1.1,1.1 1.1,1.2,1.2,1.3), mean=1.03, stddev=0.0476], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.64,0.65,0.67 0.68,0.70,0.73,0.76,0.78 0.80,0.81,0.83,0.87), mean=0.73, stddev=0.0396], bias-{mean,stddev}=0.07214,0.9828, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=6.4e+04, self-repaired-proportion=0.172286, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0003 0.005,0.03,0.35,1.1,1.7 2.0,2.6,2.8,3.3), mean=0.611, stddev=0.713], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.002 0.03,0.10,0.43,0.77,0.88 0.92,0.95,0.99,1.0), mean=0.444, stddev=0.317], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.003,0.003,0.004,0.006,0.008 0.01,0.01,0.01,0.01), mean=0.0048, stddev=0.00231], oderiv-count=71680
component name=tdnn3.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00106192, max-change=0.75, linear-params-rms=0.04564, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.96,0.96 0.97,0.99,1.0,1.1,1.1 1.1,1.1,1.2,1.2), mean=1.03, stddev=0.0478], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.64,0.65,0.66 0.68,0.69,0.73,0.76,0.78 0.80,0.82,0.83,0.85), mean=0.729, stddev=0.0417], bias-{mean,stddev}=-0.04941,1.016, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=3.69e+04, self-repaired-proportion=0.163281, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,6e-06,0.0003 0.003,0.02,0.28,1.1,1.6 2.1,2.6,3.3,3.7), mean=0.586, stddev=0.741], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,5e-05,0.002 0.03,0.09,0.37,0.72,0.86 0.92,0.94,0.97,1.0), mean=0.407, stddev=0.301], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.003,0.004,0.006,0.008 0.009,0.01,0.01,0.01), mean=0.00459, stddev=0.00215], oderiv-count=64512
component name=tdnn4.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00106192, max-change=0.75, linear-params-rms=0.04542, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.93,0.94,0.96 0.98,0.99,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.03, stddev=0.0437], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.64,0.65,0.67 0.68,0.69,0.72,0.76,0.78 0.80,0.81,0.83,0.86), mean=0.726, stddev=0.0393], bias-{mean,stddev}=-0.1218,0.9715, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.1e+04, self-repaired-proportion=0.149639, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,5e-07,8e-05 0.005,0.03,0.27,1.1,1.6 2.4,3.1,3.3,4.6), mean=0.603, stddev=0.798], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,2e-05,0.0008 0.03,0.10,0.37,0.74,0.88 0.91,0.93,0.95,0.98), mean=0.414, stddev=0.301], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.003,0.004,0.006,0.007 0.009,0.01,0.01,0.01), mean=0.00435, stddev=0.00204], oderiv-count=59392
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00106192, max-change=0.75, linear-params-rms=0.04554, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.93,0.95,0.96 0.97,1.0,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.03, stddev=0.0435], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.66,0.67 0.68,0.69,0.73,0.76,0.77 0.79,0.82,0.83,0.86), mean=0.728, stddev=0.0387], bias-{mean,stddev}=0.08846,1.067, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.3e+04, self-repaired-proportion=0.156929, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,4e-05 0.005,0.03,0.32,1.2,1.7 2.4,2.7,2.9,3.2), mean=0.64, stddev=0.764], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0007 0.03,0.11,0.36,0.78,0.87 0.91,0.95,0.98,1.0), mean=0.429, stddev=0.312], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.003,0.003,0.004,0.006,0.007 0.008,0.009,0.009,0.01), mean=0.00464, stddev=0.00188], oderiv-count=51968
component name=tdnn6.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn7.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00106192, max-change=0.75, linear-params-rms=0.04559, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.95,0.95,0.97 0.98,1.0,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.03, stddev=0.0406], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.64,0.65,0.66 0.68,0.70,0.73,0.76,0.78 0.80,0.81,0.83,0.85), mean=0.728, stddev=0.0395], bias-{mean,stddev}=-0.02728,1.022, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn7.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=2.46e+04, self-repaired-proportion=0.188542, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,9e-07 0.001,0.02,0.30,1.2,1.7 2.2,2.6,2.8,4.2), mean=0.625, stddev=0.765], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,4e-05 0.01,0.07,0.42,0.73,0.86 0.90,0.96,0.97,1.0), mean=0.419, stddev=0.307], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.003,0.003 0.003,0.003,0.004,0.007,0.008 0.009,0.01,0.01,0.02), mean=0.00505, stddev=0.00212], oderiv-count=41472
component name=tdnn7.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn8.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00106192, max-change=0.75, linear-params-rms=0.04526, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.93,0.95,0.97 0.98,0.99,1.0,1.1,1.1 1.1,1.1,1.1,1.1), mean=1.02, stddev=0.0407], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.65,0.66,0.67 0.68,0.69,0.72,0.75,0.77 0.78,0.80,0.81,0.87), mean=0.723, stddev=0.0356], bias-{mean,stddev}=-0.003153,1.066, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn8.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=3.2e+04, self-repaired-proportion=0.273828, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 7e-05,0.007,0.32,1.2,1.8 2.4,2.7,3.1,3.6), mean=0.652, stddev=0.791], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.001,0.04,0.38,0.77,0.86 0.93,0.97,0.99,1.0), mean=0.411, stddev=0.328], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.003 0.004,0.004,0.005,0.008,0.008 0.009,0.01,0.01,0.02), mean=0.00576, stddev=0.00209], oderiv-count=35840
component name=tdnn8.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn9.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00106192, max-change=0.75, linear-params-rms=0.04536, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.94,0.95,0.97 0.98,0.99,1.0,1.1,1.1 1.1,1.1,1.1,1.1), mean=1.03, stddev=0.0401], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.65,0.65,0.67 0.68,0.70,0.72,0.75,0.77 0.79,0.81,0.82,0.85), mean=0.725, stddev=0.0362], bias-{mean,stddev}=-0.03457,0.9975, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn9.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.54e+04, self-repaired-proportion=0.185662, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.0008,0.02,0.31,1.1,1.6 2.1,2.8,3.0,3.9), mean=0.611, stddev=0.742], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.009,0.09,0.40,0.77,0.87 0.93,0.95,0.98,1.0), mean=0.424, stddev=0.313], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.005 0.005,0.005,0.007,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.00753, stddev=0.00244], oderiv-count=30720
component name=tdnn9.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn10.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00106192, max-change=0.75, linear-params-rms=0.04545, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.95,0.96 0.97,0.99,1.0,1.1,1.1 1.1,1.1,1.1,1.1), mean=1.03, stddev=0.0409], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.65,0.65,0.67 0.68,0.70,0.72,0.76,0.78 0.80,0.81,0.82,0.85), mean=0.726, stddev=0.0375], bias-{mean,stddev}=0.06545,1.075, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn10.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.46e+04, self-repaired-proportion=0.286399, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.0004,0.009,0.33,1.4,1.8 2.3,2.7,3.0,3.3), mean=0.695, stddev=0.792], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.003,0.05,0.43,0.84,0.91 0.97,0.99,1.0,1.0), mean=0.45, stddev=0.339], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.006,0.006 0.006,0.007,0.009,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.00955, stddev=0.00288], oderiv-count=24576
component name=tdnn10.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn11.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00106192, max-change=0.75, linear-params-rms=0.04558, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.93,0.94,0.96 0.98,0.99,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.03, stddev=0.043], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.65,0.67 0.68,0.69,0.72,0.76,0.78 0.80,0.82,0.84,0.88), mean=0.728, stddev=0.0405], bias-{mean,stddev}=-0.03494,1.048, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn11.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.18e+04, self-repaired-proportion=0.32526, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 5e-07,0.002,0.24,1.2,1.9 2.5,2.8,2.9,4.7), mean=0.649, stddev=0.835], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 8e-05,0.02,0.37,0.79,0.92 0.98,1.0,1.0,1.0), mean=0.411, stddev=0.344], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.009,0.01,0.01 0.01,0.01,0.01,0.02,0.02 0.02,0.03,0.03,0.03), mean=0.0152, stddev=0.00437], oderiv-count=14336
component name=tdnn11.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnnFINAL.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00106192, max-change=0.75, linear-params-rms=0.04578, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.92,0.94,0.96 0.97,0.99,1.0,1.1,1.1 1.1,1.1,1.2,1.2), mean=1.03, stddev=0.052], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.65,0.65,0.67 0.68,0.69,0.73,0.76,0.79 0.81,0.84,0.85,0.90), mean=0.731, stddev=0.0445], bias-{mean,stddev}=-0.07691,0.9505, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnnFINAL.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=5.63e+03, self-repaired-proportion=0.384301, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 1e-05,0.0009,0.17,1.4,1.9 2.3,2.8,3.7,4.5), mean=0.633, stddev=0.877], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.0002,0.008,0.33,0.76,0.92 0.97,0.99,1.0,1.0), mean=0.386, stddev=0.35], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.02,0.02,0.02,0.03,0.04 0.04,0.05,0.05,0.06), mean=0.0269, stddev=0.00857], oderiv-count=7680
component name=tdnnFINAL.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=prefinal-affine-task-0.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=256, learning-rate=0.00106192, max-change=0.75, linear-params-rms=0.06407, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.91,0.92,0.93 0.95,0.98,1.0,1.1,1.1 1.1,1.1,1.2,1.2), mean=1.02, stddev=0.0566], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.92,0.93,0.94 0.96,0.98,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.02, stddev=0.0533], bias-{mean,stddev}=8.109e-05,1.012, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-affine-task-0.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.61e+03, self-repaired-proportion=0.396949, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.003,0.30,1.4,1.9 2.3,2.5,2.6,3.3), mean=0.64, stddev=0.763], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.02,0.43,0.89,0.98 1.0,1.0,1.0,1.0), mean=0.451, stddev=0.368], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-08,7e-08,7e-08,9e-08 1e-05,0.003,0.03,0.04,0.05 0.05,0.06,0.06,0.07), mean=0.0246, stddev=0.0183], oderiv-count=6656
component name=prefinal-affine-task-0.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output-0.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=96, learning-rate=0.00106192, max-change=1.5, linear-params-rms=0.04123, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.21,0.21,0.36 0.46,0.51,0.60,0.74,0.83 0.95,1.1,1.2,1.5), mean=0.63, stddev=0.195], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-07,9e-07,1e-06,1e-06 0.0004,0.05,0.35,0.55,0.63 0.69,0.77,0.87,0.96), mean=0.321, stddev=0.245], bias-{mean,stddev}=-6.432e-08,0.01333, rank-in=20, rank-out=48, num-samples-history=2000, update-period=4, alpha=4
component name=output-0.log-softmax type=LogSoftmaxComponent, dim=96, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.01,0.03 0.06,0.07,0.09,0.11,0.13 0.15,0.23,0.26,0.28), mean=0.0924, stddev=0.0422], oderiv-count=6912
nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/6.raw MTL/exp/nnet3/multitask/7.raw 
LOG (nnet3-show-progress[5.4.217~1-8ae5]:SelectGpuId():cu-device.cc:123) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:1.12309 tdnn2.affine:0.590242 tdnn3.affine:0.656396 tdnn4.affine:0.589159 tdnn5.affine:0.528156 tdnn6.affine:0.493086 tdnn7.affine:0.484284 tdnn8.affine:0.482199 tdnn9.affine:0.510651 tdnn10.affine:0.546466 tdnn11.affine:0.641559 tdnnFINAL.affine:0.826867 prefinal-affine-task-0.affine:0.689596 output-0.affine:1.38908 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:24.7071 tdnn2.affine:23.8542 tdnn3.affine:22.8529 tdnn4.affine:23.196 tdnn5.affine:22.7124 tdnn6.affine:23.7768 tdnn7.affine:23.234 tdnn8.affine:23.6551 tdnn9.affine:22.9061 tdnn10.affine:23.8213 tdnn11.affine:23.5372 tdnnFINAL.affine:22.5266 prefinal-affine-task-0.affine:23.0431 output-0.affine:6.46551 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0457303 tdnn2.affine:0.024759 tdnn3.affine:0.0287521 tdnn4.affine:0.0254261 tdnn5.affine:0.0232772 tdnn6.affine:0.0207566 tdnn7.affine:0.0208632 tdnn8.affine:0.0204012 tdnn9.affine:0.022313 tdnn10.affine:0.022962 tdnn11.affine:0.0272912 tdnnFINAL.affine:0.036778 prefinal-affine-task-0.affine:0.0299853 output-0.affine:0.23076 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Tue Jul 24 11:14:15 UTC 2018, elapsed time 0 seconds
