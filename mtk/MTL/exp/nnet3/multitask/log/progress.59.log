# nnet3-info MTL/exp/nnet3/multitask/59.raw && nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/58.raw MTL/exp/nnet3/multitask/59.raw 
# Started at Fri Jul 27 02:32:59 UTC 2018
#
nnet3-info MTL/exp/nnet3/multitask/59.raw 
num-parameters: 13891160
modulus: 1
input-node name=input dim=13
component-node name=tdnn1.affine component=tdnn1.affine input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=65 output-dim=768
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=768 output-dim=768
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=768 output-dim=768
component-node name=tdnn2.affine component=tdnn2.affine input=tdnn1.renorm input-dim=768 output-dim=768
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=768 output-dim=768
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=768 output-dim=768
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -1), Offset(tdnn2.renorm, 2)) input-dim=1536 output-dim=768
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=768 output-dim=768
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=768 output-dim=768
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -3), Offset(tdnn3.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=768 output-dim=768
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=768 output-dim=768
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -3), Offset(tdnn4.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=768 output-dim=768
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=768 output-dim=768
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.renorm, -3), Offset(tdnn5.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=768 output-dim=768
component-node name=tdnn6.renorm component=tdnn6.renorm input=tdnn6.relu input-dim=768 output-dim=768
component-node name=tdnn7.affine component=tdnn7.affine input=Append(Offset(tdnn6.renorm, -3), Offset(tdnn6.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn7.relu component=tdnn7.relu input=tdnn7.affine input-dim=768 output-dim=768
component-node name=tdnn7.renorm component=tdnn7.renorm input=tdnn7.relu input-dim=768 output-dim=768
component-node name=tdnn8.affine component=tdnn8.affine input=Append(Offset(tdnn7.renorm, -3), Offset(tdnn7.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn8.relu component=tdnn8.relu input=tdnn8.affine input-dim=768 output-dim=768
component-node name=tdnn8.renorm component=tdnn8.renorm input=tdnn8.relu input-dim=768 output-dim=768
component-node name=tdnn9.affine component=tdnn9.affine input=Append(Offset(tdnn8.renorm, -3), Offset(tdnn8.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn9.relu component=tdnn9.relu input=tdnn9.affine input-dim=768 output-dim=768
component-node name=tdnn9.renorm component=tdnn9.renorm input=tdnn9.relu input-dim=768 output-dim=768
component-node name=tdnn10.affine component=tdnn10.affine input=Append(Offset(tdnn9.renorm, -3), Offset(tdnn9.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn10.relu component=tdnn10.relu input=tdnn10.affine input-dim=768 output-dim=768
component-node name=tdnn10.renorm component=tdnn10.renorm input=tdnn10.relu input-dim=768 output-dim=768
component-node name=tdnn11.affine component=tdnn11.affine input=Append(Offset(tdnn10.renorm, -3), Offset(tdnn10.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn11.relu component=tdnn11.relu input=tdnn11.affine input-dim=768 output-dim=768
component-node name=tdnn11.renorm component=tdnn11.renorm input=tdnn11.relu input-dim=768 output-dim=768
component-node name=tdnnFINAL.affine component=tdnnFINAL.affine input=Append(Offset(tdnn11.renorm, -3), Offset(tdnn11.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnnFINAL.relu component=tdnnFINAL.relu input=tdnnFINAL.affine input-dim=768 output-dim=768
component-node name=tdnnFINAL.renorm component=tdnnFINAL.renorm input=tdnnFINAL.relu input-dim=768 output-dim=768
component-node name=prefinal-affine-task-0.affine component=prefinal-affine-task-0.affine input=tdnnFINAL.renorm input-dim=768 output-dim=768
component-node name=prefinal-affine-task-0.relu component=prefinal-affine-task-0.relu input=prefinal-affine-task-0.affine input-dim=768 output-dim=768
component-node name=prefinal-affine-task-0.renorm component=prefinal-affine-task-0.renorm input=prefinal-affine-task-0.relu input-dim=768 output-dim=768
component-node name=output-0.affine component=output-0.affine input=prefinal-affine-task-0.renorm input-dim=768 output-dim=152
component-node name=output-0.log-softmax component=output-0.log-softmax input=output-0.affine input-dim=152 output-dim=152
output-node name=output-0 input=output-0.log-softmax dim=152 objective=linear
component-node name=prefinal-affine-task-1.affine component=prefinal-affine-task-1.affine input=tdnnFINAL.renorm input-dim=768 output-dim=768
component-node name=prefinal-affine-task-1.relu component=prefinal-affine-task-1.relu input=prefinal-affine-task-1.affine input-dim=768 output-dim=768
component-node name=prefinal-affine-task-1.renorm component=prefinal-affine-task-1.renorm input=prefinal-affine-task-1.relu input-dim=768 output-dim=768
component-node name=output-1.affine component=output-1.affine input=prefinal-affine-task-1.renorm input-dim=768 output-dim=192
component-node name=output-1.log-softmax component=output-1.log-softmax input=output-1.affine input-dim=192 output-dim=192
output-node name=output-1 input=output-1.log-softmax dim=192 objective=linear
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=65, output-dim=768, learning-rate=0.000282547, max-change=0.75, linear-params-rms=0.1412, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.82,0.85,0.90 0.93,0.99,1.1,1.3,1.3 1.4,1.5,1.5,1.7), mean=1.13, stddev=0.156], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.3,3.3,3.6,3.6 3.7,3.7,3.9,4.1,4.2 4.2,4.4,4.4,4.6), mean=3.91, stddev=0.221], bias-{mean,stddev}=0.03011,1.031, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=1.79e+05, self-repaired-proportion=0.000349339, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.04,0.06,0.26,1.3,1.7 2.1,2.5,2.9,5.2), mean=0.645, stddev=0.755], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.08 0.09,0.12,0.37,0.86,0.91 0.93,0.93,0.94,0.95), mean=0.461, stddev=0.325], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0004,0.0004,0.0004 0.0004,0.0005,0.0006,0.0008,0.0009 0.001,0.001,0.001,0.001), mean=0.000627, stddev=0.000179], oderiv-count=276480
component name=tdnn1.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=768, learning-rate=0.000282547, max-change=0.75, linear-params-rms=0.03764, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.96,0.97,0.98 1.0,1.0,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.04, stddev=0.0386], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.96,0.96,0.98 0.99,1.0,1.0,1.1,1.1 1.1,1.1,1.2,1.2), mean=1.04, stddev=0.0457], bias-{mean,stddev}=0.01178,1.051, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=2.51e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.05,0.08,0.34,0.94,1.3 1.5,1.8,2.1,2.5), mean=0.518, stddev=0.505], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.09,0.12 0.14,0.20,0.46,0.76,0.86 0.89,0.92,0.93,0.94), mean=0.475, stddev=0.265], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0005,0.0005,0.0005 0.0006,0.0006,0.0007,0.0009,0.0009 0.001,0.001,0.001,0.001), mean=0.000723, stddev=0.000155], oderiv-count=286720
component name=tdnn2.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000282547, max-change=0.75, linear-params-rms=0.02713, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.98,0.99,1.0 1.0,1.0,1.1,1.1,1.1 1.1,1.1,1.2,1.2), mean=1.06, stddev=0.0407], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.68,0.69,0.70 0.70,0.72,0.75,0.78,0.80 0.82,0.84,0.85,0.91), mean=0.751, stddev=0.0394], bias-{mean,stddev}=0.01778,1.008, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=9.47e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.04 0.06,0.11,0.38,1.0,1.4 1.7,2.0,2.1,2.7), mean=0.573, stddev=0.546], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.09,0.11 0.15,0.21,0.41,0.68,0.80 0.86,0.90,0.91,0.94), mean=0.445, stddev=0.237], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0007,0.0008 0.0008,0.0008,0.001,0.001,0.001 0.001,0.002,0.002,0.002), mean=0.00103, stddev=0.000233], oderiv-count=153600
component name=tdnn3.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000282547, max-change=0.75, linear-params-rms=0.02728, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.98,0.99,1.0 1.0,1.0,1.1,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.07, stddev=0.0435], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.67,0.69,0.70 0.71,0.72,0.75,0.79,0.82 0.83,0.85,0.86,0.91), mean=0.755, stddev=0.0428], bias-{mean,stddev}=0.007425,1.004, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=7.14e+04, self-repaired-proportion=0.00126591, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.04 0.07,0.12,0.32,0.89,1.2 1.5,1.9,2.1,2.6), mean=0.513, stddev=0.499], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.08,0.08,0.11 0.14,0.20,0.38,0.64,0.76 0.82,0.88,0.92,0.94), mean=0.417, stddev=0.225], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.0009,0.0009,0.001 0.001,0.001,0.001,0.001,0.002 0.002,0.002,0.002,0.002), mean=0.00125, stddev=0.000256], oderiv-count=129024
component name=tdnn4.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000282547, max-change=0.75, linear-params-rms=0.0275, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,0.98,0.99,1.0 1.0,1.0,1.1,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.08, stddev=0.0449], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.68,0.69,0.70 0.71,0.72,0.75,0.80,0.82 0.85,0.87,0.88,0.93), mean=0.761, stddev=0.0453], bias-{mean,stddev}=0.02199,1.015, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=8.6e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.05 0.08,0.15,0.38,0.85,1.2 1.5,1.7,1.9,2.2), mean=0.523, stddev=0.45], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.08,0.12 0.16,0.23,0.42,0.63,0.74 0.81,0.88,0.90,0.95), mean=0.436, stddev=0.213], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.002,0.002,0.002,0.002), mean=0.00145, stddev=0.000244], oderiv-count=120832
component name=tdnn5.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000282547, max-change=0.75, linear-params-rms=0.02772, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,0.99,1.0,1.0 1.0,1.0,1.1,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.09, stddev=0.0473], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.68,0.69,0.70 0.71,0.73,0.76,0.81,0.83 0.84,0.86,0.87,0.92), mean=0.767, stddev=0.0433], bias-{mean,stddev}=0.04583,1.007, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=6.09e+04, self-repaired-proportion=0.00546875, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.04 0.07,0.14,0.41,0.86,1.2 1.5,1.7,1.9,2.3), mean=0.528, stddev=0.456], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.07,0.09,0.11 0.15,0.22,0.44,0.64,0.77 0.82,0.89,0.92,0.98), mean=0.442, stddev=0.223], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002,0.002 0.002,0.002,0.002,0.002), mean=0.00163, stddev=0.000252], oderiv-count=96768
component name=tdnn6.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn7.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000282547, max-change=0.75, linear-params-rms=0.02801, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,0.99,1.0,1.0 1.0,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.2), mean=1.1, stddev=0.0516], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.68,0.69,0.70 0.71,0.73,0.77,0.82,0.84 0.85,0.87,0.88,0.94), mean=0.775, stddev=0.0478], bias-{mean,stddev}=0.01651,0.9738, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn7.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=5.38e+04, self-repaired-proportion=0.00883838, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.02,0.03,0.05 0.08,0.14,0.36,0.79,1.0 1.4,1.8,2.0,3.6), mean=0.5, stddev=0.452], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.06,0.08,0.12 0.16,0.23,0.41,0.62,0.72 0.82,0.91,0.93,0.97), mean=0.431, stddev=0.213], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.002 0.002,0.002,0.002,0.002,0.002 0.002,0.003,0.003,0.003), mean=0.00199, stddev=0.000299], oderiv-count=87552
component name=tdnn7.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn8.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000282547, max-change=0.75, linear-params-rms=0.02821, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,0.99,0.99,1.0 1.0,1.0,1.1,1.2,1.2 1.2,1.2,1.2,1.2), mean=1.1, stddev=0.0572], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.69,0.70,0.71 0.72,0.73,0.78,0.83,0.84 0.86,0.88,0.89,0.93), mean=0.78, stddev=0.0487], bias-{mean,stddev}=-0.05807,1.063, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn8.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=4.35e+04, self-repaired-proportion=0.0259749, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.002,0.01,0.03 0.05,0.11,0.36,0.81,1.2 1.4,1.7,1.9,2.6), mean=0.499, stddev=0.452], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.008,0.04,0.08 0.12,0.20,0.41,0.64,0.76 0.82,0.90,0.92,0.97), mean=0.427, stddev=0.233], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.002,0.003,0.003 0.003,0.003,0.003,0.003), mean=0.00229, stddev=0.000356], oderiv-count=70400
component name=tdnn8.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn9.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000282547, max-change=0.75, linear-params-rms=0.02835, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.98,0.99,1.0 1.0,1.0,1.1,1.2,1.2 1.2,1.2,1.2,1.2), mean=1.11, stddev=0.0613], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.69,0.69,0.70 0.71,0.73,0.78,0.84,0.86 0.87,0.88,0.89,0.92), mean=0.784, stddev=0.0528], bias-{mean,stddev}=-0.05938,0.998, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn9.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=3.38e+04, self-repaired-proportion=0.0356826, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0008,0.005,0.02 0.06,0.12,0.36,0.79,1.1 1.4,1.6,1.9,2.3), mean=0.482, stddev=0.43], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.004,0.02,0.07 0.12,0.21,0.41,0.64,0.75 0.84,0.90,0.93,0.98), mean=0.422, stddev=0.23], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.003,0.003 0.003,0.003,0.003,0.004), mean=0.00263, stddev=0.000418], oderiv-count=59392
component name=tdnn9.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn10.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000282547, max-change=0.75, linear-params-rms=0.02832, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,0.98,0.99,1.0 1.0,1.0,1.1,1.2,1.2 1.2,1.2,1.2,1.3), mean=1.11, stddev=0.061], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.68,0.69,0.70 0.72,0.73,0.78,0.83,0.85 0.86,0.88,0.89,0.92), mean=0.783, stddev=0.051], bias-{mean,stddev}=0.02918,1.027, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn10.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=2.84e+04, self-repaired-proportion=0.0575707, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0001,0.003,0.02 0.05,0.11,0.37,0.85,1.1 1.4,1.7,2.0,2.2), mean=0.499, stddev=0.453], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0005,0.01,0.05 0.11,0.20,0.42,0.66,0.77 0.84,0.93,0.95,0.98), mean=0.432, stddev=0.244], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.003,0.004 0.004,0.004,0.004,0.004), mean=0.00292, stddev=0.00049], oderiv-count=46848
component name=tdnn10.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn11.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000282547, max-change=0.75, linear-params-rms=0.02826, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.97,0.98,1.0 1.0,1.0,1.1,1.2,1.2 1.2,1.2,1.2,1.2), mean=1.11, stddev=0.0647], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.69,0.69,0.70 0.71,0.73,0.78,0.83,0.85 0.86,0.88,0.89,0.93), mean=0.782, stddev=0.0504], bias-{mean,stddev}=0.03174,1.019, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn11.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=2.05e+04, self-repaired-proportion=0.102958, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0001,0.0006,0.006 0.02,0.10,0.34,0.82,1.2 1.6,2.0,2.1,2.6), mean=0.497, stddev=0.499], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0008,0.003,0.02 0.06,0.18,0.40,0.66,0.80 0.89,0.95,0.97,1.0), mean=0.421, stddev=0.262], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.003,0.003 0.003,0.003,0.003,0.004,0.004 0.004,0.005,0.005,0.005), mean=0.00348, stddev=0.000601], oderiv-count=31744
component name=tdnn11.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnnFINAL.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000282547, max-change=0.75, linear-params-rms=0.0283, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,0.98,0.99,1.0 1.0,1.0,1.1,1.2,1.2 1.2,1.2,1.2,1.3), mean=1.11, stddev=0.0701], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.68,0.69,0.70 0.71,0.72,0.78,0.83,0.86 0.87,0.90,0.91,0.95), mean=0.782, stddev=0.0565], bias-{mean,stddev}=-0.06729,0.9591, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnnFINAL.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=8.96e+03, self-repaired-proportion=0.116308, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,4e-06,0.0001,0.002 0.01,0.06,0.30,0.68,0.94 1.2,1.5,1.8,2.4), mean=0.409, stddev=0.402], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0001,0.0008,0.008 0.04,0.14,0.36,0.59,0.71 0.79,0.90,0.93,1.0), mean=0.375, stddev=0.24], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.004 0.004,0.004,0.005,0.006,0.006 0.007,0.007,0.007,0.008), mean=0.00513, stddev=0.000941], oderiv-count=13568
component name=tdnnFINAL.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=prefinal-affine-task-0.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=768, learning-rate=0.000282547, max-change=0.75, linear-params-rms=0.03808, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.95,0.96,0.97 0.98,1.0,1.1,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.05, stddev=0.0548], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.96,0.97,0.98 0.99,1.0,1.1,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.05, stddev=0.0487], bias-{mean,stddev}=0.0007514,1.006, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-affine-task-0.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=5.89e+03, self-repaired-proportion=0.131099, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,2e-05,0.0006 0.006,0.04,0.28,0.61,0.72 0.83,0.95,1.0,1.2), mean=0.334, stddev=0.284], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0003,0.003 0.02,0.10,0.37,0.59,0.65 0.70,0.73,0.74,0.78), mean=0.36, stddev=0.23], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-09,4e-06,1e-05,0.0001 0.0003,0.001,0.005,0.006,0.006 0.007,0.007,0.008,0.009), mean=0.00387, stddev=0.00229], oderiv-count=7936
component name=prefinal-affine-task-0.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=output-0.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=152, learning-rate=0.000282547, max-change=1.5, linear-params-rms=0.04659, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.52,0.88,0.93 1.0,1.1,1.3,1.4,1.5 1.5,1.6,1.6,1.7), mean=1.27, stddev=0.208], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-07,0.0005,0.002,0.009 0.03,0.11,0.57,0.77,0.84 0.88,0.93,0.95,1.1), mean=0.486, stddev=0.307], bias-{mean,stddev}=-4.431e-08,0.003285, rank-in=20, rank-out=76, num-samples-history=2000, update-period=4, alpha=4
component name=output-0.log-softmax type=LogSoftmaxComponent, dim=152, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.009,0.02,0.02 0.03,0.04,0.05,0.07,0.08 0.10,0.14,0.19,0.24), mean=0.057, stddev=0.0309], oderiv-count=7936
component name=prefinal-affine-task-1.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=768, learning-rate=0.000282547, max-change=0.75, linear-params-rms=0.03615, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.94,0.95,0.96 0.97,0.98,1.0,1.0,1.0 1.0,1.1,1.1,1.1), mean=1, stddev=0.027], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.94,0.95,0.96 0.97,0.98,1.0,1.0,1.0 1.0,1.1,1.1,1.1), mean=1, stddev=0.0262], bias-{mean,stddev}=-0.07016,1.031, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-affine-task-1.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=4.1e+03, self-repaired-proportion=0.159049, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,1e-05,0.0006 0.004,0.03,0.26,0.57,0.73 0.82,0.94,1.1,1.3), mean=0.314, stddev=0.283], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0002,0.003 0.02,0.08,0.43,0.69,0.78 0.81,0.86,0.89,0.93), mean=0.404, stddev=0.279], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-09,1e-06,1e-05,6e-05 0.0002,0.0008,0.004,0.006,0.006 0.006,0.007,0.007,0.008), mean=0.00349, stddev=0.00223], oderiv-count=7936
component name=prefinal-affine-task-1.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=output-1.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=192, learning-rate=0.000282547, max-change=1.5, linear-params-rms=0.02453, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.07 0.07,0.07,0.07,1.0,1.1 1.2,1.2,1.2,1.3), mean=0.491, stddev=0.47], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,9e-05,0.0009,0.004 0.02,0.07,0.33,0.46,0.51 0.54,0.56,0.57,0.61), mean=0.286, stddev=0.184], bias-{mean,stddev}=2.537e-08,0.002037, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-1.log-softmax type=LogSoftmaxComponent, dim=192, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.02,0.02 0.03,0.05,0.05,0.07), mean=0.00807, stddev=0.012], oderiv-count=8448
nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/58.raw MTL/exp/nnet3/multitask/59.raw 
LOG (nnet3-show-progress[5.4.217~1-8ae5]:SelectGpuId():cu-device.cc:123) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.133901 tdnn2.affine:0.0766658 tdnn3.affine:0.104733 tdnn4.affine:0.117202 tdnn5.affine:0.127909 tdnn6.affine:0.139124 tdnn7.affine:0.151623 tdnn8.affine:0.159661 tdnn9.affine:0.16541 tdnn10.affine:0.163005 tdnn11.affine:0.158239 tdnnFINAL.affine:0.159552 prefinal-affine-task-0.affine:0.0776507 output-0.affine:0.0703759 prefinal-affine-task-1.affine:0.0761932 output-1.affine:0.0619804 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:42.5666 tdnn2.affine:41.0432 tdnn3.affine:40.6125 tdnn4.affine:40.6412 tdnn5.affine:41.0212 tdnn6.affine:41.075 tdnn7.affine:40.6715 tdnn8.affine:42.5317 tdnn9.affine:41.4224 tdnn10.affine:41.9186 tdnn11.affine:41.715 tdnnFINAL.affine:40.6782 prefinal-affine-task-0.affine:40.4032 output-0.affine:15.9183 prefinal-affine-task-1.affine:39.8885 output-1.affine:9.42091 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.00314573 tdnn2.affine:0.00186797 tdnn3.affine:0.00257892 tdnn4.affine:0.00288391 tdnn5.affine:0.00311823 tdnn6.affine:0.0033872 tdnn7.affine:0.00372815 tdnn8.affine:0.00375409 tdnn9.affine:0.00399344 tdnn10.affine:0.0038888 tdnn11.affine:0.00379347 tdnnFINAL.affine:0.00392235 prefinal-affine-task-0.affine:0.00192187 output-0.affine:0.00442646 prefinal-affine-task-1.affine:0.00191013 output-1.affine:0.00659649 ]
# Accounting: time=3 threads=1
# Ended (code 0) at Fri Jul 27 02:33:02 UTC 2018, elapsed time 3 seconds
