# nnet3-info MTL/exp/nnet3/multitask/9.raw && nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/8.raw MTL/exp/nnet3/multitask/9.raw 
# Started at Tue Jul 24 11:14:34 UTC 2018
#
nnet3-info MTL/exp/nnet3/multitask/9.raw 
num-parameters: 1486432
modulus: 1
input-node name=input dim=13
component-node name=tdnn1.affine component=tdnn1.affine input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=65 output-dim=256
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=256 output-dim=256
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=256 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=tdnn1.renorm input-dim=256 output-dim=256
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=256 output-dim=256
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=256 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -1), Offset(tdnn2.renorm, 2)) input-dim=512 output-dim=256
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=256 output-dim=256
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=256 output-dim=256
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -3), Offset(tdnn3.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=256 output-dim=256
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=256 output-dim=256
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -3), Offset(tdnn4.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.renorm, -3), Offset(tdnn5.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=256 output-dim=256
component-node name=tdnn6.renorm component=tdnn6.renorm input=tdnn6.relu input-dim=256 output-dim=256
component-node name=tdnn7.affine component=tdnn7.affine input=Append(Offset(tdnn6.renorm, -3), Offset(tdnn6.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn7.relu component=tdnn7.relu input=tdnn7.affine input-dim=256 output-dim=256
component-node name=tdnn7.renorm component=tdnn7.renorm input=tdnn7.relu input-dim=256 output-dim=256
component-node name=tdnn8.affine component=tdnn8.affine input=Append(Offset(tdnn7.renorm, -3), Offset(tdnn7.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn8.relu component=tdnn8.relu input=tdnn8.affine input-dim=256 output-dim=256
component-node name=tdnn8.renorm component=tdnn8.renorm input=tdnn8.relu input-dim=256 output-dim=256
component-node name=tdnn9.affine component=tdnn9.affine input=Append(Offset(tdnn8.renorm, -3), Offset(tdnn8.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn9.relu component=tdnn9.relu input=tdnn9.affine input-dim=256 output-dim=256
component-node name=tdnn9.renorm component=tdnn9.renorm input=tdnn9.relu input-dim=256 output-dim=256
component-node name=tdnn10.affine component=tdnn10.affine input=Append(Offset(tdnn9.renorm, -3), Offset(tdnn9.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn10.relu component=tdnn10.relu input=tdnn10.affine input-dim=256 output-dim=256
component-node name=tdnn10.renorm component=tdnn10.renorm input=tdnn10.relu input-dim=256 output-dim=256
component-node name=tdnn11.affine component=tdnn11.affine input=Append(Offset(tdnn10.renorm, -3), Offset(tdnn10.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn11.relu component=tdnn11.relu input=tdnn11.affine input-dim=256 output-dim=256
component-node name=tdnn11.renorm component=tdnn11.renorm input=tdnn11.relu input-dim=256 output-dim=256
component-node name=tdnnFINAL.affine component=tdnnFINAL.affine input=Append(Offset(tdnn11.renorm, -3), Offset(tdnn11.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnnFINAL.relu component=tdnnFINAL.relu input=tdnnFINAL.affine input-dim=256 output-dim=256
component-node name=tdnnFINAL.renorm component=tdnnFINAL.renorm input=tdnnFINAL.relu input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.affine component=prefinal-affine-task-0.affine input=tdnnFINAL.renorm input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.relu component=prefinal-affine-task-0.relu input=prefinal-affine-task-0.affine input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.renorm component=prefinal-affine-task-0.renorm input=prefinal-affine-task-0.relu input-dim=256 output-dim=256
component-node name=output-0.affine component=output-0.affine input=prefinal-affine-task-0.renorm input-dim=256 output-dim=96
component-node name=output-0.log-softmax component=output-0.log-softmax input=output-0.affine input-dim=96 output-dim=96
output-node name=output-0 input=output-0.log-softmax dim=96 objective=linear
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=65, output-dim=256, learning-rate=0.000946436, max-change=0.75, linear-params-rms=0.1385, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.83,0.86,0.89 0.92,0.97,1.1,1.2,1.3 1.4,1.5,1.5,1.6), mean=1.1, stddev=0.162], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,1.9,1.9 2.0,2.0,2.1,2.4,2.5 2.6,2.7,2.8,2.9), mean=2.2, stddev=0.244], bias-{mean,stddev}=0.01675,1.095, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=9.22e+04, self-repaired-proportion=0.0810547, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.02,0.02 0.03,0.05,0.31,1.6,2.1 2.8,3.3,4.4,5.3), mean=0.82, stddev=1.01], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.07 0.07,0.10,0.38,0.87,0.92 0.94,0.95,0.97,1.0), mean=0.459, stddev=0.338], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.004,0.005 0.006,0.007,0.007,0.008), mean=0.00322, stddev=0.00126], oderiv-count=138240
component name=tdnn1.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=256, learning-rate=0.000946436, max-change=0.75, linear-params-rms=0.06374, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,0.88,0.91,0.93 0.95,0.98,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.02, stddev=0.0534], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.91,0.92,0.93 0.95,0.98,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.02, stddev=0.0511], bias-{mean,stddev}=0.03406,1.089, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=7.17e+04, self-repaired-proportion=0.141927, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,1e-06,0.0006,0.003 0.008,0.04,0.30,0.93,1.2 1.4,2.0,2.6,3.7), mean=0.496, stddev=0.578], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,3e-05,0.006,0.03 0.05,0.12,0.45,0.77,0.89 0.93,0.96,0.98,1.0), mean=0.457, stddev=0.304], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.003 0.003,0.003,0.004,0.006,0.007 0.008,0.009,0.01,0.01), mean=0.00474, stddev=0.00174], oderiv-count=122880
component name=tdnn2.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000946436, max-change=0.75, linear-params-rms=0.04586, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.95,0.97 0.98,1.0,1.0,1.1,1.1 1.1,1.2,1.2,1.3), mean=1.04, stddev=0.0493], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.64,0.65,0.67 0.69,0.70,0.73,0.76,0.79 0.80,0.83,0.83,0.88), mean=0.733, stddev=0.041], bias-{mean,stddev}=0.07216,0.9827, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.35e+04, self-repaired-proportion=0.138221, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,2e-05,0.001 0.009,0.04,0.34,1.1,1.7 2.1,2.5,2.7,3.2), mean=0.621, stddev=0.701], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0003,0.005 0.05,0.14,0.44,0.79,0.87 0.91,0.95,0.98,1.0), mean=0.452, stddev=0.305], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.003,0.003 0.003,0.004,0.005,0.007,0.009 0.01,0.01,0.01,0.02), mean=0.00548, stddev=0.00249], oderiv-count=84480
component name=tdnn3.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000946436, max-change=0.75, linear-params-rms=0.04583, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.96,0.96 0.98,0.99,1.0,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.04, stddev=0.0499], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.64,0.65,0.67 0.68,0.69,0.73,0.77,0.79 0.81,0.83,0.84,0.86), mean=0.732, stddev=0.0431], bias-{mean,stddev}=-0.04938,1.016, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.38e+04, self-repaired-proportion=0.12454, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,6e-06,0.0008 0.007,0.03,0.28,1.1,1.5 2.1,2.5,3.3,3.5), mean=0.583, stddev=0.722], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,7e-05,0.008 0.05,0.10,0.37,0.72,0.84 0.91,0.94,0.95,1.0), mean=0.407, stddev=0.293], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.003,0.003 0.003,0.004,0.005,0.007,0.009 0.01,0.01,0.01,0.01), mean=0.00547, stddev=0.00246], oderiv-count=59904
component name=tdnn4.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000946436, max-change=0.75, linear-params-rms=0.0456, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.93,0.94,0.96 0.98,0.99,1.0,1.1,1.1 1.1,1.1,1.1,1.3), mean=1.03, stddev=0.0457], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.64,0.65,0.67 0.68,0.70,0.72,0.76,0.78 0.80,0.82,0.84,0.87), mean=0.728, stddev=0.0408], bias-{mean,stddev}=-0.1218,0.9714, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.1e+04, self-repaired-proportion=0.135937, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0002 0.006,0.04,0.28,1.1,1.5 2.2,2.9,3.2,4.6), mean=0.605, stddev=0.784], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.003 0.03,0.13,0.37,0.74,0.87 0.91,0.93,0.94,0.98), mean=0.418, stddev=0.296], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.003 0.003,0.003,0.004,0.007,0.008 0.01,0.01,0.01,0.01), mean=0.00517, stddev=0.00231], oderiv-count=63488
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000946436, max-change=0.75, linear-params-rms=0.0457, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.95,0.96 0.97,1.0,1.0,1.1,1.1 1.1,1.1,1.2,1.2), mean=1.03, stddev=0.0453], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.66,0.67 0.68,0.70,0.73,0.76,0.78 0.80,0.83,0.84,0.86), mean=0.73, stddev=0.0399], bias-{mean,stddev}=0.08848,1.067, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.12e+04, self-repaired-proportion=0.128227, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,1e-05,0.0002 0.008,0.04,0.32,1.2,1.7 2.3,2.6,2.8,3.2), mean=0.638, stddev=0.748], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0001,0.002 0.05,0.11,0.38,0.78,0.87 0.91,0.94,0.95,1.0), mean=0.431, stddev=0.307], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.003 0.003,0.004,0.005,0.007,0.009 0.01,0.01,0.01,0.01), mean=0.00551, stddev=0.00214], oderiv-count=60928
component name=tdnn6.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn7.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000946436, max-change=0.75, linear-params-rms=0.04575, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.96,0.97 0.98,1.0,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.03, stddev=0.0421], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.64,0.65,0.66 0.68,0.70,0.73,0.76,0.78 0.80,0.82,0.83,0.86), mean=0.731, stddev=0.0409], bias-{mean,stddev}=-0.02724,1.022, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn7.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=2.76e+04, self-repaired-proportion=0.153711, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,1e-05 0.004,0.03,0.33,1.2,1.7 2.2,2.6,2.7,4.0), mean=0.629, stddev=0.753], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0001 0.03,0.10,0.43,0.74,0.86 0.89,0.96,0.98,1.0), mean=0.426, stddev=0.303], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.003 0.004,0.004,0.005,0.008,0.009 0.01,0.01,0.01,0.02), mean=0.00602, stddev=0.0024], oderiv-count=38400
component name=tdnn7.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn8.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000946436, max-change=0.75, linear-params-rms=0.04541, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.93,0.95,0.97 0.98,0.99,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.03, stddev=0.0422], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.64,0.66,0.67 0.68,0.69,0.72,0.76,0.77 0.78,0.81,0.82,0.87), mean=0.726, stddev=0.0368], bias-{mean,stddev}=-0.003123,1.066, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn8.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=2.18e+04, self-repaired-proportion=0.245192, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.0002,0.007,0.33,1.2,1.7 2.3,2.7,3.0,3.6), mean=0.653, stddev=0.78], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.003,0.05,0.40,0.76,0.86 0.91,0.96,0.97,1.0), mean=0.416, stddev=0.325], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.004,0.005,0.006,0.009,0.01 0.01,0.01,0.01,0.02), mean=0.00684, stddev=0.00238], oderiv-count=37120
component name=tdnn8.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn9.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000946436, max-change=0.75, linear-params-rms=0.04551, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.94,0.95,0.97 0.98,0.99,1.0,1.1,1.1 1.1,1.1,1.1,1.1), mean=1.03, stddev=0.0417], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.65,0.65,0.67 0.68,0.70,0.73,0.75,0.78 0.80,0.81,0.82,0.85), mean=0.727, stddev=0.0374], bias-{mean,stddev}=-0.03457,0.9975, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn9.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.84e+04, self-repaired-proportion=0.171875, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,1e-05 0.003,0.02,0.31,1.1,1.6 2.1,2.7,3.0,3.8), mean=0.612, stddev=0.728], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,5e-05 0.02,0.09,0.39,0.75,0.86 0.92,0.94,0.96,1.0), mean=0.423, stddev=0.307], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.005,0.006 0.006,0.006,0.008,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.00892, stddev=0.00278], oderiv-count=32768
component name=tdnn9.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn10.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000946436, max-change=0.75, linear-params-rms=0.04564, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.95,0.96 0.98,1.0,1.0,1.1,1.1 1.1,1.1,1.1,1.1), mean=1.03, stddev=0.0428], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.65,0.65,0.67 0.68,0.70,0.73,0.76,0.78 0.80,0.82,0.82,0.86), mean=0.729, stddev=0.039], bias-{mean,stddev}=0.06546,1.074, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn10.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.61e+04, self-repaired-proportion=0.260417, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.0008,0.02,0.35,1.4,1.8 2.2,2.6,2.9,3.3), mean=0.695, stddev=0.777], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.005,0.07,0.44,0.84,0.91 0.97,0.99,0.99,1.0), mean=0.452, stddev=0.336], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.007,0.007,0.007 0.008,0.008,0.01,0.01,0.02 0.02,0.02,0.02,0.02), mean=0.0113, stddev=0.00323], oderiv-count=22272
component name=tdnn10.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn11.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000946436, max-change=0.75, linear-params-rms=0.04583, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.93,0.94,0.96 0.98,1.0,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.04, stddev=0.0459], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.66,0.67 0.68,0.70,0.73,0.76,0.79 0.81,0.84,0.85,0.88), mean=0.732, stddev=0.0425], bias-{mean,stddev}=-0.03496,1.048, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn11.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=9.73e+03, self-repaired-proportion=0.297363, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 2e-05,0.002,0.26,1.2,1.9 2.4,2.7,2.9,4.6), mean=0.646, stddev=0.821], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.0003,0.02,0.38,0.77,0.91 0.97,0.99,1.0,1.0), mean=0.412, stddev=0.338], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.03,0.03), mean=0.0177, stddev=0.00494], oderiv-count=14848
component name=tdnn11.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnnFINAL.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000946436, max-change=0.75, linear-params-rms=0.04612, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.92,0.95,0.96 0.97,0.99,1.0,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.04, stddev=0.0569], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.65,0.65,0.67 0.68,0.70,0.73,0.77,0.80 0.82,0.86,0.86,0.93), mean=0.736, stddev=0.0479], bias-{mean,stddev}=-0.07696,0.9504, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnnFINAL.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.35e+03, self-repaired-proportion=0.339472, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 5e-05,0.002,0.20,1.3,1.8 2.3,2.7,3.5,4.4), mean=0.628, stddev=0.847], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.0007,0.02,0.35,0.74,0.89 0.96,0.99,1.0,1.0), mean=0.387, stddev=0.341], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.04,0.04 0.05,0.05,0.05,0.06), mean=0.0307, stddev=0.00955], oderiv-count=6912
component name=tdnnFINAL.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=prefinal-affine-task-0.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=256, learning-rate=0.000946436, max-change=0.75, linear-params-rms=0.06455, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.91,0.92,0.93 0.95,0.98,1.0,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.03, stddev=0.0594], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.92,0.93,0.95 0.96,0.98,1.0,1.1,1.1 1.1,1.1,1.2,1.2), mean=1.03, stddev=0.0577], bias-{mean,stddev}=-2.961e-05,1.011, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-affine-task-0.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.1e+03, self-repaired-proportion=0.343471, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 1e-05,0.006,0.29,1.3,1.7 2.2,2.3,2.5,3.2), mean=0.623, stddev=0.725], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.0002,0.04,0.43,0.88,0.96 0.99,1.0,1.0,1.0), mean=0.449, stddev=0.358], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-08,7e-08,7e-08,2e-07 9e-05,0.005,0.03,0.05,0.05 0.06,0.06,0.07,0.07), mean=0.0282, stddev=0.0202], oderiv-count=7424
component name=prefinal-affine-task-0.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output-0.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=96, learning-rate=0.000946436, max-change=1.5, linear-params-rms=0.04556, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.21,0.22,0.44 0.52,0.58,0.69,0.83,0.91 1.1,1.1,1.3,1.6), mean=0.702, stddev=0.196], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-07,9e-07,1e-06,2e-06 0.001,0.06,0.40,0.60,0.68 0.77,0.82,0.93,1.0), mean=0.359, stddev=0.265], bias-{mean,stddev}=-6.432e-08,0.01335, rank-in=20, rank-out=48, num-samples-history=2000, update-period=4, alpha=4
component name=output-0.log-softmax type=LogSoftmaxComponent, dim=96, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.01,0.03 0.06,0.07,0.08,0.11,0.13 0.15,0.22,0.28,0.28), mean=0.0928, stddev=0.0425], oderiv-count=8192
nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/8.raw MTL/exp/nnet3/multitask/9.raw 
LOG (nnet3-show-progress[5.4.217~1-8ae5]:SelectGpuId():cu-device.cc:123) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.87363 tdnn2.affine:0.479106 tdnn3.affine:0.570321 tdnn4.affine:0.516629 tdnn5.affine:0.472258 tdnn6.affine:0.439284 tdnn7.affine:0.433461 tdnn8.affine:0.436076 tdnn9.affine:0.473264 tdnn10.affine:0.511666 tdnn11.affine:0.60449 tdnnFINAL.affine:0.767053 prefinal-affine-task-0.affine:0.617696 output-0.affine:1.11742 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:25.021 tdnn2.affine:23.8763 tdnn3.affine:22.897 tdnn4.affine:23.2447 tdnn5.affine:22.7579 tdnn6.affine:23.817 tdnn7.affine:23.2751 tdnn8.affine:23.6923 tdnn9.affine:22.946 tdnn10.affine:23.8684 tdnn11.affine:23.6005 tdnnFINAL.affine:22.6183 prefinal-affine-task-0.affine:23.1298 output-0.affine:7.14291 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0350935 tdnn2.affine:0.0200787 tdnn3.affine:0.0249351 tdnn4.affine:0.0222507 tdnn5.affine:0.0207737 tdnn6.affine:0.0184607 tdnn7.affine:0.0186413 tdnn8.affine:0.0184207 tdnn9.affine:0.0206439 tdnn10.affine:0.0214598 tdnn11.affine:0.0256503 tdnnFINAL.affine:0.0339833 prefinal-affine-task-0.affine:0.0267578 output-0.affine:0.164716 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Tue Jul 24 11:14:34 UTC 2018, elapsed time 0 seconds
