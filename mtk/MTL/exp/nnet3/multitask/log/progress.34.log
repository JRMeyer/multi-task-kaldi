# nnet3-info MTL/exp/nnet3/multitask/34.raw && nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/33.raw MTL/exp/nnet3/multitask/34.raw 
# Started at Fri Jul 27 01:47:35 UTC 2018
#
nnet3-info MTL/exp/nnet3/multitask/34.raw 
num-parameters: 13891160
modulus: 1
input-node name=input dim=13
component-node name=tdnn1.affine component=tdnn1.affine input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=65 output-dim=768
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=768 output-dim=768
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=768 output-dim=768
component-node name=tdnn2.affine component=tdnn2.affine input=tdnn1.renorm input-dim=768 output-dim=768
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=768 output-dim=768
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=768 output-dim=768
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -1), Offset(tdnn2.renorm, 2)) input-dim=1536 output-dim=768
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=768 output-dim=768
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=768 output-dim=768
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -3), Offset(tdnn3.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=768 output-dim=768
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=768 output-dim=768
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -3), Offset(tdnn4.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=768 output-dim=768
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=768 output-dim=768
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.renorm, -3), Offset(tdnn5.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=768 output-dim=768
component-node name=tdnn6.renorm component=tdnn6.renorm input=tdnn6.relu input-dim=768 output-dim=768
component-node name=tdnn7.affine component=tdnn7.affine input=Append(Offset(tdnn6.renorm, -3), Offset(tdnn6.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn7.relu component=tdnn7.relu input=tdnn7.affine input-dim=768 output-dim=768
component-node name=tdnn7.renorm component=tdnn7.renorm input=tdnn7.relu input-dim=768 output-dim=768
component-node name=tdnn8.affine component=tdnn8.affine input=Append(Offset(tdnn7.renorm, -3), Offset(tdnn7.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn8.relu component=tdnn8.relu input=tdnn8.affine input-dim=768 output-dim=768
component-node name=tdnn8.renorm component=tdnn8.renorm input=tdnn8.relu input-dim=768 output-dim=768
component-node name=tdnn9.affine component=tdnn9.affine input=Append(Offset(tdnn8.renorm, -3), Offset(tdnn8.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn9.relu component=tdnn9.relu input=tdnn9.affine input-dim=768 output-dim=768
component-node name=tdnn9.renorm component=tdnn9.renorm input=tdnn9.relu input-dim=768 output-dim=768
component-node name=tdnn10.affine component=tdnn10.affine input=Append(Offset(tdnn9.renorm, -3), Offset(tdnn9.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn10.relu component=tdnn10.relu input=tdnn10.affine input-dim=768 output-dim=768
component-node name=tdnn10.renorm component=tdnn10.renorm input=tdnn10.relu input-dim=768 output-dim=768
component-node name=tdnn11.affine component=tdnn11.affine input=Append(Offset(tdnn10.renorm, -3), Offset(tdnn10.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn11.relu component=tdnn11.relu input=tdnn11.affine input-dim=768 output-dim=768
component-node name=tdnn11.renorm component=tdnn11.renorm input=tdnn11.relu input-dim=768 output-dim=768
component-node name=tdnnFINAL.affine component=tdnnFINAL.affine input=Append(Offset(tdnn11.renorm, -3), Offset(tdnn11.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnnFINAL.relu component=tdnnFINAL.relu input=tdnnFINAL.affine input-dim=768 output-dim=768
component-node name=tdnnFINAL.renorm component=tdnnFINAL.renorm input=tdnnFINAL.relu input-dim=768 output-dim=768
component-node name=prefinal-affine-task-0.affine component=prefinal-affine-task-0.affine input=tdnnFINAL.renorm input-dim=768 output-dim=768
component-node name=prefinal-affine-task-0.relu component=prefinal-affine-task-0.relu input=prefinal-affine-task-0.affine input-dim=768 output-dim=768
component-node name=prefinal-affine-task-0.renorm component=prefinal-affine-task-0.renorm input=prefinal-affine-task-0.relu input-dim=768 output-dim=768
component-node name=output-0.affine component=output-0.affine input=prefinal-affine-task-0.renorm input-dim=768 output-dim=152
component-node name=output-0.log-softmax component=output-0.log-softmax input=output-0.affine input-dim=152 output-dim=152
output-node name=output-0 input=output-0.log-softmax dim=152 objective=linear
component-node name=prefinal-affine-task-1.affine component=prefinal-affine-task-1.affine input=tdnnFINAL.renorm input-dim=768 output-dim=768
component-node name=prefinal-affine-task-1.relu component=prefinal-affine-task-1.relu input=prefinal-affine-task-1.affine input-dim=768 output-dim=768
component-node name=prefinal-affine-task-1.renorm component=prefinal-affine-task-1.renorm input=prefinal-affine-task-1.relu input-dim=768 output-dim=768
component-node name=output-1.affine component=output-1.affine input=prefinal-affine-task-1.renorm input-dim=768 output-dim=192
component-node name=output-1.log-softmax component=output-1.log-softmax input=output-1.affine input-dim=192 output-dim=192
output-node name=output-1 input=output-1.log-softmax dim=192 objective=linear
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=65, output-dim=768, learning-rate=0.000580218, max-change=0.75, linear-params-rms=0.1403, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.82,0.85,0.89 0.93,0.99,1.1,1.2,1.3 1.4,1.5,1.5,1.6), mean=1.12, stddev=0.152], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.2,3.2,3.5,3.6 3.6,3.7,3.9,4.1,4.1 4.2,4.3,4.3,4.6), mean=3.88, stddev=0.223], bias-{mean,stddev}=0.03022,1.031, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=2.1e+05, self-repaired-proportion=0.0128495, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.04,0.06,0.25,1.4,1.8 2.2,2.6,2.9,5.3), mean=0.668, stddev=0.788], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.09,0.12,0.36,0.88,0.92 0.93,0.94,0.95,0.95), mean=0.459, stddev=0.329], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002,0.002 0.003,0.003,0.003,0.004), mean=0.00173, stddev=0.000504], oderiv-count=291840
component name=tdnn1.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=768, learning-rate=0.000580218, max-change=0.75, linear-params-rms=0.03752, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.96,0.97,0.98 0.99,1.0,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.04, stddev=0.0373], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.96,0.96,0.98 0.99,1.0,1.0,1.1,1.1 1.1,1.1,1.2,1.2), mean=1.04, stddev=0.0435], bias-{mean,stddev}=0.01178,1.051, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=2e+05, self-repaired-proportion=0.00628811, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.03 0.05,0.08,0.33,0.96,1.3 1.5,1.8,2.0,2.5), mean=0.519, stddev=0.511], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.07,0.10 0.14,0.19,0.45,0.77,0.86 0.91,0.93,0.94,0.95), mean=0.479, stddev=0.272], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.002,0.002 0.002,0.002,0.002,0.003,0.003 0.003,0.003,0.003,0.004), mean=0.00211, stddev=0.000471], oderiv-count=291840
component name=tdnn2.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000580218, max-change=0.75, linear-params-rms=0.02701, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.98,0.98,1.0 1.0,1.0,1.1,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.06, stddev=0.0387], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.68,0.69,0.70 0.70,0.72,0.74,0.78,0.80 0.81,0.83,0.85,0.90), mean=0.748, stddev=0.0374], bias-{mean,stddev}=0.01778,1.008, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=1.02e+05, self-repaired-proportion=0.00247396, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.04 0.05,0.11,0.37,1.0,1.4 1.7,2.0,2.2,2.8), mean=0.568, stddev=0.547], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.08,0.08,0.10 0.13,0.21,0.41,0.69,0.81 0.86,0.91,0.92,0.94), mean=0.446, stddev=0.242], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.003,0.004 0.004,0.004,0.005,0.005), mean=0.00286, stddev=0.000689], oderiv-count=138240
component name=tdnn3.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000580218, max-change=0.75, linear-params-rms=0.02715, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.98,0.99,1.0 1.0,1.0,1.1,1.1,1.1 1.1,1.1,1.2,1.2), mean=1.06, stddev=0.0414], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.67,0.68,0.70 0.71,0.72,0.75,0.79,0.81 0.82,0.84,0.86,0.91), mean=0.751, stddev=0.0409], bias-{mean,stddev}=0.007427,1.004, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=9.45e+04, self-repaired-proportion=0.00278501, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.02,0.03,0.04 0.06,0.11,0.32,0.89,1.3 1.6,1.9,2.1,2.6), mean=0.513, stddev=0.509], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.07,0.08,0.10 0.14,0.20,0.37,0.64,0.77 0.82,0.89,0.92,0.95), mean=0.416, stddev=0.229], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.003,0.003,0.003,0.004,0.004 0.005,0.005,0.005,0.006), mean=0.00329, stddev=0.000724], oderiv-count=140544
component name=tdnn4.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000580218, max-change=0.75, linear-params-rms=0.02735, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,0.98,0.99,1.0 1.0,1.0,1.1,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.07, stddev=0.043], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.68,0.69,0.70 0.71,0.72,0.75,0.79,0.82 0.84,0.86,0.87,0.92), mean=0.757, stddev=0.0433], bias-{mean,stddev}=0.022,1.015, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=7.78e+04, self-repaired-proportion=0.0052662, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.02,0.02,0.05 0.08,0.14,0.38,0.87,1.2 1.5,1.7,1.9,2.3), mean=0.526, stddev=0.457], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.06,0.07,0.11 0.16,0.23,0.42,0.64,0.75 0.81,0.87,0.90,0.94), mean=0.436, stddev=0.216], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.003 0.003,0.003,0.004,0.004,0.005 0.005,0.005,0.005,0.006), mean=0.00373, stddev=0.000678], oderiv-count=124928
component name=tdnn5.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000580218, max-change=0.75, linear-params-rms=0.02755, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,0.99,1.0,1.0 1.0,1.0,1.1,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.08, stddev=0.045], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.68,0.69,0.70 0.71,0.73,0.76,0.80,0.82 0.83,0.85,0.86,0.91), mean=0.762, stddev=0.0415], bias-{mean,stddev}=0.04584,1.007, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=6.45e+04, self-repaired-proportion=0.00796046, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.02,0.03,0.04 0.07,0.13,0.40,0.86,1.2 1.5,1.7,1.9,2.5), mean=0.534, stddev=0.465], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.07,0.08,0.11 0.14,0.22,0.43,0.65,0.76 0.83,0.89,0.92,0.99), mean=0.441, stddev=0.225], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.003 0.003,0.004,0.004,0.005,0.005 0.006,0.006,0.006,0.006), mean=0.00431, stddev=0.000724], oderiv-count=109312
component name=tdnn6.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn7.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000580218, max-change=0.75, linear-params-rms=0.02783, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,0.99,0.99,1.0 1.0,1.0,1.1,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.09, stddev=0.0493], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.68,0.69,0.70 0.71,0.73,0.77,0.81,0.83 0.85,0.86,0.87,0.93), mean=0.77, stddev=0.0457], bias-{mean,stddev}=0.01652,0.9738, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn7.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=3.99e+04, self-repaired-proportion=0.00682929, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.02,0.03,0.05 0.08,0.13,0.36,0.82,1.1 1.5,1.8,2.0,3.7), mean=0.509, stddev=0.464], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.06,0.08,0.11 0.16,0.23,0.40,0.62,0.72 0.83,0.90,0.93,0.97), mean=0.431, stddev=0.215], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.004,0.004,0.005,0.006,0.006 0.007,0.007,0.007,0.007), mean=0.00516, stddev=0.000832], oderiv-count=84480
component name=tdnn7.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn8.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000580218, max-change=0.75, linear-params-rms=0.02801, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,0.99,0.99,1.0 1.0,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.2), mean=1.1, stddev=0.0543], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.69,0.70,0.70 0.71,0.73,0.77,0.82,0.84 0.85,0.87,0.88,0.92), mean=0.775, stddev=0.0467], bias-{mean,stddev}=-0.05806,1.063, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn8.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=5.12e+04, self-repaired-proportion=0.0310527, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0007,0.008,0.03 0.05,0.11,0.37,0.82,1.2 1.4,1.7,2.0,2.7), mean=0.508, stddev=0.463], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.004,0.02,0.07 0.11,0.19,0.41,0.65,0.76 0.82,0.89,0.92,0.96), mean=0.426, stddev=0.235], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.004,0.005,0.006,0.007,0.007 0.007,0.008,0.008,0.009), mean=0.00572, stddev=0.000951], oderiv-count=72960
component name=tdnn8.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn9.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000580218, max-change=0.75, linear-params-rms=0.02814, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.98,0.99,1.0 1.0,1.0,1.1,1.2,1.2 1.2,1.2,1.2,1.2), mean=1.1, stddev=0.0582], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.69,0.69,0.70 0.71,0.73,0.78,0.83,0.85 0.86,0.87,0.88,0.91), mean=0.778, stddev=0.0505], bias-{mean,stddev}=-0.05938,0.9981, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn9.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=4.2e+04, self-repaired-proportion=0.0427576, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0004,0.003,0.02 0.06,0.12,0.37,0.83,1.1 1.4,1.7,1.9,2.4), mean=0.497, stddev=0.444], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.002,0.01,0.06 0.12,0.20,0.41,0.64,0.75 0.84,0.90,0.93,0.98), mean=0.424, stddev=0.233], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.005,0.005 0.005,0.005,0.007,0.008,0.008 0.008,0.009,0.009,0.01), mean=0.00656, stddev=0.00111], oderiv-count=62464
component name=tdnn9.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn10.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000580218, max-change=0.75, linear-params-rms=0.02811, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,0.98,0.99,1.0 1.0,1.0,1.1,1.2,1.2 1.2,1.2,1.2,1.2), mean=1.1, stddev=0.0579], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.68,0.69,0.70 0.71,0.73,0.78,0.82,0.84 0.85,0.87,0.88,0.92), mean=0.777, stddev=0.0487], bias-{mean,stddev}=0.02919,1.027, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn10.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=2.92e+04, self-repaired-proportion=0.0609612, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,5e-05,0.002,0.01 0.04,0.11,0.38,0.88,1.2 1.5,1.8,2.0,2.4), mean=0.516, stddev=0.47], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0004,0.008,0.05 0.11,0.20,0.43,0.67,0.78 0.85,0.92,0.95,0.98), mean=0.433, stddev=0.246], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.005,0.005 0.005,0.006,0.007,0.008,0.009 0.009,0.01,0.01,0.01), mean=0.00724, stddev=0.0013], oderiv-count=41472
component name=tdnn10.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn11.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000580218, max-change=0.75, linear-params-rms=0.02806, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.97,0.98,0.99 1.0,1.0,1.1,1.2,1.2 1.2,1.2,1.2,1.2), mean=1.1, stddev=0.0615], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.69,0.69,0.70 0.71,0.73,0.78,0.82,0.84 0.86,0.87,0.88,0.92), mean=0.776, stddev=0.0483], bias-{mean,stddev}=0.03175,1.019, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn11.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=1.84e+04, self-repaired-proportion=0.105723, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,9e-05,0.0003,0.004 0.02,0.09,0.36,0.87,1.3 1.6,2.0,2.1,2.6), mean=0.516, stddev=0.514], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0005,0.002,0.02 0.06,0.18,0.40,0.67,0.80 0.89,0.94,0.97,1.0), mean=0.422, stddev=0.263], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.007,0.007 0.007,0.007,0.009,0.01,0.01 0.01,0.01,0.01,0.01), mean=0.00911, stddev=0.00166], oderiv-count=31232
component name=tdnn11.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnnFINAL.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000580218, max-change=0.75, linear-params-rms=0.02815, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.98,0.98,1.0 1.0,1.0,1.1,1.2,1.2 1.2,1.2,1.2,1.2), mean=1.1, stddev=0.0673], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.68,0.69,0.70 0.71,0.72,0.78,0.83,0.85 0.87,0.89,0.90,0.94), mean=0.778, stddev=0.055], bias-{mean,stddev}=-0.06728,0.9592, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnnFINAL.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=8.7e+03, self-repaired-proportion=0.121912, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,7e-06,0.0001,0.002 0.01,0.06,0.34,0.74,1.0 1.2,1.6,1.8,2.4), mean=0.44, stddev=0.419], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0001,0.0009,0.006 0.04,0.14,0.38,0.60,0.70 0.79,0.87,0.90,0.99), mean=0.383, stddev=0.241], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.009,0.009,0.009 0.01,0.01,0.01,0.02,0.02 0.02,0.02,0.02,0.02), mean=0.0131, stddev=0.00268], oderiv-count=15616
component name=tdnnFINAL.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=prefinal-affine-task-0.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=768, learning-rate=0.000580218, max-change=0.75, linear-params-rms=0.03804, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.95,0.96,0.97 0.99,1.0,1.1,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.05, stddev=0.0529], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.96,0.97,0.98 0.99,1.0,1.1,1.1,1.1 1.1,1.1,1.2,1.2), mean=1.05, stddev=0.0482], bias-{mean,stddev}=0.0008375,1.006, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-affine-task-0.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=3.84e+03, self-repaired-proportion=0.136482, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,3e-05,0.0006 0.005,0.04,0.30,0.71,0.89 1.0,1.2,1.3,1.6), mean=0.391, stddev=0.352], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0003,0.004 0.02,0.11,0.39,0.64,0.72 0.77,0.82,0.83,0.87), mean=0.385, stddev=0.252], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-08,2e-05,5e-05,0.0003 0.001,0.003,0.02,0.02,0.02 0.02,0.02,0.02,0.03), mean=0.0128, stddev=0.00763], oderiv-count=7424
component name=prefinal-affine-task-0.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=output-0.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=152, learning-rate=0.000580218, max-change=1.5, linear-params-rms=0.04358, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.44,0.84,0.90 0.97,1.1,1.2,1.3,1.4 1.4,1.5,1.5,1.6), mean=1.19, stddev=0.192], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-07,0.0005,0.002,0.008 0.03,0.10,0.53,0.72,0.78 0.82,0.88,0.89,1.0), mean=0.454, stddev=0.287], bias-{mean,stddev}=-4.81e-08,0.003271, rank-in=20, rank-out=76, num-samples-history=2000, update-period=4, alpha=4
component name=output-0.log-softmax type=LogSoftmaxComponent, dim=152, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.01,0.02 0.03,0.04,0.05,0.07,0.08 0.10,0.14,0.19,0.24), mean=0.057, stddev=0.031], oderiv-count=7936
component name=prefinal-affine-task-1.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=768, learning-rate=0.000580218, max-change=0.75, linear-params-rms=0.03616, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.94,0.95,0.96 0.97,0.98,1.0,1.0,1.0 1.0,1.1,1.1,1.1), mean=1, stddev=0.0264], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.95,0.96 0.97,0.98,1.0,1.0,1.0 1.0,1.1,1.1,1.1), mean=1, stddev=0.0259], bias-{mean,stddev}=-0.07005,1.031, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-affine-task-1.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=4.86e+03, self-repaired-proportion=0.164714, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,3e-05,0.0005 0.004,0.02,0.28,0.66,0.88 1.0,1.2,1.3,1.8), mean=0.366, stddev=0.351], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0002,0.003 0.02,0.07,0.45,0.73,0.83 0.87,0.92,0.94,0.98), mean=0.427, stddev=0.3], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-09,2e-06,1e-05,7e-05 0.0003,0.001,0.005,0.007,0.008 0.009,0.009,0.01,0.01), mean=0.00456, stddev=0.00293], oderiv-count=7424
component name=prefinal-affine-task-1.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=output-1.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=192, learning-rate=0.000580218, max-change=1.5, linear-params-rms=0.02173, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.07 0.07,0.07,0.07,0.91,0.98 1.0,1.1,1.1,1.1), mean=0.44, stddev=0.411], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,8e-05,0.0007,0.003 0.01,0.05,0.30,0.41,0.45 0.47,0.50,0.51,0.55), mean=0.253, stddev=0.164], bias-{mean,stddev}=2.322e-08,0.002038, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-1.log-softmax type=LogSoftmaxComponent, dim=192, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.02,0.02 0.03,0.05,0.05,0.07), mean=0.00803, stddev=0.012], oderiv-count=6912
nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/33.raw MTL/exp/nnet3/multitask/34.raw 
LOG (nnet3-show-progress[5.4.217~1-8ae5]:SelectGpuId():cu-device.cc:123) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.602109 tdnn2.affine:0.42754 tdnn3.affine:0.584687 tdnn4.affine:0.638223 tdnn5.affine:0.683781 tdnn6.affine:0.729466 tdnn7.affine:0.782873 tdnn8.affine:0.824863 tdnn9.affine:0.844832 tdnn10.affine:0.835905 tdnn11.affine:0.819089 tdnnFINAL.affine:0.833318 prefinal-affine-task-0.affine:0.519068 output-0.affine:0.467552 prefinal-affine-task-1.affine:0.205275 output-1.affine:0.197874 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:42.4264 tdnn2.affine:40.9765 tdnn3.affine:40.5167 tdnn4.affine:40.5382 tdnn5.affine:40.9065 tdnn6.affine:40.9455 tdnn7.affine:40.5252 tdnn8.affine:42.3754 tdnn9.affine:41.2563 tdnn10.affine:41.7518 tdnn11.affine:41.5592 tdnnFINAL.affine:40.5542 prefinal-affine-task-0.affine:40.3839 output-0.affine:14.8908 prefinal-affine-task-1.affine:39.8943 output-1.affine:8.34248 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0141977 tdnn2.affine:0.0104351 tdnn3.affine:0.0144338 tdnn4.affine:0.0157472 tdnn5.affine:0.0167199 tdnn6.affine:0.0178209 tdnn7.affine:0.0193247 tdnn8.affine:0.0194732 tdnn9.affine:0.020486 tdnn10.affine:0.0200288 tdnn11.affine:0.0197162 tdnnFINAL.affine:0.0205557 prefinal-affine-task-0.affine:0.0128549 output-0.affine:0.0315547 prefinal-affine-task-1.affine:0.00514558 output-1.affine:0.0239205 ]
# Accounting: time=3 threads=1
# Ended (code 0) at Fri Jul 27 01:47:38 UTC 2018, elapsed time 3 seconds
