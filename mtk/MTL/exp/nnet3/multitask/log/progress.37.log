# nnet3-info MTL/exp/nnet3/multitask/37.raw && nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/36.raw MTL/exp/nnet3/multitask/37.raw 
# Started at Fri Jul 27 01:52:57 UTC 2018
#
nnet3-info MTL/exp/nnet3/multitask/37.raw 
num-parameters: 13891160
modulus: 1
input-node name=input dim=13
component-node name=tdnn1.affine component=tdnn1.affine input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=65 output-dim=768
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=768 output-dim=768
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=768 output-dim=768
component-node name=tdnn2.affine component=tdnn2.affine input=tdnn1.renorm input-dim=768 output-dim=768
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=768 output-dim=768
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=768 output-dim=768
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -1), Offset(tdnn2.renorm, 2)) input-dim=1536 output-dim=768
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=768 output-dim=768
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=768 output-dim=768
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -3), Offset(tdnn3.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=768 output-dim=768
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=768 output-dim=768
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -3), Offset(tdnn4.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=768 output-dim=768
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=768 output-dim=768
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.renorm, -3), Offset(tdnn5.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=768 output-dim=768
component-node name=tdnn6.renorm component=tdnn6.renorm input=tdnn6.relu input-dim=768 output-dim=768
component-node name=tdnn7.affine component=tdnn7.affine input=Append(Offset(tdnn6.renorm, -3), Offset(tdnn6.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn7.relu component=tdnn7.relu input=tdnn7.affine input-dim=768 output-dim=768
component-node name=tdnn7.renorm component=tdnn7.renorm input=tdnn7.relu input-dim=768 output-dim=768
component-node name=tdnn8.affine component=tdnn8.affine input=Append(Offset(tdnn7.renorm, -3), Offset(tdnn7.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn8.relu component=tdnn8.relu input=tdnn8.affine input-dim=768 output-dim=768
component-node name=tdnn8.renorm component=tdnn8.renorm input=tdnn8.relu input-dim=768 output-dim=768
component-node name=tdnn9.affine component=tdnn9.affine input=Append(Offset(tdnn8.renorm, -3), Offset(tdnn8.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn9.relu component=tdnn9.relu input=tdnn9.affine input-dim=768 output-dim=768
component-node name=tdnn9.renorm component=tdnn9.renorm input=tdnn9.relu input-dim=768 output-dim=768
component-node name=tdnn10.affine component=tdnn10.affine input=Append(Offset(tdnn9.renorm, -3), Offset(tdnn9.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn10.relu component=tdnn10.relu input=tdnn10.affine input-dim=768 output-dim=768
component-node name=tdnn10.renorm component=tdnn10.renorm input=tdnn10.relu input-dim=768 output-dim=768
component-node name=tdnn11.affine component=tdnn11.affine input=Append(Offset(tdnn10.renorm, -3), Offset(tdnn10.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn11.relu component=tdnn11.relu input=tdnn11.affine input-dim=768 output-dim=768
component-node name=tdnn11.renorm component=tdnn11.renorm input=tdnn11.relu input-dim=768 output-dim=768
component-node name=tdnnFINAL.affine component=tdnnFINAL.affine input=Append(Offset(tdnn11.renorm, -3), Offset(tdnn11.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnnFINAL.relu component=tdnnFINAL.relu input=tdnnFINAL.affine input-dim=768 output-dim=768
component-node name=tdnnFINAL.renorm component=tdnnFINAL.renorm input=tdnnFINAL.relu input-dim=768 output-dim=768
component-node name=prefinal-affine-task-0.affine component=prefinal-affine-task-0.affine input=tdnnFINAL.renorm input-dim=768 output-dim=768
component-node name=prefinal-affine-task-0.relu component=prefinal-affine-task-0.relu input=prefinal-affine-task-0.affine input-dim=768 output-dim=768
component-node name=prefinal-affine-task-0.renorm component=prefinal-affine-task-0.renorm input=prefinal-affine-task-0.relu input-dim=768 output-dim=768
component-node name=output-0.affine component=output-0.affine input=prefinal-affine-task-0.renorm input-dim=768 output-dim=152
component-node name=output-0.log-softmax component=output-0.log-softmax input=output-0.affine input-dim=152 output-dim=152
output-node name=output-0 input=output-0.log-softmax dim=152 objective=linear
component-node name=prefinal-affine-task-1.affine component=prefinal-affine-task-1.affine input=tdnnFINAL.renorm input-dim=768 output-dim=768
component-node name=prefinal-affine-task-1.relu component=prefinal-affine-task-1.relu input=prefinal-affine-task-1.affine input-dim=768 output-dim=768
component-node name=prefinal-affine-task-1.renorm component=prefinal-affine-task-1.renorm input=prefinal-affine-task-1.relu input-dim=768 output-dim=768
component-node name=output-1.affine component=output-1.affine input=prefinal-affine-task-1.renorm input-dim=768 output-dim=192
component-node name=output-1.log-softmax component=output-1.log-softmax input=output-1.affine input-dim=192 output-dim=192
output-node name=output-1 input=output-1.log-softmax dim=192 objective=linear
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=65, output-dim=768, learning-rate=0.00053222, max-change=0.75, linear-params-rms=0.1405, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.82,0.85,0.89 0.93,0.99,1.1,1.2,1.3 1.4,1.5,1.5,1.6), mean=1.12, stddev=0.154], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.3,3.3,3.5,3.6 3.6,3.7,3.9,4.1,4.1 4.2,4.3,4.3,4.6), mean=3.89, stddev=0.222], bias-{mean,stddev}=0.03018,1.031, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=1.79e+05, self-repaired-proportion=0.00796046, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.03,0.05,0.28,1.4,1.8 2.1,2.5,3.0,5.6), mean=0.668, stddev=0.785], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.07 0.08,0.11,0.36,0.87,0.92 0.93,0.94,0.94,0.95), mean=0.462, stddev=0.335], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.003,0.003,0.003,0.003), mean=0.00163, stddev=0.000475], oderiv-count=322560
component name=tdnn1.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=768, learning-rate=0.00053222, max-change=0.75, linear-params-rms=0.03755, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.96,0.97,0.98 0.99,1.0,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.04, stddev=0.0377], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.96,0.96,0.98 0.99,1.0,1.0,1.1,1.1 1.1,1.1,1.2,1.2), mean=1.04, stddev=0.0442], bias-{mean,stddev}=0.01178,1.051, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=1.95e+05, self-repaired-proportion=0.00235215, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.02,0.03 0.04,0.07,0.33,0.93,1.3 1.5,1.8,2.0,2.8), mean=0.515, stddev=0.511], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.08,0.09 0.13,0.18,0.44,0.78,0.87 0.91,0.93,0.93,0.95), mean=0.474, stddev=0.277], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.002,0.002,0.002,0.003 0.003,0.003,0.003,0.003), mean=0.0019, stddev=0.000422], oderiv-count=276480
component name=tdnn2.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00053222, max-change=0.75, linear-params-rms=0.02705, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.98,0.98,1.0 1.0,1.0,1.1,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.06, stddev=0.0393], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.68,0.69,0.70 0.70,0.72,0.74,0.78,0.80 0.82,0.83,0.85,0.91), mean=0.749, stddev=0.038], bias-{mean,stddev}=0.01778,1.008, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=1.13e+05, self-repaired-proportion=0.00274368, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.04 0.05,0.10,0.38,0.97,1.4 1.7,2.0,2.2,2.6), mean=0.567, stddev=0.552], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.08,0.10 0.14,0.20,0.41,0.70,0.81 0.86,0.91,0.93,0.95), mean=0.444, stddev=0.244], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.002,0.003,0.004 0.004,0.004,0.004,0.005), mean=0.0027, stddev=0.000642], oderiv-count=135680
component name=tdnn3.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00053222, max-change=0.75, linear-params-rms=0.02718, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.98,0.99,1.0 1.0,1.0,1.1,1.1,1.1 1.1,1.1,1.2,1.2), mean=1.06, stddev=0.042], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.67,0.68,0.70 0.71,0.72,0.75,0.79,0.81 0.83,0.84,0.86,0.91), mean=0.752, stddev=0.0415], bias-{mean,stddev}=0.007427,1.004, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=9.91e+04, self-repaired-proportion=0.00201513, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.02,0.03,0.04 0.05,0.11,0.32,0.88,1.2 1.5,1.9,2.1,2.7), mean=0.509, stddev=0.503], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.08,0.08,0.10 0.13,0.20,0.37,0.64,0.76 0.82,0.89,0.92,0.95), mean=0.416, stddev=0.227], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.003,0.003,0.004,0.004 0.004,0.005,0.005,0.005), mean=0.00314, stddev=0.000681], oderiv-count=133632
component name=tdnn4.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00053222, max-change=0.75, linear-params-rms=0.02739, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,0.98,0.99,1.0 1.0,1.0,1.1,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.07, stddev=0.0435], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.68,0.69,0.70 0.71,0.72,0.75,0.80,0.82 0.84,0.86,0.87,0.92), mean=0.758, stddev=0.0439], bias-{mean,stddev}=0.022,1.015, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=7.78e+04, self-repaired-proportion=0.00221946, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.02,0.03,0.05 0.08,0.14,0.38,0.87,1.2 1.5,1.8,1.9,2.3), mean=0.525, stddev=0.457], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.06,0.07,0.12 0.16,0.23,0.42,0.64,0.75 0.82,0.87,0.90,0.93), mean=0.436, stddev=0.215], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.003 0.003,0.003,0.003,0.004,0.005 0.005,0.005,0.005,0.006), mean=0.00359, stddev=0.000643], oderiv-count=118784
component name=tdnn5.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00053222, max-change=0.75, linear-params-rms=0.0276, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,0.99,1.0,1.0 1.0,1.0,1.1,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.08, stddev=0.0457], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.68,0.69,0.70 0.71,0.73,0.76,0.80,0.82 0.84,0.85,0.86,0.91), mean=0.764, stddev=0.0421], bias-{mean,stddev}=0.04583,1.007, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=6.81e+04, self-repaired-proportion=0.00647615, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.02,0.03,0.05 0.07,0.13,0.41,0.88,1.2 1.5,1.7,1.9,2.4), mean=0.532, stddev=0.461], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.06,0.09,0.11 0.14,0.22,0.43,0.65,0.77 0.82,0.89,0.92,0.99), mean=0.442, stddev=0.225], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.003 0.003,0.003,0.004,0.005,0.005 0.005,0.005,0.005,0.006), mean=0.00398, stddev=0.000659], oderiv-count=102144
component name=tdnn6.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn7.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00053222, max-change=0.75, linear-params-rms=0.02789, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,0.99,1.0,1.0 1.0,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.2), mean=1.09, stddev=0.0501], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.68,0.69,0.70 0.71,0.73,0.77,0.82,0.83 0.85,0.86,0.87,0.93), mean=0.771, stddev=0.0465], bias-{mean,stddev}=0.01652,0.9738, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn7.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=5.53e+04, self-repaired-proportion=0.00810547, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.02,0.03,0.05 0.08,0.13,0.37,0.80,1.1 1.4,1.8,2.0,3.7), mean=0.506, stddev=0.457], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.06,0.07,0.12 0.16,0.23,0.41,0.62,0.72 0.82,0.89,0.93,0.97), mean=0.431, stddev=0.214], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.004 0.004,0.004,0.005,0.006,0.006 0.006,0.006,0.007,0.007), mean=0.00483, stddev=0.000765], oderiv-count=87552
component name=tdnn7.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn8.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00053222, max-change=0.75, linear-params-rms=0.02806, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,0.99,0.99,1.0 1.0,1.0,1.1,1.2,1.2 1.2,1.2,1.2,1.2), mean=1.1, stddev=0.0551], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.69,0.70,0.71 0.72,0.73,0.78,0.82,0.84 0.85,0.87,0.88,0.93), mean=0.776, stddev=0.0474], bias-{mean,stddev}=-0.05806,1.063, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn8.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=3.84e+04, self-repaired-proportion=0.0302083, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0009,0.008,0.03 0.05,0.12,0.38,0.83,1.2 1.4,1.8,2.0,2.7), mean=0.508, stddev=0.459], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.005,0.02,0.07 0.12,0.20,0.42,0.64,0.76 0.82,0.89,0.91,0.97), mean=0.428, stddev=0.234], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.004,0.005,0.005,0.006,0.007 0.007,0.007,0.008,0.008), mean=0.0055, stddev=0.000909], oderiv-count=75520
component name=tdnn8.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn9.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00053222, max-change=0.75, linear-params-rms=0.0282, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.98,0.99,1.0 1.0,1.0,1.1,1.2,1.2 1.2,1.2,1.2,1.2), mean=1.1, stddev=0.0591], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.69,0.69,0.70 0.71,0.73,0.78,0.83,0.85 0.86,0.88,0.88,0.91), mean=0.78, stddev=0.0512], bias-{mean,stddev}=-0.05938,0.9981, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn9.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=3.58e+04, self-repaired-proportion=0.0411143, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0005,0.003,0.02 0.06,0.11,0.36,0.81,1.1 1.4,1.7,2.0,2.4), mean=0.494, stddev=0.441], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.002,0.01,0.06 0.12,0.20,0.41,0.64,0.75 0.84,0.89,0.93,0.98), mean=0.424, stddev=0.232], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.005,0.005 0.005,0.005,0.006,0.007,0.008 0.008,0.008,0.009,0.009), mean=0.00628, stddev=0.00106], oderiv-count=58368
component name=tdnn9.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn10.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00053222, max-change=0.75, linear-params-rms=0.02816, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,0.98,0.99,1.0 1.0,1.0,1.1,1.2,1.2 1.2,1.2,1.2,1.2), mean=1.1, stddev=0.0588], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.68,0.69,0.70 0.71,0.73,0.78,0.83,0.84 0.86,0.87,0.88,0.92), mean=0.779, stddev=0.0494], bias-{mean,stddev}=0.02919,1.027, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn10.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=2.76e+04, self-repaired-proportion=0.0611235, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,4e-05,0.002,0.02 0.04,0.11,0.38,0.87,1.2 1.5,1.8,2.1,2.4), mean=0.513, stddev=0.469], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0003,0.009,0.05 0.10,0.20,0.43,0.67,0.78 0.85,0.92,0.95,0.98), mean=0.433, stddev=0.246], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.005,0.005 0.005,0.006,0.007,0.008,0.009 0.009,0.009,0.009,0.01), mean=0.00695, stddev=0.00124], oderiv-count=37632
component name=tdnn10.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn11.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00053222, max-change=0.75, linear-params-rms=0.02812, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.97,0.98,1.0 1.0,1.0,1.1,1.2,1.2 1.2,1.2,1.2,1.2), mean=1.1, stddev=0.0625], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.69,0.69,0.70 0.71,0.73,0.78,0.82,0.84 0.86,0.87,0.89,0.93), mean=0.778, stddev=0.049], bias-{mean,stddev}=0.03175,1.019, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn11.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=2.15e+04, self-repaired-proportion=0.108073, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,7e-05,0.0003,0.004 0.02,0.09,0.34,0.85,1.2 1.6,2.0,2.2,2.6), mean=0.512, stddev=0.511], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0005,0.001,0.02 0.06,0.17,0.40,0.66,0.80 0.89,0.94,0.97,1.0), mean=0.422, stddev=0.263], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.006,0.006 0.006,0.007,0.008,0.01,0.01 0.01,0.01,0.01,0.01), mean=0.00832, stddev=0.00152], oderiv-count=31232
component name=tdnn11.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnnFINAL.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00053222, max-change=0.75, linear-params-rms=0.0282, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,0.98,0.99,1.0 1.0,1.0,1.1,1.2,1.2 1.2,1.2,1.2,1.3), mean=1.1, stddev=0.0683], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.68,0.69,0.70 0.71,0.72,0.78,0.83,0.85 0.87,0.89,0.90,0.94), mean=0.779, stddev=0.0557], bias-{mean,stddev}=-0.06728,0.9591, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnnFINAL.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=1.18e+04, self-repaired-proportion=0.117856, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,3e-05,9e-05,0.001 0.008,0.07,0.33,0.73,1.0 1.2,1.5,1.7,2.4), mean=0.436, stddev=0.415], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,8e-05,0.0007,0.007 0.03,0.14,0.38,0.60,0.70 0.78,0.88,0.91,0.99), mean=0.383, stddev=0.241], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.008,0.008,0.009 0.009,0.01,0.01,0.01,0.02 0.02,0.02,0.02,0.02), mean=0.012, stddev=0.00243], oderiv-count=14592
component name=tdnnFINAL.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=prefinal-affine-task-0.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=768, learning-rate=0.00053222, max-change=0.75, linear-params-rms=0.03806, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.95,0.96,0.97 0.99,1.0,1.1,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.05, stddev=0.0535], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.96,0.97,0.98 0.99,1.0,1.1,1.1,1.1 1.1,1.1,1.2,1.2), mean=1.05, stddev=0.0485], bias-{mean,stddev}=0.0008208,1.006, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-affine-task-0.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=3.84e+03, self-repaired-proportion=0.136198, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,4e-05,0.0005 0.005,0.04,0.30,0.70,0.86 0.98,1.2,1.2,1.5), mean=0.381, stddev=0.341], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0003,0.003 0.02,0.10,0.38,0.63,0.71 0.76,0.80,0.82,0.86), mean=0.381, stddev=0.249], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-08,1e-05,4e-05,0.0003 0.001,0.003,0.01,0.02,0.02 0.02,0.02,0.02,0.02), mean=0.0118, stddev=0.00701], oderiv-count=7168
component name=prefinal-affine-task-0.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=output-0.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=152, learning-rate=0.00053222, max-change=1.5, linear-params-rms=0.04419, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.47,0.85,0.90 0.98,1.1,1.2,1.4,1.4 1.5,1.5,1.6,1.6), mean=1.21, stddev=0.194], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-07,0.0005,0.002,0.008 0.03,0.11,0.54,0.73,0.79 0.83,0.89,0.90,1.0), mean=0.46, stddev=0.291], bias-{mean,stddev}=-4.809e-08,0.003291, rank-in=20, rank-out=76, num-samples-history=2000, update-period=4, alpha=4
component name=output-0.log-softmax type=LogSoftmaxComponent, dim=152, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.01,0.02,0.02 0.03,0.03,0.05,0.07,0.08 0.10,0.14,0.19,0.24), mean=0.0568, stddev=0.0313], oderiv-count=6912
component name=prefinal-affine-task-1.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=768, learning-rate=0.00053222, max-change=0.75, linear-params-rms=0.03616, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.94,0.95,0.96 0.97,0.98,1.0,1.0,1.0 1.0,1.1,1.1,1.1), mean=1, stddev=0.0265], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.95,0.96 0.97,0.98,1.0,1.0,1.0 1.0,1.1,1.1,1.1), mean=1, stddev=0.026], bias-{mean,stddev}=-0.07007,1.031, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-affine-task-1.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=4.86e+03, self-repaired-proportion=0.158767, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,3e-05,0.0005 0.004,0.02,0.28,0.65,0.86 1.0,1.1,1.3,1.7), mean=0.357, stddev=0.339], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0004,0.003 0.02,0.08,0.45,0.73,0.82 0.86,0.90,0.94,0.97), mean=0.423, stddev=0.296], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-09,2e-06,1e-05,7e-05 0.0003,0.001,0.005,0.007,0.008 0.009,0.009,0.01,0.01), mean=0.00461, stddev=0.00296], oderiv-count=7168
component name=prefinal-affine-task-1.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=output-1.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=192, learning-rate=0.00053222, max-change=1.5, linear-params-rms=0.02226, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.07 0.07,0.07,0.07,0.94,1.0 1.0,1.1,1.1,1.2), mean=0.45, stddev=0.422], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,8e-05,0.0007,0.004 0.01,0.06,0.30,0.42,0.46 0.48,0.51,0.53,0.56), mean=0.259, stddev=0.167], bias-{mean,stddev}=2.555e-08,0.002035, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-1.log-softmax type=LogSoftmaxComponent, dim=192, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.02,0.02 0.03,0.05,0.05,0.07), mean=0.00807, stddev=0.012], oderiv-count=6656
nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/36.raw MTL/exp/nnet3/multitask/37.raw 
LOG (nnet3-show-progress[5.4.217~1-8ae5]:SelectGpuId():cu-device.cc:123) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.531127 tdnn2.affine:0.37404 tdnn3.affine:0.515886 tdnn4.affine:0.561441 tdnn5.affine:0.601846 tdnn6.affine:0.643396 tdnn7.affine:0.686495 tdnn8.affine:0.718879 tdnn9.affine:0.740722 tdnn10.affine:0.73054 tdnn11.affine:0.710328 tdnnFINAL.affine:0.716442 prefinal-affine-task-0.affine:0.43721 output-0.affine:0.391491 prefinal-affine-task-1.affine:0.188426 output-1.affine:0.175917 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:42.4613 tdnn2.affine:40.9941 tdnn3.affine:40.5436 tdnn4.affine:40.5662 tdnn5.affine:40.938 tdnn6.affine:40.9817 tdnn7.affine:40.5687 tdnn8.affine:42.4199 tdnn9.affine:41.3033 tdnn10.affine:41.7971 tdnn11.affine:41.601 tdnnFINAL.affine:40.5946 prefinal-affine-task-0.affine:40.3966 output-0.affine:15.0973 prefinal-affine-task-1.affine:39.8958 output-1.affine:8.54882 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.012511 tdnn2.affine:0.00912521 tdnn3.affine:0.0127268 tdnn4.affine:0.013843 tdnn5.affine:0.0147048 tdnn6.affine:0.0157037 tdnn7.affine:0.016927 tdnn8.affine:0.0169522 tdnn9.affine:0.0179399 tdnn10.affine:0.0174841 tdnn11.affine:0.0170801 tdnnFINAL.affine:0.0176541 prefinal-affine-task-0.affine:0.010824 output-0.affine:0.026049 prefinal-affine-task-1.affine:0.00472302 output-1.affine:0.0207379 ]
# Accounting: time=3 threads=1
# Ended (code 0) at Fri Jul 27 01:53:01 UTC 2018, elapsed time 3 seconds
