# nnet3-info MTL/exp/nnet3/multitask/141.raw && nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/140.raw MTL/exp/nnet3/multitask/141.raw 
# Started at Sat Jul 28 03:31:18 UTC 2018
#
nnet3-info MTL/exp/nnet3/multitask/141.raw 
num-parameters: 13897312
modulus: 1
input-node name=input dim=13
component-node name=tdnn1.affine component=tdnn1.affine input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=65 output-dim=768
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=768 output-dim=768
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=768 output-dim=768
component-node name=tdnn2.affine component=tdnn2.affine input=tdnn1.renorm input-dim=768 output-dim=768
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=768 output-dim=768
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=768 output-dim=768
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -1), Offset(tdnn2.renorm, 2)) input-dim=1536 output-dim=768
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=768 output-dim=768
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=768 output-dim=768
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -3), Offset(tdnn3.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=768 output-dim=768
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=768 output-dim=768
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -3), Offset(tdnn4.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=768 output-dim=768
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=768 output-dim=768
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.renorm, -3), Offset(tdnn5.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=768 output-dim=768
component-node name=tdnn6.renorm component=tdnn6.renorm input=tdnn6.relu input-dim=768 output-dim=768
component-node name=tdnn7.affine component=tdnn7.affine input=Append(Offset(tdnn6.renorm, -3), Offset(tdnn6.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn7.relu component=tdnn7.relu input=tdnn7.affine input-dim=768 output-dim=768
component-node name=tdnn7.renorm component=tdnn7.renorm input=tdnn7.relu input-dim=768 output-dim=768
component-node name=tdnn8.affine component=tdnn8.affine input=Append(Offset(tdnn7.renorm, -3), Offset(tdnn7.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn8.relu component=tdnn8.relu input=tdnn8.affine input-dim=768 output-dim=768
component-node name=tdnn8.renorm component=tdnn8.renorm input=tdnn8.relu input-dim=768 output-dim=768
component-node name=tdnn9.affine component=tdnn9.affine input=Append(Offset(tdnn8.renorm, -3), Offset(tdnn8.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn9.relu component=tdnn9.relu input=tdnn9.affine input-dim=768 output-dim=768
component-node name=tdnn9.renorm component=tdnn9.renorm input=tdnn9.relu input-dim=768 output-dim=768
component-node name=tdnn10.affine component=tdnn10.affine input=Append(Offset(tdnn9.renorm, -3), Offset(tdnn9.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn10.relu component=tdnn10.relu input=tdnn10.affine input-dim=768 output-dim=768
component-node name=tdnn10.renorm component=tdnn10.renorm input=tdnn10.relu input-dim=768 output-dim=768
component-node name=tdnn11.affine component=tdnn11.affine input=Append(Offset(tdnn10.renorm, -3), Offset(tdnn10.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn11.relu component=tdnn11.relu input=tdnn11.affine input-dim=768 output-dim=768
component-node name=tdnn11.renorm component=tdnn11.renorm input=tdnn11.relu input-dim=768 output-dim=768
component-node name=tdnnFINAL.affine component=tdnnFINAL.affine input=Append(Offset(tdnn11.renorm, -3), Offset(tdnn11.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnnFINAL.relu component=tdnnFINAL.relu input=tdnnFINAL.affine input-dim=768 output-dim=768
component-node name=tdnnFINAL.renorm component=tdnnFINAL.renorm input=tdnnFINAL.relu input-dim=768 output-dim=768
component-node name=prefinal-affine-task-0.affine component=prefinal-affine-task-0.affine input=tdnnFINAL.renorm input-dim=768 output-dim=768
component-node name=prefinal-affine-task-0.relu component=prefinal-affine-task-0.relu input=prefinal-affine-task-0.affine input-dim=768 output-dim=768
component-node name=prefinal-affine-task-0.renorm component=prefinal-affine-task-0.renorm input=prefinal-affine-task-0.relu input-dim=768 output-dim=768
component-node name=output-0.affine component=output-0.affine input=prefinal-affine-task-0.renorm input-dim=768 output-dim=168
component-node name=output-0.log-softmax component=output-0.log-softmax input=output-0.affine input-dim=168 output-dim=168
output-node name=output-0 input=output-0.log-softmax dim=168 objective=linear
component-node name=prefinal-affine-task-1.affine component=prefinal-affine-task-1.affine input=tdnnFINAL.renorm input-dim=768 output-dim=768
component-node name=prefinal-affine-task-1.relu component=prefinal-affine-task-1.relu input=prefinal-affine-task-1.affine input-dim=768 output-dim=768
component-node name=prefinal-affine-task-1.renorm component=prefinal-affine-task-1.renorm input=prefinal-affine-task-1.relu input-dim=768 output-dim=768
component-node name=output-1.affine component=output-1.affine input=prefinal-affine-task-1.renorm input-dim=768 output-dim=184
component-node name=output-1.log-softmax component=output-1.log-softmax input=output-1.affine input-dim=184 output-dim=184
output-node name=output-1 input=output-1.log-softmax dim=184 objective=linear
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=65, output-dim=768, learning-rate=0.000200028, max-change=0.75, linear-params-rms=0.1474, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.83,0.87,0.92 0.96,1.0,1.2,1.3,1.4 1.5,1.6,1.7,1.9), mean=1.17, stddev=0.183], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.7,3.7,3.7,3.8 3.8,3.9,4.1,4.2,4.3 4.4,4.6,4.6,4.7), mean=4.08, stddev=0.219], bias-{mean,stddev}=0.02831,1.034, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=1.59e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.03 0.05,0.07,0.32,1.3,1.8 2.1,2.8,3.1,5.8), mean=0.676, stddev=0.766], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.07,0.08 0.10,0.15,0.40,0.85,0.89 0.91,0.92,0.93,0.94), mean=0.477, stddev=0.315], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-05,8e-05,9e-05,9e-05 9e-05,0.0001,0.0001,0.0002,0.0002 0.0002,0.0002,0.0002,0.0003), mean=0.000129, stddev=3.53e-05], oderiv-count=276480
component name=tdnn1.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=768, learning-rate=0.000200028, max-change=0.75, linear-params-rms=0.03816, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.96,0.97,0.99 1.0,1.0,1.1,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.06, stddev=0.0439], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.96,0.97,0.98 0.99,1.0,1.0,1.1,1.1 1.2,1.2,1.2,1.3), mean=1.06, stddev=0.0545], bias-{mean,stddev}=0.01178,1.051, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=1.84e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.05 0.06,0.10,0.34,0.95,1.3 1.5,1.8,2.1,2.8), mean=0.523, stddev=0.508], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.11,0.12,0.14 0.16,0.22,0.42,0.72,0.82 0.87,0.90,0.91,0.93), mean=0.459, stddev=0.241], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.0001,0.0001,0.0001 0.0001,0.0001,0.0001,0.0002,0.0002 0.0002,0.0002,0.0002,0.0003), mean=0.000143, stddev=3.11e-05], oderiv-count=276480
component name=tdnn2.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000200028, max-change=0.75, linear-params-rms=0.02765, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,1.0,1.0,1.0 1.0,1.0,1.1,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.08, stddev=0.0462], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.69,0.69,0.70 0.71,0.72,0.76,0.81,0.83 0.85,0.87,0.88,0.92), mean=0.765, stddev=0.047], bias-{mean,stddev}=0.01776,1.008, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=1.1e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.04,0.05 0.08,0.15,0.41,0.98,1.3 1.6,2.0,2.1,3.0), mean=0.581, stddev=0.513], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.11,0.13 0.16,0.24,0.42,0.64,0.74 0.81,0.86,0.89,0.94), mean=0.441, stddev=0.213], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.0001,0.0001,0.0001 0.0002,0.0002,0.0002,0.0002,0.0003 0.0003,0.0003,0.0003,0.0004), mean=0.000206, stddev=4.86e-05], oderiv-count=120320
component name=tdnn3.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000200028, max-change=0.75, linear-params-rms=0.02778, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.99,1.0,1.0 1.0,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.2), mean=1.09, stddev=0.0508], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.68,0.69,0.70 0.71,0.73,0.76,0.81,0.84 0.86,0.88,0.89,0.95), mean=0.768, stddev=0.048], bias-{mean,stddev}=0.007468,1.004, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=7.6e+04, self-repaired-proportion=0.000157828, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.04,0.06 0.08,0.14,0.41,0.88,1.3 1.5,1.9,2.0,2.4), mean=0.55, stddev=0.481], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.09,0.12 0.15,0.22,0.42,0.62,0.73 0.81,0.86,0.89,0.92), mean=0.43, stddev=0.212], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0002,0.0002,0.0002 0.0002,0.0002,0.0002,0.0003,0.0003 0.0003,0.0004,0.0004,0.0005), mean=0.000243, stddev=5.31e-05], oderiv-count=126720
component name=tdnn4.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000200028, max-change=0.75, linear-params-rms=0.02797, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,1.0,1.0,1.0 1.0,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.2), mean=1.1, stddev=0.051], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.69,0.70,0.71 0.71,0.73,0.77,0.82,0.84 0.86,0.89,0.90,0.99), mean=0.774, stddev=0.0491], bias-{mean,stddev}=0.02203,1.014, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=7.17e+04, self-repaired-proportion=4.34028e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.04,0.06 0.09,0.17,0.41,0.93,1.2 1.5,1.8,2.0,2.6), mean=0.556, stddev=0.461], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.09,0.10,0.13 0.17,0.25,0.43,0.64,0.74 0.80,0.86,0.90,0.94), mean=0.445, stddev=0.206], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0002,0.0002,0.0002 0.0002,0.0002,0.0003,0.0003,0.0003 0.0004,0.0004,0.0004,0.0005), mean=0.000279, stddev=5.12e-05], oderiv-count=94208
component name=tdnn5.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000200028, max-change=0.75, linear-params-rms=0.02822, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,1.0,1.0,1.0 1.0,1.1,1.1,1.1,1.2 1.2,1.2,1.2,1.2), mean=1.1, stddev=0.0498], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.69,0.70,0.71 0.72,0.73,0.78,0.82,0.84 0.86,0.88,0.89,0.93), mean=0.781, stddev=0.0482], bias-{mean,stddev}=0.04579,1.007, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=6.27e+04, self-repaired-proportion=3.94571e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.04,0.08 0.12,0.18,0.40,0.85,1.2 1.5,1.8,2.1,2.7), mean=0.542, stddev=0.451], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.08,0.10,0.15 0.19,0.26,0.42,0.63,0.73 0.80,0.86,0.89,0.93), mean=0.443, stddev=0.199], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0002,0.0002,0.0003 0.0003,0.0003,0.0003,0.0004,0.0004 0.0004,0.0004,0.0005,0.0006), mean=0.000329, stddev=5.16e-05], oderiv-count=105728
component name=tdnn6.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn7.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000200028, max-change=0.75, linear-params-rms=0.02846, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,1.0,1.0,1.0 1.0,1.1,1.1,1.2,1.2 1.2,1.2,1.2,1.3), mean=1.11, stddev=0.0522], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.69,0.70,0.71 0.73,0.74,0.79,0.83,0.85 0.87,0.89,0.90,0.98), mean=0.787, stddev=0.0487], bias-{mean,stddev}=0.01654,0.9737, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn7.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=4.92e+04, self-repaired-proportion=0.00376548, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.04,0.06,0.09 0.12,0.18,0.40,0.83,1.1 1.4,1.8,2.0,3.4), mean=0.54, stddev=0.451], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.09,0.12,0.17 0.20,0.27,0.42,0.63,0.73 0.80,0.87,0.91,1.0), mean=0.447, stddev=0.195], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.0003,0.0003,0.0003 0.0003,0.0003,0.0004,0.0004,0.0004 0.0005,0.0005,0.0005,0.0005), mean=0.000372, stddev=5.58e-05], oderiv-count=72192
component name=tdnn7.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn8.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000200028, max-change=0.75, linear-params-rms=0.02867, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,1.0,1.0,1.0 1.0,1.1,1.1,1.2,1.2 1.2,1.2,1.2,1.3), mean=1.12, stddev=0.0612], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.70,0.71,0.72 0.73,0.75,0.79,0.84,0.86 0.88,0.90,0.90,0.96), mean=0.793, stddev=0.0497], bias-{mean,stddev}=-0.05805,1.063, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn8.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=4.61e+04, self-repaired-proportion=0.00335537, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.02,0.03,0.05 0.08,0.15,0.37,0.87,1.2 1.5,1.9,2.2,2.7), mean=0.534, stddev=0.491], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.06,0.07,0.11 0.15,0.23,0.41,0.62,0.75 0.83,0.90,0.92,0.95), mean=0.431, stddev=0.22], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.0003,0.0003,0.0003 0.0004,0.0004,0.0004,0.0005,0.0005 0.0006,0.0006,0.0006,0.0007), mean=0.000445, stddev=6.96e-05], oderiv-count=71680
component name=tdnn8.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn9.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000200028, max-change=0.75, linear-params-rms=0.0289, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.99,1.0,1.0 1.0,1.1,1.1,1.2,1.2 1.2,1.2,1.3,1.3), mean=1.13, stddev=0.0657], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.69,0.70,0.71 0.72,0.74,0.80,0.85,0.87 0.89,0.91,0.93,0.97), mean=0.799, stddev=0.0576], bias-{mean,stddev}=-0.05935,0.998, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn9.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=3.58e+04, self-repaired-proportion=0.0132068, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,0.01,0.02,0.05 0.08,0.15,0.39,0.81,1.1 1.4,1.7,1.9,2.3), mean=0.509, stddev=0.433], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,0.04,0.06,0.11 0.16,0.24,0.43,0.62,0.73 0.80,0.87,0.91,0.97), mean=0.433, stddev=0.211], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0004,0.0004,0.0004 0.0004,0.0004,0.0005,0.0006,0.0006 0.0007,0.0007,0.0007,0.0008), mean=0.000529, stddev=8.4e-05], oderiv-count=53248
component name=tdnn9.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn10.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000200028, max-change=0.75, linear-params-rms=0.02887, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,0.99,1.0,1.0 1.0,1.1,1.1,1.2,1.2 1.2,1.2,1.3,1.3), mean=1.13, stddev=0.0663], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.69,0.70,0.71 0.72,0.74,0.80,0.85,0.87 0.89,0.90,0.91,0.95), mean=0.798, stddev=0.0556], bias-{mean,stddev}=0.02917,1.027, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn10.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=2.69e+04, self-repaired-proportion=0.0187826, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-06,0.008,0.02,0.04 0.07,0.15,0.37,0.85,1.2 1.5,1.8,2.1,2.8), mean=0.524, stddev=0.469], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-05,0.03,0.05,0.08 0.14,0.23,0.42,0.64,0.75 0.83,0.91,0.94,0.99), mean=0.438, stddev=0.225], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0004,0.0004,0.0005 0.0005,0.0005,0.0006,0.0007,0.0007 0.0008,0.0008,0.0008,0.0009), mean=0.000621, stddev=0.000102], oderiv-count=36864
component name=tdnn10.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn11.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000200028, max-change=0.75, linear-params-rms=0.02895, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.97,0.98,1.0 1.0,1.1,1.1,1.2,1.2 1.2,1.3,1.3,1.3), mean=1.13, stddev=0.0776], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.69,0.70,0.71 0.72,0.74,0.80,0.85,0.87 0.89,0.91,0.92,0.96), mean=0.8, stddev=0.0562], bias-{mean,stddev}=0.03175,1.019, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn11.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=1.95e+04, self-repaired-proportion=0.0671875, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0003,0.002,0.01 0.04,0.10,0.37,0.84,1.2 1.6,1.9,2.2,3.3), mean=0.522, stddev=0.517], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.002,0.009,0.05 0.09,0.19,0.41,0.65,0.78 0.87,0.95,0.96,1.0), mean=0.427, stddev=0.249], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0005,0.0005,0.0005 0.0006,0.0006,0.0008,0.0009,0.0009 0.001,0.001,0.001,0.001), mean=0.000766, stddev=0.00014], oderiv-count=26624
component name=tdnn11.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnnFINAL.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.000200028, max-change=0.75, linear-params-rms=0.02916, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.97,0.98,1.0 1.0,1.0,1.1,1.2,1.2 1.3,1.3,1.3,1.3), mean=1.14, stddev=0.0887], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.68,0.69,0.70 0.72,0.73,0.81,0.87,0.89 0.91,0.93,0.95,0.99), mean=0.805, stddev=0.0681], bias-{mean,stddev}=-0.06731,0.9591, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnnFINAL.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=7.68e+03, self-repaired-proportion=0.0921689, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,7e-06,0.0003,0.003 0.02,0.08,0.31,0.69,0.96 1.2,1.7,1.8,2.5), mean=0.418, stddev=0.418], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0003,0.001,0.01 0.06,0.15,0.36,0.58,0.68 0.77,0.87,0.91,0.98), mean=0.37, stddev=0.231], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0008,0.0008,0.0008 0.0009,0.0009,0.001,0.001,0.001 0.002,0.002,0.002,0.002), mean=0.00115, stddev=0.000219], oderiv-count=13568
component name=tdnnFINAL.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=prefinal-affine-task-0.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=768, learning-rate=0.000200028, max-change=0.75, linear-params-rms=0.03885, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.95,0.96,0.97 0.99,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.07, stddev=0.0718], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.96,0.97,0.98 0.99,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.07, stddev=0.0621], bias-{mean,stddev}=0.0006783,1.006, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-affine-task-0.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=3.58e+03, self-repaired-proportion=0.13099, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,2e-05,0.0002,0.001 0.006,0.04,0.31,0.63,0.77 0.88,0.98,1.0,1.1), mean=0.352, stddev=0.291], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0003,0.0008,0.006 0.03,0.11,0.37,0.58,0.66 0.70,0.73,0.76,0.80), mean=0.364, stddev=0.226], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-10,7e-07,4e-06,1e-05 5e-05,0.0002,0.0007,0.0008,0.0009 0.001,0.001,0.001,0.002), mean=0.000561, stddev=0.000333], oderiv-count=6912
component name=prefinal-affine-task-0.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=output-0.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=168, learning-rate=0.000200028, max-change=1.5, linear-params-rms=0.0518, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.92,1.1 1.2,1.3,1.4,1.6,1.7 1.8,1.8,1.8,2.1), mean=1.41, stddev=0.248], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-07,0.0005,0.002,0.009 0.03,0.14,0.67,0.90,0.97 1.0,1.1,1.2,1.3), mean=0.568, stddev=0.358], bias-{mean,stddev}=2.241e-07,0.003969, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-0.log-softmax type=LogSoftmaxComponent, dim=168, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.01,0.02 0.03,0.03,0.05,0.07,0.08 0.10,0.13,0.15,0.27), mean=0.053, stddev=0.0317], oderiv-count=6400
component name=prefinal-affine-task-1.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=768, learning-rate=0.000200028, max-change=0.75, linear-params-rms=0.03653, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.94,0.95,0.96 0.97,0.99,1.0,1.0,1.1 1.1,1.1,1.1,1.2), mean=1.01, stddev=0.0324], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.94,0.95,0.97 0.97,0.99,1.0,1.0,1.0 1.1,1.1,1.1,1.1), mean=1.01, stddev=0.0288], bias-{mean,stddev}=-0.07034,1.031, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-affine-task-1.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=2.05e+03, self-repaired-proportion=0.150014, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0007 0.007,0.02,0.24,0.48,0.59 0.67,0.77,0.81,0.94), mean=0.267, stddev=0.226], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.003 0.03,0.07,0.40,0.63,0.71 0.76,0.79,0.82,0.90), mean=0.377, stddev=0.255], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-10,1e-07,4e-06,2e-05 8e-05,0.0002,0.001,0.002,0.002 0.002,0.002,0.002,0.002), mean=0.00102, stddev=0.000627], oderiv-count=6656
component name=prefinal-affine-task-1.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=output-1.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=184, learning-rate=0.000200028, max-change=1.5, linear-params-rms=0.03033, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.07 0.07,0.07,0.07,1.3,1.5 1.6,1.6,1.6,1.7), mean=0.576, stddev=0.612], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,1e-05,0.001,0.006 0.03,0.07,0.39,0.56,0.60 0.64,0.68,0.69,0.79), mean=0.348, stddev=0.219], bias-{mean,stddev}=-5.427e-07,0.002226, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-1.log-softmax type=LogSoftmaxComponent, dim=184, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.01,0.03 0.03,0.04,0.05,0.06), mean=0.00808, stddev=0.0123], oderiv-count=6656
nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/140.raw MTL/exp/nnet3/multitask/141.raw 
LOG (nnet3-show-progress[5.4.224~1-d4d9]:SelectGpuId():cu-device.cc:123) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.4.224~1-d4d9]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.0245192 tdnn2.affine:0.0121675 tdnn3.affine:0.0154399 tdnn4.affine:0.0166575 tdnn5.affine:0.0175643 tdnn6.affine:0.0187748 tdnn7.affine:0.019934 tdnn8.affine:0.021062 tdnn9.affine:0.0226056 tdnn10.affine:0.022755 tdnn11.affine:0.0228507 tdnnFINAL.affine:0.0231703 prefinal-affine-task-0.affine:0.00795148 output-0.affine:0.00750787 prefinal-affine-task-1.affine:0.0142851 output-1.affine:0.00903156 ]
LOG (nnet3-show-progress[5.4.224~1-d4d9]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:43.6575 tdnn2.affine:41.3173 tdnn3.affine:41.0191 tdnn4.affine:41.037 tdnn5.affine:41.3978 tdnn6.affine:41.4741 tdnn7.affine:41.0372 tdnn8.affine:42.8904 tdnn9.affine:41.8643 tdnn10.affine:42.3624 tdnn11.affine:42.2652 tdnnFINAL.affine:41.3866 prefinal-affine-task-0.affine:40.8305 output-0.affine:18.6065 prefinal-affine-task-1.affine:40.0903 output-1.affine:11.4015 ]
LOG (nnet3-show-progress[5.4.224~1-d4d9]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.000561621 tdnn2.affine:0.000294489 tdnn3.affine:0.000376407 tdnn4.affine:0.000405915 tdnn5.affine:0.00042428 tdnn6.affine:0.000452689 tdnn7.affine:0.000485756 tdnn8.affine:0.000491068 tdnn9.affine:0.000539976 tdnn10.affine:0.000537153 tdnn11.affine:0.000540653 tdnnFINAL.affine:0.000559851 prefinal-affine-task-0.affine:0.000194743 output-0.affine:0.000403568 prefinal-affine-task-1.affine:0.000356323 output-1.affine:0.00079242 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Sat Jul 28 03:31:19 UTC 2018, elapsed time 1 seconds
