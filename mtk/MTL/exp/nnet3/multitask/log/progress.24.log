# nnet3-info MTL/exp/nnet3/multitask/24.raw && nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/23.raw MTL/exp/nnet3/multitask/24.raw 
# Started at Tue Jul 24 11:16:51 UTC 2018
#
nnet3-info MTL/exp/nnet3/multitask/24.raw 
num-parameters: 1486432
modulus: 1
input-node name=input dim=13
component-node name=tdnn1.affine component=tdnn1.affine input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=65 output-dim=256
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=256 output-dim=256
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=256 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=tdnn1.renorm input-dim=256 output-dim=256
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=256 output-dim=256
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=256 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -1), Offset(tdnn2.renorm, 2)) input-dim=512 output-dim=256
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=256 output-dim=256
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=256 output-dim=256
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -3), Offset(tdnn3.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=256 output-dim=256
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=256 output-dim=256
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -3), Offset(tdnn4.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.renorm, -3), Offset(tdnn5.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=256 output-dim=256
component-node name=tdnn6.renorm component=tdnn6.renorm input=tdnn6.relu input-dim=256 output-dim=256
component-node name=tdnn7.affine component=tdnn7.affine input=Append(Offset(tdnn6.renorm, -3), Offset(tdnn6.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn7.relu component=tdnn7.relu input=tdnn7.affine input-dim=256 output-dim=256
component-node name=tdnn7.renorm component=tdnn7.renorm input=tdnn7.relu input-dim=256 output-dim=256
component-node name=tdnn8.affine component=tdnn8.affine input=Append(Offset(tdnn7.renorm, -3), Offset(tdnn7.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn8.relu component=tdnn8.relu input=tdnn8.affine input-dim=256 output-dim=256
component-node name=tdnn8.renorm component=tdnn8.renorm input=tdnn8.relu input-dim=256 output-dim=256
component-node name=tdnn9.affine component=tdnn9.affine input=Append(Offset(tdnn8.renorm, -3), Offset(tdnn8.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn9.relu component=tdnn9.relu input=tdnn9.affine input-dim=256 output-dim=256
component-node name=tdnn9.renorm component=tdnn9.renorm input=tdnn9.relu input-dim=256 output-dim=256
component-node name=tdnn10.affine component=tdnn10.affine input=Append(Offset(tdnn9.renorm, -3), Offset(tdnn9.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn10.relu component=tdnn10.relu input=tdnn10.affine input-dim=256 output-dim=256
component-node name=tdnn10.renorm component=tdnn10.renorm input=tdnn10.relu input-dim=256 output-dim=256
component-node name=tdnn11.affine component=tdnn11.affine input=Append(Offset(tdnn10.renorm, -3), Offset(tdnn10.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn11.relu component=tdnn11.relu input=tdnn11.affine input-dim=256 output-dim=256
component-node name=tdnn11.renorm component=tdnn11.renorm input=tdnn11.relu input-dim=256 output-dim=256
component-node name=tdnnFINAL.affine component=tdnnFINAL.affine input=Append(Offset(tdnn11.renorm, -3), Offset(tdnn11.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnnFINAL.relu component=tdnnFINAL.relu input=tdnnFINAL.affine input-dim=256 output-dim=256
component-node name=tdnnFINAL.renorm component=tdnnFINAL.renorm input=tdnnFINAL.relu input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.affine component=prefinal-affine-task-0.affine input=tdnnFINAL.renorm input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.relu component=prefinal-affine-task-0.relu input=prefinal-affine-task-0.affine input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.renorm component=prefinal-affine-task-0.renorm input=prefinal-affine-task-0.relu input-dim=256 output-dim=256
component-node name=output-0.affine component=output-0.affine input=prefinal-affine-task-0.renorm input-dim=256 output-dim=96
component-node name=output-0.log-softmax component=output-0.log-softmax input=output-0.affine input-dim=96 output-dim=96
output-node name=output-0 input=output-0.log-softmax dim=96 objective=linear
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=65, output-dim=256, learning-rate=0.000399109, max-change=0.75, linear-params-rms=0.1511, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.88,0.89,0.92 0.95,1.0,1.2,1.4,1.5 1.6,1.7,1.7,1.8), mean=1.2, stddev=0.211], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.0,2.0,2.0 2.1,2.2,2.3,2.7,2.8 2.8,2.9,3.0,3.1), mean=2.4, stddev=0.268], bias-{mean,stddev}=0.01711,1.101, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.08e+05, self-repaired-proportion=0.0375434, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.04,0.07,0.32,1.5,2.1 2.7,3.2,3.8,5.5), mean=0.781, stddev=0.946], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.07 0.08,0.12,0.34,0.83,0.92 0.94,0.95,0.95,0.97), mean=0.445, stddev=0.317], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.004 0.004,0.005,0.006,0.008,0.009 0.01,0.01,0.01,0.01), mean=0.00635, stddev=0.00183], oderiv-count=138240
component name=tdnn1.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=256, learning-rate=0.000399109, max-change=0.75, linear-params-rms=0.06502, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.90,0.91,0.94 0.96,0.99,1.0,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.04, stddev=0.0595], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.92,0.92,0.94 0.96,0.98,1.0,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.04, stddev=0.0612], bias-{mean,stddev}=0.034,1.089, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.08e+05, self-repaired-proportion=0.0395508, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.008,0.01,0.02 0.03,0.07,0.32,0.86,1.2 1.4,1.6,1.9,3.4), mean=0.486, stddev=0.508], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.05,0.07 0.10,0.19,0.46,0.74,0.85 0.92,0.94,0.95,0.98), mean=0.46, stddev=0.269], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.006,0.007 0.007,0.007,0.009,0.01,0.01 0.02,0.02,0.02,0.02), mean=0.00976, stddev=0.00274], oderiv-count=138240
component name=tdnn2.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000399109, max-change=0.75, linear-params-rms=0.04719, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.97,0.98 0.99,1.0,1.1,1.1,1.1 1.2,1.2,1.2,1.3), mean=1.07, stddev=0.0613], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.65,0.66,0.67 0.69,0.71,0.75,0.79,0.82 0.85,0.87,0.89,0.93), mean=0.753, stddev=0.0514], bias-{mean,stddev}=0.07206,0.9826, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.1e+04, self-repaired-proportion=0.046503, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-06,0.0004,0.006,0.01 0.03,0.09,0.38,1.0,1.4 1.9,2.2,2.3,2.7), mean=0.594, stddev=0.599], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,0.004,0.03,0.06 0.10,0.19,0.43,0.73,0.82 0.89,0.92,0.96,0.99), mean=0.459, stddev=0.268], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.007,0.007 0.008,0.009,0.01,0.02,0.02 0.02,0.02,0.03,0.03), mean=0.0121, stddev=0.00431], oderiv-count=74240
component name=tdnn3.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000399109, max-change=0.75, linear-params-rms=0.04727, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.96,0.98 0.99,1.0,1.1,1.1,1.1 1.2,1.2,1.2,1.3), mean=1.07, stddev=0.0643], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.66,0.68 0.69,0.71,0.75,0.80,0.83 0.85,0.88,0.89,0.92), mean=0.754, stddev=0.055], bias-{mean,stddev}=-0.04936,1.016, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=3.69e+04, self-repaired-proportion=0.0442023, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0006,0.003,0.02 0.03,0.06,0.33,1.0,1.4 1.8,2.1,2.7,3.1), mean=0.562, stddev=0.624], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.004,0.02,0.06 0.09,0.15,0.41,0.68,0.80 0.87,0.90,0.94,1.0), mean=0.421, stddev=0.263], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.007,0.007 0.008,0.009,0.01,0.02,0.02 0.02,0.02,0.03,0.03), mean=0.0124, stddev=0.0045], oderiv-count=62208
component name=tdnn4.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000399109, max-change=0.75, linear-params-rms=0.04696, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.94,0.94,0.97 0.99,1.0,1.1,1.1,1.1 1.2,1.2,1.2,1.3), mean=1.06, stddev=0.06], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.66,0.67,0.68 0.69,0.71,0.74,0.79,0.83 0.85,0.87,0.89,0.93), mean=0.75, stddev=0.0519], bias-{mean,stddev}=-0.1218,0.9712, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=3.69e+04, self-repaired-proportion=0.0705078, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,7e-06,0.0005,0.008 0.02,0.08,0.32,0.98,1.5 2.0,2.7,2.9,3.8), mean=0.582, stddev=0.687], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,5e-05,0.005,0.04 0.07,0.17,0.40,0.71,0.83 0.89,0.93,0.94,0.98), mean=0.429, stddev=0.273], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.006,0.007 0.008,0.008,0.01,0.01,0.02 0.02,0.02,0.03,0.03), mean=0.0119, stddev=0.00434], oderiv-count=55296
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000399109, max-change=0.75, linear-params-rms=0.04699, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.95,0.96,0.97 0.99,1.0,1.1,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.06, stddev=0.0593], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.66,0.67,0.68 0.69,0.71,0.74,0.79,0.81 0.85,0.87,0.88,0.91), mean=0.75, stddev=0.0506], bias-{mean,stddev}=0.08842,1.067, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.48e+04, self-repaired-proportion=0.0875822, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,2e-05,0.0005,0.006 0.02,0.06,0.38,1.1,1.6 2.1,2.3,2.4,3.2), mean=0.615, stddev=0.658], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0002,0.004,0.03 0.07,0.15,0.41,0.75,0.84 0.90,0.93,0.95,0.98), mean=0.447, stddev=0.289], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.007,0.007 0.008,0.009,0.01,0.02,0.02 0.02,0.02,0.02,0.03), mean=0.0121, stddev=0.00403], oderiv-count=57344
component name=tdnn6.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn7.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000399109, max-change=0.75, linear-params-rms=0.04692, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.97,0.98 1.0,1.0,1.1,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.06, stddev=0.0535], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.66,0.67 0.69,0.71,0.75,0.79,0.82 0.83,0.85,0.86,0.91), mean=0.749, stddev=0.0499], bias-{mean,stddev}=-0.0273,1.021, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn7.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=2.76e+04, self-repaired-proportion=0.0854048, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,4e-05,0.001 0.02,0.06,0.32,1.2,1.5 2.0,2.2,2.6,3.2), mean=0.608, stddev=0.66], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0006,0.009 0.08,0.16,0.43,0.74,0.84 0.88,0.93,0.96,0.97), mean=0.444, stddev=0.28], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.007,0.008,0.008 0.009,0.009,0.01,0.02,0.02 0.02,0.02,0.02,0.03), mean=0.0128, stddev=0.00415], oderiv-count=36864
component name=tdnn7.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn8.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000399109, max-change=0.75, linear-params-rms=0.04657, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.95,0.97 0.98,1.0,1.0,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.05, stddev=0.056], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.66,0.66,0.68 0.69,0.70,0.74,0.78,0.80 0.82,0.84,0.86,0.91), mean=0.744, stddev=0.0463], bias-{mean,stddev}=-0.00317,1.066, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn8.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=2.3e+04, self-repaired-proportion=0.143311, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,6e-05 0.007,0.02,0.36,1.1,1.6 2.0,2.5,2.7,3.4), mean=0.619, stddev=0.695], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0006 0.03,0.08,0.42,0.75,0.83 0.88,0.94,0.98,0.99), mean=0.422, stddev=0.304], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.009,0.009,0.01 0.01,0.01,0.01,0.02,0.02 0.02,0.02,0.02,0.03), mean=0.0146, stddev=0.00418], oderiv-count=33280
component name=tdnn8.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn9.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000399109, max-change=0.75, linear-params-rms=0.04677, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.95,0.96,0.98 0.99,1.0,1.1,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.06, stddev=0.0533], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.65,0.66,0.68 0.69,0.70,0.74,0.79,0.81 0.83,0.86,0.87,0.90), mean=0.747, stddev=0.0485], bias-{mean,stddev}=-0.03467,0.9973, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn9.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=2.15e+04, self-repaired-proportion=0.124099, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.001 0.008,0.05,0.35,1.1,1.5 1.9,2.3,2.7,3.6), mean=0.594, stddev=0.658], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.007 0.04,0.12,0.42,0.74,0.82 0.89,0.93,0.96,0.99), mean=0.429, stddev=0.286], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.02,0.02,0.03 0.03,0.03,0.03,0.03), mean=0.0185, stddev=0.00484], oderiv-count=25600
component name=tdnn9.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn10.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000399109, max-change=0.75, linear-params-rms=0.04704, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.95,0.97 0.98,1.0,1.1,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.06, stddev=0.0562], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.65,0.66,0.68 0.69,0.71,0.75,0.79,0.82 0.84,0.86,0.88,0.90), mean=0.751, stddev=0.0506], bias-{mean,stddev}=0.06531,1.074, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn10.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.61e+04, self-repaired-proportion=0.169567, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0001 0.004,0.04,0.39,1.3,1.7 2.0,2.3,2.5,3.3), mean=0.653, stddev=0.684], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.001 0.02,0.11,0.46,0.79,0.86 0.93,0.97,0.98,1.0), mean=0.454, stddev=0.31], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.03,0.04,0.04), mean=0.0231, stddev=0.00553], oderiv-count=23040
component name=tdnn10.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn11.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000399109, max-change=0.75, linear-params-rms=0.04747, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.93,0.96,0.97 0.99,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.2), mean=1.07, stddev=0.0638], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.66,0.67 0.69,0.71,0.75,0.80,0.83 0.86,0.88,0.91,0.95), mean=0.758, stddev=0.0556], bias-{mean,stddev}=-0.0351,1.048, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn11.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.08e+04, self-repaired-proportion=0.212158, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,5e-06 0.0004,0.02,0.33,1.1,1.7 2.2,2.3,2.6,3.6), mean=0.598, stddev=0.7], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,9e-05 0.003,0.07,0.38,0.71,0.87 0.94,0.98,1.0,1.0), mean=0.415, stddev=0.311], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.03,0.04,0.05 0.05,0.05,0.06,0.06), mean=0.0341, stddev=0.00844], oderiv-count=14336
component name=tdnn11.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnnFINAL.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000399109, max-change=0.75, linear-params-rms=0.04822, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.92,0.96,0.97 0.98,1.0,1.1,1.2,1.2 1.2,1.2,1.3,1.3), mean=1.09, stddev=0.0831], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.65,0.66,0.67 0.69,0.71,0.76,0.83,0.86 0.89,0.92,0.93,0.99), mean=0.768, stddev=0.0684], bias-{mean,stddev}=-0.07725,0.9501, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnnFINAL.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.35e+03, self-repaired-proportion=0.227252, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.0004,0.02,0.28,1.1,1.5 2.0,2.3,2.8,3.6), mean=0.564, stddev=0.69], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.003,0.05,0.36,0.70,0.83 0.88,0.97,0.98,1.0), mean=0.386, stddev=0.306], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.04,0.05,0.07,0.08 0.08,0.09,0.09,0.10), mean=0.0538, stddev=0.015], oderiv-count=6656
component name=tdnnFINAL.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=prefinal-affine-task-0.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=256, learning-rate=0.000399109, max-change=0.75, linear-params-rms=0.06726, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.92,0.93,0.95 0.98,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.07, stddev=0.0772], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.92,0.94,0.96 0.97,1.0,1.1,1.2,1.2 1.2,1.2,1.3,1.3), mean=1.07, stddev=0.0825], bias-{mean,stddev}=-0.001087,1.01, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-affine-task-0.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.35e+03, self-repaired-proportion=0.168906, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.0007,0.04,0.33,1.0,1.3 1.5,1.8,1.8,2.3), mean=0.512, stddev=0.517], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.005,0.11,0.42,0.74,0.87 0.91,0.94,0.95,0.97), mean=0.431, stddev=0.301], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-08,8e-08,1e-07,2e-05 0.001,0.01,0.05,0.07,0.08 0.09,0.09,0.10,0.10), mean=0.046, stddev=0.0291], oderiv-count=6656
component name=prefinal-affine-task-0.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output-0.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=96, learning-rate=0.000399109, max-change=1.5, linear-params-rms=0.06191, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.23,0.25,0.69 0.79,0.86,0.96,1.1,1.2 1.3,1.4,1.5,1.7), mean=0.969, stddev=0.204], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-07,1e-06,2e-06,0.0002 0.01,0.12,0.58,0.81,0.90 0.97,1.1,1.1,1.2), mean=0.508, stddev=0.332], bias-{mean,stddev}=-6.328e-08,0.01379, rank-in=20, rank-out=48, num-samples-history=2000, update-period=4, alpha=4
component name=output-0.log-softmax type=LogSoftmaxComponent, dim=96, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.01,0.03 0.06,0.07,0.09,0.11,0.13 0.15,0.24,0.26,0.27), mean=0.0926, stddev=0.0419], oderiv-count=7168
nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/23.raw MTL/exp/nnet3/multitask/24.raw 
LOG (nnet3-show-progress[5.4.217~1-8ae5]:SelectGpuId():cu-device.cc:123) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.498924 tdnn2.affine:0.311956 tdnn3.affine:0.408479 tdnn4.affine:0.396892 tdnn5.affine:0.371009 tdnn6.affine:0.343863 tdnn7.affine:0.325726 tdnn8.affine:0.330582 tdnn9.affine:0.365317 tdnn10.affine:0.395714 tdnn11.affine:0.45141 tdnnFINAL.affine:0.51291 prefinal-affine-task-0.affine:0.379332 output-0.affine:0.453575 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:26.2686 tdnn2.affine:24.0993 tdnn3.affine:23.2445 tdnn4.affine:23.6174 tdnn5.affine:23.1144 tdnn6.affine:24.1394 tdnn7.affine:23.5762 tdnn8.affine:23.9843 tdnn9.affine:23.2719 tdnn10.affine:24.2169 tdnn11.affine:24.0188 tdnnFINAL.affine:23.1808 prefinal-affine-task-0.affine:23.6176 output-0.affine:9.70647 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0190404 tdnn2.affine:0.0129521 tdnn3.affine:0.0175884 tdnn4.affine:0.0168214 tdnn5.affine:0.0160668 tdnn6.affine:0.0142574 tdnn7.affine:0.0138273 tdnn8.affine:0.0137942 tdnn9.affine:0.0157118 tdnn10.affine:0.0163555 tdnn11.affine:0.0188121 tdnnFINAL.affine:0.0221534 prefinal-affine-task-0.affine:0.0160763 output-0.affine:0.0472253 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Tue Jul 24 11:16:52 UTC 2018, elapsed time 1 seconds
