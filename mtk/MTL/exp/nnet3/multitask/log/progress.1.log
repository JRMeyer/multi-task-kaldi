# nnet3-info MTL/exp/nnet3/multitask/1.raw && nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/0.raw MTL/exp/nnet3/multitask/1.raw 
# Started at Tue Jul 24 11:13:24 UTC 2018
#
nnet3-info MTL/exp/nnet3/multitask/1.raw 
num-parameters: 1486432
modulus: 1
input-node name=input dim=13
component-node name=tdnn1.affine component=tdnn1.affine input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=65 output-dim=256
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=256 output-dim=256
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=256 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=tdnn1.renorm input-dim=256 output-dim=256
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=256 output-dim=256
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=256 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -1), Offset(tdnn2.renorm, 2)) input-dim=512 output-dim=256
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=256 output-dim=256
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=256 output-dim=256
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -3), Offset(tdnn3.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=256 output-dim=256
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=256 output-dim=256
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -3), Offset(tdnn4.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.renorm, -3), Offset(tdnn5.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=256 output-dim=256
component-node name=tdnn6.renorm component=tdnn6.renorm input=tdnn6.relu input-dim=256 output-dim=256
component-node name=tdnn7.affine component=tdnn7.affine input=Append(Offset(tdnn6.renorm, -3), Offset(tdnn6.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn7.relu component=tdnn7.relu input=tdnn7.affine input-dim=256 output-dim=256
component-node name=tdnn7.renorm component=tdnn7.renorm input=tdnn7.relu input-dim=256 output-dim=256
component-node name=tdnn8.affine component=tdnn8.affine input=Append(Offset(tdnn7.renorm, -3), Offset(tdnn7.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn8.relu component=tdnn8.relu input=tdnn8.affine input-dim=256 output-dim=256
component-node name=tdnn8.renorm component=tdnn8.renorm input=tdnn8.relu input-dim=256 output-dim=256
component-node name=tdnn9.affine component=tdnn9.affine input=Append(Offset(tdnn8.renorm, -3), Offset(tdnn8.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn9.relu component=tdnn9.relu input=tdnn9.affine input-dim=256 output-dim=256
component-node name=tdnn9.renorm component=tdnn9.renorm input=tdnn9.relu input-dim=256 output-dim=256
component-node name=tdnn10.affine component=tdnn10.affine input=Append(Offset(tdnn9.renorm, -3), Offset(tdnn9.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn10.relu component=tdnn10.relu input=tdnn10.affine input-dim=256 output-dim=256
component-node name=tdnn10.renorm component=tdnn10.renorm input=tdnn10.relu input-dim=256 output-dim=256
component-node name=tdnn11.affine component=tdnn11.affine input=Append(Offset(tdnn10.renorm, -3), Offset(tdnn10.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn11.relu component=tdnn11.relu input=tdnn11.affine input-dim=256 output-dim=256
component-node name=tdnn11.renorm component=tdnn11.renorm input=tdnn11.relu input-dim=256 output-dim=256
component-node name=tdnnFINAL.affine component=tdnnFINAL.affine input=Append(Offset(tdnn11.renorm, -3), Offset(tdnn11.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnnFINAL.relu component=tdnnFINAL.relu input=tdnnFINAL.affine input-dim=256 output-dim=256
component-node name=tdnnFINAL.renorm component=tdnnFINAL.renorm input=tdnnFINAL.relu input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.affine component=prefinal-affine-task-0.affine input=tdnnFINAL.renorm input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.relu component=prefinal-affine-task-0.relu input=prefinal-affine-task-0.affine input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.renorm component=prefinal-affine-task-0.renorm input=prefinal-affine-task-0.relu input-dim=256 output-dim=256
component-node name=output-0.affine component=output-0.affine input=prefinal-affine-task-0.renorm input-dim=256 output-dim=96
component-node name=output-0.log-softmax component=output-0.log-softmax input=output-0.affine input-dim=96 output-dim=96
output-node name=output-0 input=output-0.log-softmax dim=96 objective=linear
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=65, output-dim=256, learning-rate=0.0015, max-change=0.75, linear-params-rms=0.1238, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.81,0.83,0.85 0.88,0.93,0.99,1.1,1.1 1.1,1.2,1.2,1.2), mean=0.995, stddev=0.0868], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.8,1.8 1.8,1.9,2.0,2.1,2.1 2.1,2.2,2.2,2.3), mean=1.98, stddev=0.114], bias-{mean,stddev}=0.01615,1.082, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=8.45e+04, self-repaired-proportion=0.712086, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.003,0.38,3.1,4.8 6.8,9.0,11,15), mean=1.78, stddev=2.58], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.009,0.41,0.95,1.0 1.0,1.0,1.0,1.0), mean=0.486, stddev=0.423], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0008,0.0009 0.0009,0.001,0.002,0.002,0.002 0.003,0.004,0.004,0.005), mean=0.00165, stddev=0.000725], oderiv-count=153600
component name=tdnn1.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=256, learning-rate=0.0015, max-change=0.75, linear-params-rms=0.06246, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.89,0.89,0.92 0.94,0.96,1.0,1.0,1.1 1.1,1.1,1.1,1.1), mean=0.998, stddev=0.047], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.91,0.92,0.92 0.94,0.96,1.0,1.0,1.0 1.1,1.1,1.1,1.1), mean=0.998, stddev=0.0432], bias-{mean,stddev}=0.03387,1.091, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.2e+05, self-repaired-proportion=0.780214, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,3e-05,0.12,1.1,1.6 1.9,2.3,2.5,4.4), mean=0.521, stddev=0.733], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.0002,0.37,0.98,1.0 1.0,1.0,1.0,1.0), mean=0.481, stddev=0.426], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.003,0.004,0.005,0.006 0.007,0.008,0.008,0.009), mean=0.00397, stddev=0.00149], oderiv-count=140800
component name=tdnn2.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.0015, max-change=0.75, linear-params-rms=0.04444, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.94,0.95,0.96 0.97,0.98,1.0,1.0,1.0 1.1,1.1,1.1,1.2), mean=1.01, stddev=0.0313], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.64,0.65,0.66 0.67,0.69,0.71,0.73,0.75 0.76,0.77,0.78,0.82), mean=0.71, stddev=0.0304], bias-{mean,stddev}=0.07197,0.9835, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.35e+04, self-repaired-proportion=0.763815, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.0006,0.22,1.1,1.6 2.2,2.5,3.2,5.1), mean=0.589, stddev=0.79], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.009,0.52,0.98,1.0 1.0,1.0,1.0,1.0), mean=0.524, stddev=0.424], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.002,0.004,0.005,0.006 0.008,0.009,0.01,0.01), mean=0.00405, stddev=0.00193], oderiv-count=78080
component name=tdnn3.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.0015, max-change=0.75, linear-params-rms=0.04438, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.94,0.94,0.95 0.96,0.97,1.0,1.0,1.0 1.1,1.1,1.1,1.1), mean=1, stddev=0.0327], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.63,0.64,0.66 0.67,0.68,0.71,0.74,0.75 0.76,0.78,0.79,0.81), mean=0.709, stddev=0.0329], bias-{mean,stddev}=-0.04977,1.017, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=3.92e+04, self-repaired-proportion=0.812593, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.15,1.1,1.4 2.1,2.6,2.9,3.7), mean=0.525, stddev=0.744], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.47,0.99,1.0 1.0,1.0,1.0,1.0), mean=0.475, stddev=0.438], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.002,0.003,0.005,0.006 0.008,0.009,0.01,0.01), mean=0.00373, stddev=0.00185], oderiv-count=59904
component name=tdnn4.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.0015, max-change=0.75, linear-params-rms=0.04423, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.93,0.94,0.94 0.96,0.97,1.0,1.0,1.0 1.1,1.1,1.1,1.1), mean=1, stddev=0.03], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.63,0.64,0.66 0.67,0.68,0.71,0.73,0.74 0.76,0.77,0.79,0.81), mean=0.707, stddev=0.0312], bias-{mean,stddev}=-0.1219,0.972, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=3.07e+04, self-repaired-proportion=0.800558, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,8e-07,0.05,1.1,1.7 2.1,2.5,2.7,3.6), mean=0.513, stddev=0.759], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.0001,0.27,0.99,1.0 1.0,1.0,1.0,1.0), mean=0.448, stddev=0.437], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.003,0.003,0.004,0.006,0.007 0.008,0.009,0.009,0.01), mean=0.00432, stddev=0.00167], oderiv-count=60416
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.0015, max-change=0.75, linear-params-rms=0.04436, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.93,0.93,0.95 0.96,0.98,1.0,1.0,1.0 1.1,1.1,1.1,1.1), mean=1, stddev=0.0318], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.64,0.64,0.66 0.67,0.68,0.71,0.74,0.75 0.76,0.77,0.78,0.84), mean=0.709, stddev=0.0317], bias-{mean,stddev}=0.08823,1.068, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=2.69e+04, self-repaired-proportion=0.801415, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,1e-05,0.15,1.2,1.7 2.4,2.8,2.9,4.1), mean=0.572, stddev=0.799], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.0002,0.54,0.99,1.0 1.0,1.0,1.0,1.0), mean=0.502, stddev=0.435], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.003,0.004,0.005,0.006 0.007,0.008,0.008,0.01), mean=0.00398, stddev=0.00144], oderiv-count=54656
component name=tdnn6.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn7.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.0015, max-change=0.75, linear-params-rms=0.04447, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.94,0.95,0.95 0.96,0.98,1.0,1.0,1.0 1.1,1.1,1.1,1.1), mean=1.01, stddev=0.0319], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.64,0.65,0.66 0.67,0.69,0.71,0.74,0.75 0.77,0.78,0.79,0.81), mean=0.711, stddev=0.0319], bias-{mean,stddev}=-0.02741,1.022, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn7.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=2.92e+04, self-repaired-proportion=0.778505, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.13,0.96,1.4 2.0,3.0,3.3,4.0), mean=0.503, stddev=0.745], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.43,0.98,1.0 1.0,1.0,1.0,1.0), mean=0.475, stddev=0.429], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.003 0.003,0.003,0.004,0.006,0.007 0.007,0.009,0.01,0.01), mean=0.00457, stddev=0.0016], oderiv-count=44544
component name=tdnn7.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn8.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.0015, max-change=0.75, linear-params-rms=0.04424, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.93,0.94,0.95 0.96,0.98,1.0,1.0,1.0 1.1,1.1,1.1,1.1), mean=1, stddev=0.0306], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.64,0.65,0.66 0.67,0.68,0.70,0.73,0.75 0.76,0.77,0.78,0.80), mean=0.707, stddev=0.0301], bias-{mean,stddev}=-0.003212,1.067, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn8.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=2.37e+04, self-repaired-proportion=0.819387, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.07,1.0,1.5 2.1,2.4,2.9,4.0), mean=0.501, stddev=0.735], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.30,0.99,1.0 1.0,1.0,1.0,1.0), mean=0.457, stddev=0.438], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.003 0.004,0.004,0.005,0.006,0.007 0.007,0.009,0.01,0.01), mean=0.00496, stddev=0.00145], oderiv-count=38400
component name=tdnn8.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn9.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.0015, max-change=0.75, linear-params-rms=0.0443, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.92,0.93,0.95 0.96,0.98,1.0,1.0,1.0 1.1,1.1,1.1,1.1), mean=1, stddev=0.0327], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.64,0.65,0.66 0.67,0.68,0.71,0.73,0.75 0.76,0.77,0.78,0.82), mean=0.708, stddev=0.0302], bias-{mean,stddev}=-0.03459,0.9977, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn9.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=2.15e+04, self-repaired-proportion=0.782227, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.15,1.0,1.6 1.9,2.6,2.9,3.8), mean=0.506, stddev=0.722], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.43,0.97,1.0 1.0,1.0,1.0,1.0), mean=0.484, stddev=0.424], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.004,0.004 0.004,0.005,0.006,0.007,0.008 0.009,0.01,0.01,0.01), mean=0.00581, stddev=0.00148], oderiv-count=27648
component name=tdnn9.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn10.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.0015, max-change=0.75, linear-params-rms=0.04442, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.94,0.95,0.95 0.96,0.98,1.0,1.0,1.0 1.1,1.1,1.1,1.1), mean=1, stddev=0.0322], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.64,0.65,0.66 0.67,0.68,0.71,0.74,0.75 0.76,0.77,0.79,0.81), mean=0.71, stddev=0.031], bias-{mean,stddev}=0.06538,1.075, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn10.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.42e+04, self-repaired-proportion=0.765024, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.20,1.3,2.0 2.2,2.6,2.9,3.3), mean=0.6, stddev=0.8], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.55,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.493, stddev=0.431], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.005,0.005 0.005,0.005,0.006,0.008,0.009 0.01,0.01,0.01,0.01), mean=0.00696, stddev=0.00172], oderiv-count=24192
component name=tdnn10.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn11.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.0015, max-change=0.75, linear-params-rms=0.04442, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.93,0.94,0.95 0.96,0.98,1.0,1.0,1.0 1.1,1.1,1.1,1.1), mean=1, stddev=0.0327], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.63,0.65,0.66 0.67,0.68,0.71,0.73,0.75 0.76,0.78,0.79,0.84), mean=0.71, stddev=0.0321], bias-{mean,stddev}=-0.03505,1.048, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn11.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=8.19e+03, self-repaired-proportion=0.775568, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.11,0.95,1.7 2.2,2.5,3.0,3.5), mean=0.502, stddev=0.737], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.33,0.97,1.0 1.0,1.0,1.0,1.0), mean=0.452, stddev=0.425], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.006,0.007 0.007,0.008,0.01,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.0102, stddev=0.00241], oderiv-count=14592
component name=tdnn11.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnnFINAL.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.0015, max-change=0.75, linear-params-rms=0.04433, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.92,0.92,0.95 0.96,0.98,1.0,1.0,1.0 1.1,1.1,1.1,1.1), mean=1, stddev=0.0335], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.64,0.64,0.66 0.67,0.68,0.71,0.73,0.75 0.76,0.77,0.78,0.81), mean=0.709, stddev=0.0316], bias-{mean,stddev}=-0.07718,0.9503, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnnFINAL.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.61e+03, self-repaired-proportion=0.769942, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.04,0.97,1.5 2.1,2.3,3.5,4.2), mean=0.483, stddev=0.759], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.16,0.96,1.0 1.0,1.0,1.0,1.0), mean=0.42, stddev=0.433], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.007,0.008 0.009,0.01,0.01,0.02,0.02 0.02,0.03,0.03,0.03), mean=0.0146, stddev=0.00531], oderiv-count=7424
component name=tdnnFINAL.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=prefinal-affine-task-0.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=256, learning-rate=0.0015, max-change=0.75, linear-params-rms=0.06253, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.88,0.90,0.92 0.94,0.96,1.0,1.0,1.1 1.1,1.1,1.1,1.1), mean=0.999, stddev=0.0461], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.90,0.92,0.93 0.95,0.96,1.0,1.0,1.1 1.1,1.1,1.1,1.2), mean=1, stddev=0.043], bias-{mean,stddev}=-0.0004405,1.011, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-affine-task-0.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=5.25e+03, self-repaired-proportion=0.788658, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.17,1.2,1.7 2.1,2.3,2.5,3.1), mean=0.553, stddev=0.722], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.57,0.98,1.0 1.0,1.0,1.0,1.0), mean=0.494, stddev=0.44], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-08,5e-08,5e-08,6e-08 1e-07,3e-07,0.01,0.02,0.02 0.02,0.02,0.02,0.03), mean=0.00901, stddev=0.00822], oderiv-count=7296
component name=prefinal-affine-task-0.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output-0.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=96, learning-rate=0.0015, max-change=1.5, linear-params-rms=0.01756, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.12,0.13,0.14 0.15,0.19,0.26,0.34,0.38 0.41,0.45,0.52,0.53), mean=0.267, stddev=0.0862], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-07,8e-07,9e-07,1e-06 1e-06,4e-06,0.13,0.24,0.29 0.32,0.34,0.37,0.43), mean=0.127, stddev=0.116], bias-{mean,stddev}=-6.458e-08,0.00376, rank-in=20, rank-out=48, num-samples-history=2000, update-period=4, alpha=4
component name=output-0.log-softmax type=LogSoftmaxComponent, dim=96, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.01,0.04 0.06,0.07,0.09,0.11,0.13 0.15,0.23,0.28,0.28), mean=0.093, stddev=0.0421], oderiv-count=8064
nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/0.raw MTL/exp/nnet3/multitask/1.raw 
LOG (nnet3-show-progress[5.4.217~1-8ae5]:SelectGpuId():cu-device.cc:123) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:1.75172 tdnn2.affine:1.50847 tdnn3.affine:1.57017 tdnn4.affine:1.33857 tdnn5.affine:1.21016 tdnn6.affine:1.05866 tdnn7.affine:1.03027 tdnn8.affine:0.953079 tdnn9.affine:0.955584 tdnn10.affine:0.964911 tdnn11.affine:1.06077 tdnnFINAL.affine:1.15332 prefinal-affine-task-0.affine:0.797685 output-0.affine:2.75248 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:23.5586 tdnn2.affine:23.677 tdnn3.affine:22.5354 tdnn4.affine:22.8827 tdnn5.affine:22.4068 tdnn6.affine:23.4894 tdnn7.affine:22.9521 tdnn8.affine:23.4071 tdnn9.affine:22.6355 tdnn10.affine:23.567 tdnn11.affine:23.2447 tdnnFINAL.affine:22.1425 prefinal-affine-task-0.affine:22.7614 output-0.affine:2.75248 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0744683 tdnn2.affine:0.0637409 tdnn3.affine:0.0698116 tdnn4.affine:0.0585829 tdnn5.affine:0.0540797 tdnn6.affine:0.0451167 tdnn7.affine:0.0449376 tdnn8.affine:0.0407602 tdnn9.affine:0.042265 tdnn10.affine:0.0409911 tdnn11.affine:0.0456994 tdnnFINAL.affine:0.0521899 prefinal-affine-task-0.affine:0.0350934 output-0.affine:inf ]
# Accounting: time=0 threads=1
# Ended (code 0) at Tue Jul 24 11:13:24 UTC 2018, elapsed time 0 seconds
