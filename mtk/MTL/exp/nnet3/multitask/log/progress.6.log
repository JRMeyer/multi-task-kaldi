# nnet3-info MTL/exp/nnet3/multitask/6.raw && nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/5.raw MTL/exp/nnet3/multitask/6.raw 
# Started at Tue Jul 24 11:14:07 UTC 2018
#
nnet3-info MTL/exp/nnet3/multitask/6.raw 
num-parameters: 1486432
modulus: 1
input-node name=input dim=13
component-node name=tdnn1.affine component=tdnn1.affine input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=65 output-dim=256
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=256 output-dim=256
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=256 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=tdnn1.renorm input-dim=256 output-dim=256
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=256 output-dim=256
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=256 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -1), Offset(tdnn2.renorm, 2)) input-dim=512 output-dim=256
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=256 output-dim=256
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=256 output-dim=256
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -3), Offset(tdnn3.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=256 output-dim=256
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=256 output-dim=256
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -3), Offset(tdnn4.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.renorm, -3), Offset(tdnn5.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=256 output-dim=256
component-node name=tdnn6.renorm component=tdnn6.renorm input=tdnn6.relu input-dim=256 output-dim=256
component-node name=tdnn7.affine component=tdnn7.affine input=Append(Offset(tdnn6.renorm, -3), Offset(tdnn6.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn7.relu component=tdnn7.relu input=tdnn7.affine input-dim=256 output-dim=256
component-node name=tdnn7.renorm component=tdnn7.renorm input=tdnn7.relu input-dim=256 output-dim=256
component-node name=tdnn8.affine component=tdnn8.affine input=Append(Offset(tdnn7.renorm, -3), Offset(tdnn7.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn8.relu component=tdnn8.relu input=tdnn8.affine input-dim=256 output-dim=256
component-node name=tdnn8.renorm component=tdnn8.renorm input=tdnn8.relu input-dim=256 output-dim=256
component-node name=tdnn9.affine component=tdnn9.affine input=Append(Offset(tdnn8.renorm, -3), Offset(tdnn8.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn9.relu component=tdnn9.relu input=tdnn9.affine input-dim=256 output-dim=256
component-node name=tdnn9.renorm component=tdnn9.renorm input=tdnn9.relu input-dim=256 output-dim=256
component-node name=tdnn10.affine component=tdnn10.affine input=Append(Offset(tdnn9.renorm, -3), Offset(tdnn9.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn10.relu component=tdnn10.relu input=tdnn10.affine input-dim=256 output-dim=256
component-node name=tdnn10.renorm component=tdnn10.renorm input=tdnn10.relu input-dim=256 output-dim=256
component-node name=tdnn11.affine component=tdnn11.affine input=Append(Offset(tdnn10.renorm, -3), Offset(tdnn10.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn11.relu component=tdnn11.relu input=tdnn11.affine input-dim=256 output-dim=256
component-node name=tdnn11.renorm component=tdnn11.renorm input=tdnn11.relu input-dim=256 output-dim=256
component-node name=tdnnFINAL.affine component=tdnnFINAL.affine input=Append(Offset(tdnn11.renorm, -3), Offset(tdnn11.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnnFINAL.relu component=tdnnFINAL.relu input=tdnnFINAL.affine input-dim=256 output-dim=256
component-node name=tdnnFINAL.renorm component=tdnnFINAL.renorm input=tdnnFINAL.relu input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.affine component=prefinal-affine-task-0.affine input=tdnnFINAL.renorm input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.relu component=prefinal-affine-task-0.relu input=prefinal-affine-task-0.affine input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.renorm component=prefinal-affine-task-0.renorm input=prefinal-affine-task-0.relu input-dim=256 output-dim=256
component-node name=output-0.affine component=output-0.affine input=prefinal-affine-task-0.renorm input-dim=256 output-dim=96
component-node name=output-0.log-softmax component=output-0.log-softmax input=output-0.affine input-dim=96 output-dim=96
output-node name=output-0 input=output-0.log-softmax dim=96 objective=linear
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=65, output-dim=256, learning-rate=0.00112484, max-change=0.75, linear-params-rms=0.1337, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.82,0.86,0.88 0.91,0.95,1.0,1.2,1.3 1.3,1.4,1.5,1.6), mean=1.07, stddev=0.142], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.9 1.9,2.0,2.1,2.3,2.4 2.5,2.7,2.7,2.8), mean=2.13, stddev=0.214], bias-{mean,stddev}=0.01689,1.092, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=8.7e+04, self-repaired-proportion=0.162946, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.01,0.01,0.02 0.02,0.04,0.38,1.7,2.6 3.5,4.8,6.0,8.7), mean=0.979, stddev=1.37], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.02,0.05,0.06 0.07,0.11,0.40,0.88,0.94 0.97,0.99,1.0,1.0), mean=0.474, stddev=0.346], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.003,0.004 0.004,0.005,0.006,0.007), mean=0.00227, stddev=0.00102], oderiv-count=143360
component name=tdnn1.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=256, learning-rate=0.00112484, max-change=0.75, linear-params-rms=0.06352, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.88,0.90,0.93 0.95,0.97,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.01, stddev=0.0523], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.91,0.92,0.93 0.95,0.97,1.0,1.1,1.1 1.1,1.1,1.1,1.1), mean=1.02, stddev=0.0498], bias-{mean,stddev}=0.03401,1.089, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.18e+05, self-repaired-proportion=0.272917, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,1e-06,0.001 0.006,0.02,0.19,0.88,1.2 1.8,2.2,2.9,4.3), mean=0.483, stddev=0.643], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,2e-05,0.01 0.04,0.09,0.37,0.83,0.93 0.96,0.99,0.99,1.0), mean=0.445, stddev=0.339], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.003,0.003,0.005,0.006 0.007,0.008,0.009,0.01), mean=0.00387, stddev=0.00158], oderiv-count=168960
component name=tdnn2.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00112484, max-change=0.75, linear-params-rms=0.0456, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.95,0.97 0.98,0.99,1.0,1.1,1.1 1.1,1.1,1.2,1.3), mean=1.03, stddev=0.0468], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.64,0.65,0.67 0.68,0.70,0.73,0.76,0.78 0.80,0.81,0.83,0.87), mean=0.729, stddev=0.0388], bias-{mean,stddev}=0.07212,0.9828, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=5.12e+04, self-repaired-proportion=0.254069, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,7e-05 0.002,0.02,0.30,1.1,1.7 2.2,2.7,2.9,3.8), mean=0.613, stddev=0.751], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0008 0.01,0.07,0.43,0.79,0.90 0.96,0.98,1.0,1.0), mean=0.44, stddev=0.334], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.003,0.004,0.006,0.008 0.01,0.01,0.01,0.01), mean=0.00445, stddev=0.00229], oderiv-count=79360
component name=tdnn3.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00112484, max-change=0.75, linear-params-rms=0.04554, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.95,0.96 0.97,0.99,1.0,1.1,1.1 1.1,1.1,1.2,1.2), mean=1.03, stddev=0.0469], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.64,0.65,0.66 0.68,0.69,0.72,0.76,0.78 0.80,0.82,0.83,0.84), mean=0.727, stddev=0.0409], bias-{mean,stddev}=-0.04943,1.016, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.15e+04, self-repaired-proportion=0.262747, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,7e-05 0.0007,0.02,0.25,1.1,1.7 2.2,2.7,3.4,3.8), mean=0.595, stddev=0.784], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0007 0.01,0.07,0.38,0.74,0.87 0.94,0.97,0.98,1.0), mean=0.406, stddev=0.318], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.004,0.006,0.007 0.009,0.01,0.01,0.01), mean=0.00419, stddev=0.00207], oderiv-count=71424
component name=tdnn4.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00112484, max-change=0.75, linear-params-rms=0.04534, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.93,0.94,0.96 0.98,0.99,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.02, stddev=0.0425], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.64,0.65,0.67 0.68,0.69,0.72,0.75,0.78 0.79,0.81,0.83,0.86), mean=0.724, stddev=0.0386], bias-{mean,stddev}=-0.1218,0.9715, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=3.69e+04, self-repaired-proportion=0.21596, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,8e-06 0.002,0.02,0.25,1.1,1.8 2.4,3.0,3.4,4.9), mean=0.602, stddev=0.826], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0002 0.01,0.09,0.34,0.76,0.88 0.93,0.96,0.97,1.0), mean=0.409, stddev=0.313], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.005,0.007 0.008,0.01,0.01,0.01), mean=0.00403, stddev=0.002], oderiv-count=67584
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00112484, max-change=0.75, linear-params-rms=0.04546, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.93,0.95,0.96 0.97,1.0,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.03, stddev=0.0424], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.66,0.67 0.68,0.69,0.72,0.76,0.77 0.79,0.81,0.83,0.86), mean=0.726, stddev=0.0381], bias-{mean,stddev}=0.08846,1.067, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.12e+04, self-repaired-proportion=0.202288, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,1e-05 0.002,0.02,0.29,1.3,1.7 2.4,2.8,2.8,3.5), mean=0.645, stddev=0.786], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0002 0.02,0.10,0.37,0.79,0.89 0.93,0.95,0.99,1.0), mean=0.428, stddev=0.322], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.003,0.004,0.006,0.007 0.008,0.008,0.009,0.01), mean=0.00431, stddev=0.00183], oderiv-count=41216
component name=tdnn6.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn7.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00112484, max-change=0.75, linear-params-rms=0.0455, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.95,0.95,0.97 0.98,1.0,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.03, stddev=0.04], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.64,0.65,0.66 0.68,0.70,0.73,0.76,0.78 0.79,0.81,0.82,0.84), mean=0.727, stddev=0.0387], bias-{mean,stddev}=-0.0273,1.022, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn7.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=3.53e+04, self-repaired-proportion=0.251094, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.0005,0.01,0.29,1.2,1.8 2.2,2.7,2.9,4.5), mean=0.627, stddev=0.796], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.007,0.05,0.41,0.73,0.87 0.91,0.96,0.98,1.0), mean=0.417, stddev=0.317], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.003,0.003,0.004,0.006,0.008 0.008,0.01,0.01,0.02), mean=0.00464, stddev=0.00206], oderiv-count=44544
component name=tdnn7.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn8.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00112484, max-change=0.75, linear-params-rms=0.04518, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.93,0.95,0.96 0.97,0.99,1.0,1.1,1.1 1.1,1.1,1.1,1.1), mean=1.02, stddev=0.0397], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.64,0.66,0.67 0.68,0.69,0.72,0.75,0.77 0.78,0.80,0.81,0.87), mean=0.722, stddev=0.035], bias-{mean,stddev}=-0.003167,1.066, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn8.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=2.56e+04, self-repaired-proportion=0.314844, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 7e-06,0.004,0.30,1.2,1.8 2.3,2.9,3.1,3.6), mean=0.655, stddev=0.806], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.0001,0.03,0.39,0.78,0.86 0.93,0.98,0.99,1.0), mean=0.411, stddev=0.334], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.003 0.003,0.004,0.005,0.007,0.008 0.009,0.01,0.01,0.02), mean=0.00529, stddev=0.00203], oderiv-count=29440
component name=tdnn8.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn9.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00112484, max-change=0.75, linear-params-rms=0.04528, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.94,0.96,0.96 0.97,0.99,1.0,1.1,1.1 1.1,1.1,1.1,1.1), mean=1.02, stddev=0.0395], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.65,0.65,0.67 0.68,0.69,0.72,0.75,0.77 0.79,0.80,0.81,0.85), mean=0.724, stddev=0.0358], bias-{mean,stddev}=-0.03457,0.9975, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn9.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=2.36e+04, self-repaired-proportion=0.224121, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.0001,0.02,0.28,1.1,1.6 2.2,2.9,3.1,4.0), mean=0.611, stddev=0.761], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.002,0.08,0.41,0.76,0.87 0.93,0.96,0.99,1.0), mean=0.425, stddev=0.321], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.004,0.005,0.006,0.009,0.01 0.01,0.01,0.01,0.01), mean=0.00678, stddev=0.00231], oderiv-count=28672
component name=tdnn9.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn10.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00112484, max-change=0.75, linear-params-rms=0.04536, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.95,0.96 0.97,0.99,1.0,1.1,1.1 1.1,1.1,1.1,1.1), mean=1.03, stddev=0.0399], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.65,0.65,0.67 0.68,0.69,0.72,0.75,0.77 0.79,0.81,0.81,0.86), mean=0.725, stddev=0.0368], bias-{mean,stddev}=0.06545,1.075, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn10.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.61e+04, self-repaired-proportion=0.331641, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.0001,0.006,0.32,1.4,1.9 2.4,2.7,3.1,3.3), mean=0.701, stddev=0.82], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.002,0.03,0.41,0.84,0.94 0.99,1.0,1.0,1.0), mean=0.45, stddev=0.348], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.005,0.005 0.006,0.006,0.008,0.01,0.01 0.01,0.01,0.02,0.02), mean=0.00856, stddev=0.00269], oderiv-count=20736
component name=tdnn10.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn11.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00112484, max-change=0.75, linear-params-rms=0.04546, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.93,0.94,0.96 0.98,0.99,1.0,1.1,1.1 1.1,1.1,1.1,1.1), mean=1.03, stddev=0.0416], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.65,0.67 0.68,0.69,0.72,0.76,0.78 0.80,0.81,0.84,0.88), mean=0.726, stddev=0.0396], bias-{mean,stddev}=-0.03492,1.048, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn11.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.13e+04, self-repaired-proportion=0.378289, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.001,0.21,1.3,1.9 2.6,2.9,3.0,5.0), mean=0.657, stddev=0.87], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.01,0.36,0.81,0.94 0.99,1.0,1.0,1.0), mean=0.41, stddev=0.355], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.008,0.009,0.009 0.009,0.01,0.01,0.02,0.02 0.02,0.02,0.02,0.03), mean=0.0134, stddev=0.00389], oderiv-count=13312
component name=tdnn11.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnnFINAL.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00112484, max-change=0.75, linear-params-rms=0.04561, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.92,0.94,0.96 0.97,0.99,1.0,1.1,1.1 1.1,1.1,1.2,1.2), mean=1.03, stddev=0.0496], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.64,0.65,0.67 0.68,0.69,0.72,0.76,0.78 0.81,0.84,0.84,0.88), mean=0.728, stddev=0.0427], bias-{mean,stddev}=-0.07686,0.9505, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnnFINAL.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=5.38e+03, self-repaired-proportion=0.437686, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.0006,0.15,1.3,2.0 2.5,2.9,3.8,4.7), mean=0.64, stddev=0.91], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.007,0.32,0.77,0.94 0.98,1.0,1.0,1.0), mean=0.385, stddev=0.358], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.02,0.02,0.02,0.03,0.04 0.04,0.04,0.04,0.05), mean=0.0242, stddev=0.00781], oderiv-count=6912
component name=tdnnFINAL.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=prefinal-affine-task-0.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=256, learning-rate=0.00112484, max-change=0.75, linear-params-rms=0.06381, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.90,0.91,0.92 0.95,0.97,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.02, stddev=0.0551], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.92,0.92,0.94 0.96,0.98,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.02, stddev=0.0515], bias-{mean,stddev}=0.0002212,1.012, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-affine-task-0.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.61e+03, self-repaired-proportion=0.449653, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.001,0.28,1.4,2.0 2.3,2.6,2.8,3.5), mean=0.658, stddev=0.808], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.01,0.42,0.92,1.0 1.0,1.0,1.0,1.0), mean=0.449, stddev=0.379], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-08,7e-08,7e-08,8e-08 3e-07,0.003,0.03,0.04,0.04 0.05,0.06,0.06,0.07), mean=0.0229, stddev=0.0174], oderiv-count=7680
component name=prefinal-affine-task-0.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output-0.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=96, learning-rate=0.00112484, max-change=1.5, linear-params-rms=0.03839, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.20,0.20,0.33 0.42,0.46,0.55,0.68,0.78 0.87,1.0,1.2,1.5), mean=0.585, stddev=0.188], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-07,8e-07,9e-07,1e-06 4e-06,0.03,0.32,0.51,0.60 0.64,0.74,0.83,0.91), mean=0.297, stddev=0.231], bias-{mean,stddev}=-6.486e-08,0.01337, rank-in=20, rank-out=48, num-samples-history=2000, update-period=4, alpha=4
component name=output-0.log-softmax type=LogSoftmaxComponent, dim=96, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.04 0.06,0.07,0.09,0.11,0.13 0.15,0.23,0.27,0.29), mean=0.0929, stddev=0.0423], oderiv-count=7424
nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/5.raw MTL/exp/nnet3/multitask/6.raw 
LOG (nnet3-show-progress[5.4.217~1-8ae5]:SelectGpuId():cu-device.cc:123) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:1.33641 tdnn2.affine:0.713405 tdnn3.affine:0.78147 tdnn4.affine:0.67763 tdnn5.affine:0.629691 tdnn6.affine:0.580964 tdnn7.affine:0.56105 tdnn8.affine:0.551458 tdnn9.affine:0.59132 tdnn10.affine:0.620161 tdnn11.affine:0.734065 tdnnFINAL.affine:0.928019 prefinal-affine-task-0.affine:0.798866 output-0.affine:1.60858 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:24.559 tdnn2.affine:23.8394 tdnn3.affine:22.8295 tdnn4.affine:23.1715 tdnn5.affine:22.6898 tdnn6.affine:23.7556 tdnn7.affine:23.2124 tdnn8.affine:23.6358 tdnn9.affine:22.8858 tdnn10.affine:23.7987 tdnn11.affine:23.5079 tdnnFINAL.affine:22.4826 prefinal-affine-task-0.affine:22.9978 output-0.affine:6.01957 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0548032 tdnn2.affine:0.0299415 tdnn3.affine:0.0342714 tdnn4.affine:0.0292766 tdnn5.affine:0.0277799 tdnn6.affine:0.0244761 tdnn7.affine:0.0241921 tdnn8.affine:0.023351 tdnn9.affine:0.0258641 tdnn10.affine:0.0260858 tdnn11.affine:0.0312677 tdnnFINAL.affine:0.0413623 prefinal-affine-task-0.affine:0.0348065 output-0.affine:0.297592 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Tue Jul 24 11:14:07 UTC 2018, elapsed time 0 seconds
