# nnet3-info MTL/exp/nnet3/multitask/29.raw && nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/28.raw MTL/exp/nnet3/multitask/29.raw 
# Started at Sat Jul 28 03:11:51 UTC 2018
#
nnet3-info MTL/exp/nnet3/multitask/29.raw 
num-parameters: 13897312
modulus: 1
input-node name=input dim=13
component-node name=tdnn1.affine component=tdnn1.affine input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=65 output-dim=768
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=768 output-dim=768
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=768 output-dim=768
component-node name=tdnn2.affine component=tdnn2.affine input=tdnn1.renorm input-dim=768 output-dim=768
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=768 output-dim=768
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=768 output-dim=768
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -1), Offset(tdnn2.renorm, 2)) input-dim=1536 output-dim=768
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=768 output-dim=768
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=768 output-dim=768
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -3), Offset(tdnn3.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=768 output-dim=768
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=768 output-dim=768
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -3), Offset(tdnn4.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=768 output-dim=768
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=768 output-dim=768
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.renorm, -3), Offset(tdnn5.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=768 output-dim=768
component-node name=tdnn6.renorm component=tdnn6.renorm input=tdnn6.relu input-dim=768 output-dim=768
component-node name=tdnn7.affine component=tdnn7.affine input=Append(Offset(tdnn6.renorm, -3), Offset(tdnn6.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn7.relu component=tdnn7.relu input=tdnn7.affine input-dim=768 output-dim=768
component-node name=tdnn7.renorm component=tdnn7.renorm input=tdnn7.relu input-dim=768 output-dim=768
component-node name=tdnn8.affine component=tdnn8.affine input=Append(Offset(tdnn7.renorm, -3), Offset(tdnn7.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn8.relu component=tdnn8.relu input=tdnn8.affine input-dim=768 output-dim=768
component-node name=tdnn8.renorm component=tdnn8.renorm input=tdnn8.relu input-dim=768 output-dim=768
component-node name=tdnn9.affine component=tdnn9.affine input=Append(Offset(tdnn8.renorm, -3), Offset(tdnn8.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn9.relu component=tdnn9.relu input=tdnn9.affine input-dim=768 output-dim=768
component-node name=tdnn9.renorm component=tdnn9.renorm input=tdnn9.relu input-dim=768 output-dim=768
component-node name=tdnn10.affine component=tdnn10.affine input=Append(Offset(tdnn9.renorm, -3), Offset(tdnn9.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn10.relu component=tdnn10.relu input=tdnn10.affine input-dim=768 output-dim=768
component-node name=tdnn10.renorm component=tdnn10.renorm input=tdnn10.relu input-dim=768 output-dim=768
component-node name=tdnn11.affine component=tdnn11.affine input=Append(Offset(tdnn10.renorm, -3), Offset(tdnn10.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn11.relu component=tdnn11.relu input=tdnn11.affine input-dim=768 output-dim=768
component-node name=tdnn11.renorm component=tdnn11.renorm input=tdnn11.relu input-dim=768 output-dim=768
component-node name=tdnnFINAL.affine component=tdnnFINAL.affine input=Append(Offset(tdnn11.renorm, -3), Offset(tdnn11.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnnFINAL.relu component=tdnnFINAL.relu input=tdnnFINAL.affine input-dim=768 output-dim=768
component-node name=tdnnFINAL.renorm component=tdnnFINAL.renorm input=tdnnFINAL.relu input-dim=768 output-dim=768
component-node name=prefinal-affine-task-0.affine component=prefinal-affine-task-0.affine input=tdnnFINAL.renorm input-dim=768 output-dim=768
component-node name=prefinal-affine-task-0.relu component=prefinal-affine-task-0.relu input=prefinal-affine-task-0.affine input-dim=768 output-dim=768
component-node name=prefinal-affine-task-0.renorm component=prefinal-affine-task-0.renorm input=prefinal-affine-task-0.relu input-dim=768 output-dim=768
component-node name=output-0.affine component=output-0.affine input=prefinal-affine-task-0.renorm input-dim=768 output-dim=168
component-node name=output-0.log-softmax component=output-0.log-softmax input=output-0.affine input-dim=168 output-dim=168
output-node name=output-0 input=output-0.log-softmax dim=168 objective=linear
component-node name=prefinal-affine-task-1.affine component=prefinal-affine-task-1.affine input=tdnnFINAL.renorm input-dim=768 output-dim=768
component-node name=prefinal-affine-task-1.relu component=prefinal-affine-task-1.relu input=prefinal-affine-task-1.affine input-dim=768 output-dim=768
component-node name=prefinal-affine-task-1.renorm component=prefinal-affine-task-1.renorm input=prefinal-affine-task-1.relu input-dim=768 output-dim=768
component-node name=output-1.affine component=output-1.affine input=prefinal-affine-task-1.renorm input-dim=768 output-dim=184
component-node name=output-1.log-softmax component=output-1.log-softmax input=output-1.affine input-dim=184 output-dim=184
output-node name=output-1 input=output-1.log-softmax dim=184 objective=linear
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=65, output-dim=768, learning-rate=0.00100252, max-change=0.75, linear-params-rms=0.1429, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.84,0.87,0.91 0.95,0.99,1.1,1.3,1.4 1.4,1.5,1.6,1.8), mean=1.14, stddev=0.164], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.4,3.4,3.6,3.7 3.7,3.8,3.9,4.1,4.2 4.3,4.3,4.4,4.6), mean=3.95, stddev=0.214], bias-{mean,stddev}=0.02904,1.033, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=1.95e+05, self-repaired-proportion=0.0226494, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.04,0.06,0.38,1.4,1.9 2.3,2.8,3.2,6.5), mean=0.737, stddev=0.831], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.07 0.08,0.12,0.46,0.88,0.92 0.93,0.94,0.95,0.95), mean=0.486, stddev=0.333], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002,0.003 0.003,0.003,0.003,0.004), mean=0.00186, stddev=0.00054], oderiv-count=261120
component name=tdnn1.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=768, learning-rate=0.00100252, max-change=0.75, linear-params-rms=0.03761, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.96,0.97,0.99 0.99,1.0,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.04, stddev=0.0382], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.95,0.96,0.98 0.99,1.0,1.0,1.1,1.1 1.1,1.1,1.2,1.2), mean=1.04, stddev=0.0452], bias-{mean,stddev}=0.01179,1.051, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=1.84e+05, self-repaired-proportion=0.00729167, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.01,0.02,0.03 0.04,0.07,0.31,0.93,1.3 1.5,1.8,2.0,2.7), mean=0.504, stddev=0.504], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.07,0.09 0.12,0.18,0.44,0.76,0.86 0.89,0.92,0.93,0.96), mean=0.462, stddev=0.267], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.002,0.003,0.003 0.004,0.004,0.004,0.005), mean=0.00252, stddev=0.000569], oderiv-count=256000
component name=tdnn2.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00100252, max-change=0.75, linear-params-rms=0.0271, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,0.99,0.99,1.0 1.0,1.0,1.1,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.06, stddev=0.0377], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.68,0.69,0.70 0.71,0.72,0.74,0.78,0.80 0.82,0.84,0.85,0.88), mean=0.75, stddev=0.0378], bias-{mean,stddev}=0.01777,1.008, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=9.73e+04, self-repaired-proportion=0.00240688, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.04 0.06,0.11,0.39,0.98,1.4 1.5,2.0,2.1,2.9), mean=0.559, stddev=0.515], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.09,0.11 0.14,0.21,0.43,0.67,0.77 0.84,0.89,0.91,0.93), mean=0.443, stddev=0.23], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.003,0.003,0.004,0.005 0.005,0.005,0.006,0.007), mean=0.00332, stddev=0.000833], oderiv-count=102400
component name=tdnn3.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00100252, max-change=0.75, linear-params-rms=0.02719, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.98,0.99,1.0 1.0,1.0,1.1,1.1,1.1 1.1,1.1,1.2,1.2), mean=1.06, stddev=0.0416], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.68,0.68,0.70 0.71,0.72,0.75,0.79,0.81 0.83,0.85,0.85,0.91), mean=0.753, stddev=0.0398], bias-{mean,stddev}=0.007491,1.004, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=8.52e+04, self-repaired-proportion=0.0015191, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.05 0.07,0.11,0.40,0.88,1.3 1.5,1.9,2.0,2.5), mean=0.539, stddev=0.487], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.09,0.11 0.15,0.21,0.42,0.64,0.75 0.82,0.87,0.90,0.92), mean=0.432, stddev=0.222], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.003 0.003,0.003,0.003,0.004,0.004 0.005,0.006,0.006,0.007), mean=0.00345, stddev=0.000818], oderiv-count=110592
component name=tdnn4.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00100252, max-change=0.75, linear-params-rms=0.02733, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.99,0.99,1.0 1.0,1.0,1.1,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.07, stddev=0.0419], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.68,0.69,0.70 0.71,0.72,0.75,0.79,0.81 0.83,0.85,0.86,0.94), mean=0.756, stddev=0.0405], bias-{mean,stddev}=0.02205,1.014, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=7.37e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.06 0.08,0.15,0.40,0.93,1.2 1.5,1.8,2.0,2.6), mean=0.554, stddev=0.475], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.09,0.12 0.16,0.24,0.43,0.66,0.76 0.81,0.86,0.90,0.93), mean=0.447, stddev=0.216], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.003 0.003,0.003,0.004,0.005,0.005 0.005,0.006,0.006,0.007), mean=0.00396, stddev=0.000802], oderiv-count=96256
component name=tdnn5.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00100252, max-change=0.75, linear-params-rms=0.02751, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,0.99,1.0,1.0 1.0,1.0,1.1,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.08, stddev=0.0406], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.68,0.69,0.70 0.71,0.73,0.76,0.80,0.81 0.83,0.85,0.85,0.89), mean=0.761, stddev=0.0399], bias-{mean,stddev}=0.04582,1.007, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=4.84e+04, self-repaired-proportion=0.00130208, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.04,0.06 0.11,0.16,0.40,0.87,1.2 1.5,1.9,2.1,2.7), mean=0.545, stddev=0.465], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.08,0.10,0.14 0.19,0.24,0.43,0.65,0.75 0.81,0.86,0.89,0.93), mean=0.446, stddev=0.208], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.004 0.004,0.004,0.005,0.005,0.006 0.006,0.007,0.007,0.008), mean=0.00472, stddev=0.000856], oderiv-count=91392
component name=tdnn6.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn7.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00100252, max-change=0.75, linear-params-rms=0.02769, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,1.0,1.0,1.0 1.0,1.0,1.1,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.08, stddev=0.0433], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.68,0.69,0.71 0.72,0.73,0.76,0.80,0.82 0.83,0.85,0.86,0.95), mean=0.766, stddev=0.0404], bias-{mean,stddev}=0.01656,0.9737, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn7.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=5.68e+04, self-repaired-proportion=0.00395275, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-05,0.03,0.05,0.08 0.11,0.16,0.41,0.87,1.2 1.5,1.9,2.1,4.0), mean=0.548, stddev=0.473], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.08,0.11,0.16 0.19,0.26,0.43,0.63,0.75 0.81,0.86,0.90,1.0), mean=0.45, stddev=0.203], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.004,0.004,0.005,0.006,0.007 0.007,0.007,0.008,0.009), mean=0.00536, stddev=0.000939], oderiv-count=73728
component name=tdnn7.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn8.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00100252, max-change=0.75, linear-params-rms=0.02783, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.99,1.0,1.0 1.0,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.2), mean=1.09, stddev=0.0491], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.69,0.70,0.71 0.72,0.73,0.77,0.81,0.83 0.84,0.86,0.87,0.91), mean=0.77, stddev=0.0413], bias-{mean,stddev}=-0.05802,1.063, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn8.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=4.22e+04, self-repaired-proportion=0.0112453, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,0.02,0.03,0.05 0.07,0.14,0.37,0.90,1.3 1.6,2.0,2.2,3.0), mean=0.548, stddev=0.516], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.05,0.07,0.10 0.14,0.23,0.41,0.64,0.76 0.84,0.89,0.92,0.99), mean=0.435, stddev=0.227], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.004,0.005,0.006,0.007,0.008 0.008,0.008,0.009,0.01), mean=0.00594, stddev=0.00114], oderiv-count=64000
component name=tdnn8.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn9.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00100252, max-change=0.75, linear-params-rms=0.02798, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.99,1.0,1.0 1.0,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.2), mean=1.1, stddev=0.0528], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.69,0.69,0.70 0.71,0.73,0.77,0.82,0.84 0.85,0.87,0.88,0.93), mean=0.774, stddev=0.0471], bias-{mean,stddev}=-0.05932,0.998, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn9.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=3.38e+04, self-repaired-proportion=0.0280633, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0007,0.01,0.04 0.07,0.14,0.40,0.85,1.2 1.5,1.8,2.0,2.7), mean=0.529, stddev=0.465], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.004,0.04,0.10 0.14,0.23,0.43,0.63,0.76 0.82,0.88,0.91,0.99), mean=0.437, stddev=0.221], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.005,0.005 0.005,0.005,0.007,0.008,0.008 0.009,0.009,0.01,0.01), mean=0.00669, stddev=0.00131], oderiv-count=55296
component name=tdnn9.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn10.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00100252, max-change=0.75, linear-params-rms=0.02793, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.98,0.99,1.0 1.0,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.09, stddev=0.0535], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.68,0.69,0.70 0.72,0.73,0.77,0.82,0.83 0.84,0.86,0.87,0.91), mean=0.773, stddev=0.0452], bias-{mean,stddev}=0.02921,1.027, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn10.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=1.84e+04, self-repaired-proportion=0.0382531, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0006,0.007,0.03 0.06,0.14,0.40,0.92,1.3 1.5,2.0,2.4,2.8), mean=0.552, stddev=0.51], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.004,0.03,0.07 0.12,0.23,0.44,0.66,0.77 0.84,0.91,0.93,0.99), mean=0.444, stddev=0.236], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.005,0.005 0.006,0.006,0.008,0.009,0.01 0.01,0.01,0.01,0.01), mean=0.00767, stddev=0.00153], oderiv-count=42240
component name=tdnn10.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn11.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00100252, max-change=0.75, linear-params-rms=0.02801, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.97,0.98,1.0 1.0,1.0,1.1,1.2,1.2 1.2,1.2,1.2,1.3), mean=1.1, stddev=0.0624], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.69,0.69,0.70 0.71,0.73,0.77,0.82,0.84 0.85,0.87,0.88,0.92), mean=0.775, stddev=0.0465], bias-{mean,stddev}=0.03177,1.019, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn11.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=2.15e+04, self-repaired-proportion=0.0875336, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,5e-05,0.0002,0.006 0.02,0.08,0.39,0.95,1.3 1.7,2.0,2.5,3.6), mean=0.562, stddev=0.572], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0004,0.001,0.02 0.07,0.16,0.43,0.68,0.80 0.89,0.94,0.96,1.0), mean=0.431, stddev=0.261], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.006,0.007 0.007,0.007,0.009,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.00922, stddev=0.00195], oderiv-count=27136
component name=tdnn11.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnnFINAL.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00100252, max-change=0.75, linear-params-rms=0.0283, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.97,0.98,0.99 1.0,1.0,1.1,1.2,1.2 1.2,1.2,1.2,1.3), mean=1.11, stddev=0.0722], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.68,0.69,0.70 0.71,0.72,0.78,0.84,0.86 0.88,0.90,0.91,0.94), mean=0.782, stddev=0.0581], bias-{mean,stddev}=-0.06725,0.9592, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnnFINAL.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=9.22e+03, self-repaired-proportion=0.111126, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,3e-05,0.001 0.01,0.07,0.35,0.86,1.1 1.4,1.8,2.2,2.9), mean=0.49, stddev=0.481], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0002,0.004 0.04,0.14,0.38,0.62,0.71 0.78,0.85,0.90,0.99), mean=0.391, stddev=0.244], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.009,0.009,0.01 0.01,0.01,0.01,0.02,0.02 0.02,0.02,0.02,0.03), mean=0.0142, stddev=0.00331], oderiv-count=14080
component name=tdnnFINAL.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=prefinal-affine-task-0.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=768, learning-rate=0.00100252, max-change=0.75, linear-params-rms=0.03844, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.95,0.96,0.97 0.99,1.0,1.1,1.1,1.1 1.2,1.2,1.2,1.3), mean=1.06, stddev=0.0614], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.96,0.97,0.98 0.99,1.0,1.1,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.06, stddev=0.0559], bias-{mean,stddev}=0.0009674,1.006, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-affine-task-0.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=4.61e+03, self-repaired-proportion=0.138638, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,3e-05,0.0004 0.004,0.04,0.36,0.90,1.2 1.4,1.5,1.7,2.4), mean=0.483, stddev=0.46], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0002,0.002 0.02,0.11,0.41,0.70,0.81 0.87,0.90,0.92,0.97), mean=0.417, stddev=0.281], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-08,4e-06,4e-05,0.0002 0.0008,0.004,0.02,0.02,0.02 0.03,0.03,0.03,0.04), mean=0.0142, stddev=0.00867], oderiv-count=8192
component name=prefinal-affine-task-0.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=output-0.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=168, learning-rate=0.00100252, max-change=1.5, linear-params-rms=0.04346, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.80,0.90 0.99,1.1,1.2,1.3,1.4 1.5,1.6,1.7,1.8), mean=1.19, stddev=0.203], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-07,8e-05,0.0009,0.005 0.02,0.11,0.56,0.76,0.83 0.87,0.94,0.98,1.1), mean=0.474, stddev=0.305], bias-{mean,stddev}=2.147e-07,0.0038, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-0.log-softmax type=LogSoftmaxComponent, dim=168, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.01,0.02 0.03,0.03,0.05,0.07,0.08 0.10,0.13,0.15,0.27), mean=0.0533, stddev=0.0312], oderiv-count=7168
component name=prefinal-affine-task-1.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=768, learning-rate=0.00100252, max-change=0.75, linear-params-rms=0.03638, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.94,0.95,0.96 0.97,0.99,1.0,1.0,1.0 1.1,1.1,1.1,1.1), mean=1.01, stddev=0.0277], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.95,0.96 0.97,0.98,1.0,1.0,1.0 1.1,1.1,1.1,1.1), mean=1.01, stddev=0.0271], bias-{mean,stddev}=-0.06995,1.031, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-affine-task-1.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=3.58e+03, self-repaired-proportion=0.206008, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0004 0.004,0.02,0.30,0.77,1.0 1.2,1.5,1.8,2.2), mean=0.419, stddev=0.432], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.002 0.02,0.07,0.45,0.78,0.88 0.93,0.97,0.99,1.0), mean=0.444, stddev=0.318], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-09,5e-09,2e-06,6e-05 0.0003,0.001,0.006,0.008,0.009 0.009,0.01,0.01,0.01), mean=0.0049, stddev=0.00314], oderiv-count=6912
component name=prefinal-affine-task-1.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=output-1.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=184, learning-rate=0.00100252, max-change=1.5, linear-params-rms=0.02119, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.07 0.07,0.07,0.07,0.92,1.0 1.0,1.1,1.1,1.1), mean=0.416, stddev=0.414], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,4e-07,7e-05,0.003 0.01,0.05,0.28,0.39,0.43 0.45,0.48,0.49,0.56), mean=0.241, stddev=0.157], bias-{mean,stddev}=-5.258e-07,0.002163, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-1.log-softmax type=LogSoftmaxComponent, dim=184, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.02,0.03 0.03,0.04,0.05,0.06), mean=0.00808, stddev=0.0123], oderiv-count=6656
nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/28.raw MTL/exp/nnet3/multitask/29.raw 
LOG (nnet3-show-progress[5.4.224~1-d4d9]:SelectGpuId():cu-device.cc:123) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.4.224~1-d4d9]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.978471 tdnn2.affine:0.788187 tdnn3.affine:1.07021 tdnn4.affine:1.12946 tdnn5.affine:1.17476 tdnn6.affine:1.25537 tdnn7.affine:1.31955 tdnn8.affine:1.37853 tdnn9.affine:1.43221 tdnn10.affine:1.41997 tdnn11.affine:1.42841 tdnnFINAL.affine:1.49255 prefinal-affine-task-0.affine:0.941352 output-0.affine:0.942832 prefinal-affine-task-1.affine:0.356226 output-1.affine:0.344938 ]
LOG (nnet3-show-progress[5.4.224~1-d4d9]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:42.8884 tdnn2.affine:41.0228 tdnn3.affine:40.5828 tdnn4.affine:40.5718 tdnn5.affine:40.8911 tdnn6.affine:40.9132 tdnn7.affine:40.4107 tdnn8.affine:42.2331 tdnn9.affine:41.1225 tdnn10.affine:41.6103 tdnn11.affine:41.517 tdnnFINAL.affine:40.6823 prefinal-affine-task-0.affine:40.6104 output-0.affine:15.6098 prefinal-affine-task-1.affine:40.0155 output-1.affine:7.96687 ]
LOG (nnet3-show-progress[5.4.224~1-d4d9]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0228389 tdnn2.affine:0.01922 tdnn3.affine:0.0263863 tdnn4.affine:0.0278574 tdnn5.affine:0.0287501 tdnn6.affine:0.0307108 tdnn7.affine:0.0326855 tdnn8.affine:0.0326737 tdnn9.affine:0.0348659 tdnn10.affine:0.0341605 tdnn11.affine:0.0344413 tdnnFINAL.affine:0.0367303 prefinal-affine-task-0.affine:0.0231919 output-0.affine:0.060928 prefinal-affine-task-1.affine:0.00890357 output-1.affine:0.0439364 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Sat Jul 28 03:11:51 UTC 2018, elapsed time 0 seconds
