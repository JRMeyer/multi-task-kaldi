# nnet3-info MTL/exp/nnet3/multitask/29.raw && nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/28.raw MTL/exp/nnet3/multitask/29.raw 
# Started at Tue Jul 24 11:17:38 UTC 2018
#
nnet3-info MTL/exp/nnet3/multitask/29.raw 
num-parameters: 1486432
modulus: 1
input-node name=input dim=13
component-node name=tdnn1.affine component=tdnn1.affine input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=65 output-dim=256
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=256 output-dim=256
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=256 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=tdnn1.renorm input-dim=256 output-dim=256
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=256 output-dim=256
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=256 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -1), Offset(tdnn2.renorm, 2)) input-dim=512 output-dim=256
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=256 output-dim=256
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=256 output-dim=256
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -3), Offset(tdnn3.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=256 output-dim=256
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=256 output-dim=256
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -3), Offset(tdnn4.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.renorm, -3), Offset(tdnn5.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=256 output-dim=256
component-node name=tdnn6.renorm component=tdnn6.renorm input=tdnn6.relu input-dim=256 output-dim=256
component-node name=tdnn7.affine component=tdnn7.affine input=Append(Offset(tdnn6.renorm, -3), Offset(tdnn6.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn7.relu component=tdnn7.relu input=tdnn7.affine input-dim=256 output-dim=256
component-node name=tdnn7.renorm component=tdnn7.renorm input=tdnn7.relu input-dim=256 output-dim=256
component-node name=tdnn8.affine component=tdnn8.affine input=Append(Offset(tdnn7.renorm, -3), Offset(tdnn7.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn8.relu component=tdnn8.relu input=tdnn8.affine input-dim=256 output-dim=256
component-node name=tdnn8.renorm component=tdnn8.renorm input=tdnn8.relu input-dim=256 output-dim=256
component-node name=tdnn9.affine component=tdnn9.affine input=Append(Offset(tdnn8.renorm, -3), Offset(tdnn8.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn9.relu component=tdnn9.relu input=tdnn9.affine input-dim=256 output-dim=256
component-node name=tdnn9.renorm component=tdnn9.renorm input=tdnn9.relu input-dim=256 output-dim=256
component-node name=tdnn10.affine component=tdnn10.affine input=Append(Offset(tdnn9.renorm, -3), Offset(tdnn9.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn10.relu component=tdnn10.relu input=tdnn10.affine input-dim=256 output-dim=256
component-node name=tdnn10.renorm component=tdnn10.renorm input=tdnn10.relu input-dim=256 output-dim=256
component-node name=tdnn11.affine component=tdnn11.affine input=Append(Offset(tdnn10.renorm, -3), Offset(tdnn10.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn11.relu component=tdnn11.relu input=tdnn11.affine input-dim=256 output-dim=256
component-node name=tdnn11.renorm component=tdnn11.renorm input=tdnn11.relu input-dim=256 output-dim=256
component-node name=tdnnFINAL.affine component=tdnnFINAL.affine input=Append(Offset(tdnn11.renorm, -3), Offset(tdnn11.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnnFINAL.relu component=tdnnFINAL.relu input=tdnnFINAL.affine input-dim=256 output-dim=256
component-node name=tdnnFINAL.renorm component=tdnnFINAL.renorm input=tdnnFINAL.relu input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.affine component=prefinal-affine-task-0.affine input=tdnnFINAL.renorm input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.relu component=prefinal-affine-task-0.relu input=prefinal-affine-task-0.affine input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.renorm component=prefinal-affine-task-0.renorm input=prefinal-affine-task-0.relu input-dim=256 output-dim=256
component-node name=output-0.affine component=output-0.affine input=prefinal-affine-task-0.renorm input-dim=256 output-dim=96
component-node name=output-0.log-softmax component=output-0.log-softmax input=output-0.affine input-dim=96 output-dim=96
output-node name=output-0 input=output-0.log-softmax dim=96 objective=linear
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=65, output-dim=256, learning-rate=0.000299289, max-change=0.75, linear-params-rms=0.1533, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.89,0.90,0.93 0.96,1.0,1.2,1.4,1.5 1.6,1.7,1.7,1.9), mean=1.22, stddev=0.219], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.0,2.0,2.1 2.1,2.2,2.4,2.7,2.8 2.9,2.9,3.1,3.2), mean=2.44, stddev=0.269], bias-{mean,stddev}=0.01708,1.102, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=9.73e+04, self-repaired-proportion=0.0331182, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.04,0.07,0.31,1.6,2.0 2.6,3.2,3.6,5.8), mean=0.781, stddev=0.951], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.06 0.08,0.13,0.32,0.84,0.92 0.94,0.95,0.95,0.96), mean=0.441, stddev=0.316], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.005,0.005 0.005,0.006,0.007,0.009,0.01 0.01,0.01,0.01,0.01), mean=0.00745, stddev=0.00199], oderiv-count=158720
component name=tdnn1.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=256, learning-rate=0.000299289, max-change=0.75, linear-params-rms=0.06536, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.90,0.92,0.94 0.97,1.0,1.0,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.04, stddev=0.0608], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.92,0.93,0.94 0.96,0.98,1.0,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.04, stddev=0.0642], bias-{mean,stddev}=0.03393,1.089, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.08e+05, self-repaired-proportion=0.0240234, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.02 0.04,0.07,0.33,0.85,1.1 1.4,1.6,1.8,3.4), mean=0.485, stddev=0.502], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.06,0.06,0.09 0.12,0.19,0.45,0.72,0.82 0.91,0.94,0.95,0.98), mean=0.458, stddev=0.262], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.008,0.008,0.008 0.009,0.009,0.01,0.01,0.02 0.02,0.02,0.02,0.02), mean=0.0118, stddev=0.00307], oderiv-count=148480
component name=tdnn2.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000299289, max-change=0.75, linear-params-rms=0.04755, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.96,0.97,0.98 1.0,1.0,1.1,1.1,1.2 1.2,1.2,1.3,1.3), mean=1.07, stddev=0.0637], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.66,0.68 0.70,0.71,0.75,0.80,0.83 0.86,0.88,0.90,0.94), mean=0.759, stddev=0.054], bias-{mean,stddev}=0.07203,0.9825, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.35e+04, self-repaired-proportion=0.0502717, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-06,0.0004,0.008,0.02 0.04,0.09,0.38,1.0,1.4 1.8,2.1,2.2,2.6), mean=0.588, stddev=0.579], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.004,0.04,0.07 0.11,0.21,0.43,0.72,0.80 0.87,0.92,0.96,0.99), mean=0.458, stddev=0.262], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.008,0.009,0.009 0.01,0.01,0.01,0.02,0.02 0.02,0.03,0.03,0.03), mean=0.0149, stddev=0.00489], oderiv-count=66560
component name=tdnn3.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000299289, max-change=0.75, linear-params-rms=0.04769, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.95,0.96,0.98 1.0,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.08, stddev=0.0677], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.66,0.68 0.69,0.71,0.75,0.81,0.84 0.86,0.89,0.91,0.94), mean=0.761, stddev=0.0583], bias-{mean,stddev}=-0.04937,1.016, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.61e+04, self-repaired-proportion=0.0390625, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,0.0006,0.004,0.02 0.03,0.06,0.33,1.0,1.3 1.9,2.1,2.8,3.0), mean=0.552, stddev=0.601], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.004,0.02,0.06 0.10,0.16,0.39,0.68,0.79 0.86,0.91,0.94,0.99), mean=0.421, stddev=0.258], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.009,0.009,0.009 0.01,0.01,0.01,0.02,0.02 0.03,0.03,0.03,0.03), mean=0.0155, stddev=0.00525], oderiv-count=64512
component name=tdnn4.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000299289, max-change=0.75, linear-params-rms=0.04737, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.94,0.95,0.97 1.0,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.07, stddev=0.0641], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.66,0.67,0.68 0.69,0.71,0.75,0.80,0.84 0.86,0.88,0.90,0.94), mean=0.756, stddev=0.0548], bias-{mean,stddev}=-0.1218,0.9711, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=2.46e+04, self-repaired-proportion=0.0667969, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,6e-06,0.002,0.009 0.02,0.09,0.33,0.93,1.5 1.9,2.7,2.8,3.7), mean=0.573, stddev=0.662], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,8e-05,0.01,0.04 0.08,0.18,0.40,0.72,0.82 0.89,0.92,0.93,0.98), mean=0.431, stddev=0.268], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.008,0.008,0.009 0.01,0.01,0.01,0.02,0.02 0.02,0.03,0.03,0.03), mean=0.015, stddev=0.00519], oderiv-count=65536
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000299289, max-change=0.75, linear-params-rms=0.04738, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.95,0.96,0.98 0.99,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.2), mean=1.07, stddev=0.0633], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.66,0.67,0.68 0.69,0.71,0.75,0.80,0.82 0.86,0.89,0.90,0.92), mean=0.756, stddev=0.0534], bias-{mean,stddev}=0.08837,1.067, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.3e+04, self-repaired-proportion=0.0742188, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,3e-05,0.0008,0.008 0.02,0.06,0.38,1.1,1.6 2.0,2.2,2.3,3.2), mean=0.603, stddev=0.635], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0002,0.006,0.04 0.08,0.15,0.42,0.74,0.84 0.90,0.93,0.94,0.97), mean=0.449, stddev=0.284], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.008,0.009,0.009 0.01,0.01,0.01,0.02,0.02 0.02,0.03,0.03,0.03), mean=0.0153, stddev=0.00477], oderiv-count=55552
component name=tdnn6.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn7.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000299289, max-change=0.75, linear-params-rms=0.04729, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.97,0.98 1.0,1.0,1.1,1.1,1.1 1.2,1.2,1.2,1.3), mean=1.07, stddev=0.0569], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.66,0.67 0.69,0.71,0.75,0.80,0.83 0.85,0.87,0.88,0.91), mean=0.755, stddev=0.0526], bias-{mean,stddev}=-0.02733,1.021, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn7.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=2.92e+04, self-repaired-proportion=0.0867746, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,8e-05,0.002 0.03,0.07,0.32,1.2,1.5 1.9,2.1,2.5,3.0), mean=0.598, stddev=0.636], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0007,0.02 0.08,0.17,0.43,0.74,0.84 0.87,0.93,0.96,0.97), mean=0.447, stddev=0.277], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.01 0.01,0.01,0.02,0.02,0.02 0.02,0.03,0.03,0.04), mean=0.0161, stddev=0.00485], oderiv-count=39936
component name=tdnn7.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn8.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000299289, max-change=0.75, linear-params-rms=0.04695, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.96,0.97 0.98,1.0,1.1,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.06, stddev=0.0603], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.66,0.66,0.68 0.69,0.71,0.74,0.79,0.81 0.83,0.86,0.87,0.91), mean=0.75, stddev=0.0491], bias-{mean,stddev}=-0.003197,1.066, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn8.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=3.07e+04, self-repaired-proportion=0.14043, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0001 0.008,0.03,0.35,1.1,1.5 1.9,2.4,2.7,3.3), mean=0.604, stddev=0.669], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.001 0.05,0.10,0.41,0.76,0.82 0.88,0.93,0.97,0.99), mean=0.423, stddev=0.298], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.02,0.02,0.03 0.03,0.03,0.03,0.04), mean=0.0182, stddev=0.00493], oderiv-count=38400
component name=tdnn8.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn9.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000299289, max-change=0.75, linear-params-rms=0.04718, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.95,0.96,0.98 1.0,1.0,1.1,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.07, stddev=0.0571], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.65,0.66,0.68 0.69,0.71,0.75,0.80,0.82 0.85,0.88,0.89,0.91), mean=0.753, stddev=0.0522], bias-{mean,stddev}=-0.03472,0.9972, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn9.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=2.15e+04, self-repaired-proportion=0.124383, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,1e-05,0.0007 0.009,0.05,0.36,1.1,1.5 1.9,2.2,2.6,3.5), mean=0.582, stddev=0.634], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,5e-05,0.005 0.04,0.13,0.42,0.72,0.83 0.89,0.93,0.95,0.99), mean=0.43, stddev=0.281], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.04,0.04,0.04), mean=0.0231, stddev=0.00573], oderiv-count=27648
component name=tdnn9.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn10.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000299289, max-change=0.75, linear-params-rms=0.04748, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.96,0.98 0.99,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.2), mean=1.07, stddev=0.0602], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.66,0.66,0.68 0.69,0.71,0.75,0.80,0.83 0.86,0.88,0.89,0.92), mean=0.758, stddev=0.0539], bias-{mean,stddev}=0.06526,1.074, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn10.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.69e+04, self-repaired-proportion=0.162212, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,1e-05,0.0002 0.005,0.05,0.39,1.2,1.6 2.0,2.2,2.4,3.2), mean=0.638, stddev=0.66], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0002,0.002 0.02,0.14,0.45,0.79,0.86 0.92,0.95,0.98,1.0), mean=0.454, stddev=0.305], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.04 0.04,0.04,0.04,0.05), mean=0.0282, stddev=0.0065], oderiv-count=23808
component name=tdnn10.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn11.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000299289, max-change=0.75, linear-params-rms=0.04796, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.93,0.96,0.97 0.99,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.2), mean=1.08, stddev=0.0694], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.66,0.66,0.68 0.69,0.71,0.76,0.82,0.84 0.87,0.89,0.92,0.96), mean=0.765, stddev=0.0592], bias-{mean,stddev}=-0.03515,1.048, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn11.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.02e+04, self-repaired-proportion=0.187188, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,1e-05 0.0006,0.03,0.31,1.0,1.7 2.0,2.2,2.6,3.4), mean=0.576, stddev=0.662], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0001 0.004,0.08,0.39,0.70,0.87 0.93,0.97,0.99,1.0), mean=0.413, stddev=0.303], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.05,0.05 0.06,0.06,0.06,0.07), mean=0.0408, stddev=0.00984], oderiv-count=15360
component name=tdnn11.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnnFINAL.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000299289, max-change=0.75, linear-params-rms=0.04873, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.92,0.96,0.97 0.98,1.0,1.1,1.2,1.2 1.2,1.3,1.3,1.4), mean=1.1, stddev=0.0892], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.65,0.66,0.67 0.69,0.71,0.77,0.84,0.87 0.90,0.93,0.95,1.0), mean=0.776, stddev=0.0728], bias-{mean,stddev}=-0.07732,0.95, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnnFINAL.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=3.84e+03, self-repaired-proportion=0.212171, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,3e-05 0.0008,0.02,0.27,1.1,1.4 1.8,2.1,2.8,3.4), mean=0.542, stddev=0.647], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0005 0.006,0.06,0.38,0.69,0.82 0.89,0.96,0.98,1.0), mean=0.386, stddev=0.298], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.04 0.04,0.05,0.06,0.08,0.09 0.09,0.10,0.10,0.11), mean=0.0618, stddev=0.0169], oderiv-count=6144
component name=tdnnFINAL.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=prefinal-affine-task-0.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=256, learning-rate=0.000299289, max-change=0.75, linear-params-rms=0.06782, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.92,0.93,0.95 0.98,1.0,1.1,1.2,1.2 1.2,1.2,1.3,1.3), mean=1.08, stddev=0.0814], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.92,0.94,0.96 0.98,1.0,1.1,1.2,1.2 1.2,1.2,1.3,1.3), mean=1.08, stddev=0.0875], bias-{mean,stddev}=-0.001384,1.01, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-affine-task-0.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=5.38e+03, self-repaired-proportion=0.161198, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,2e-05 0.001,0.04,0.30,0.89,1.2 1.4,1.5,1.7,2.1), mean=0.471, stddev=0.464], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0002 0.008,0.11,0.41,0.71,0.83 0.88,0.91,0.92,0.95), mean=0.419, stddev=0.288], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-08,9e-08,2e-07,5e-05 0.001,0.01,0.06,0.08,0.09 0.09,0.10,0.10,0.11), mean=0.0509, stddev=0.0316], oderiv-count=7936
component name=prefinal-affine-task-0.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output-0.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=96, learning-rate=0.000299289, max-change=1.5, linear-params-rms=0.06545, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.23,0.26,0.73 0.85,0.91,1.0,1.1,1.2 1.3,1.4,1.6,1.8), mean=1.03, stddev=0.21], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-07,1e-06,2e-06,0.0005 0.01,0.14,0.61,0.85,0.96 1.0,1.1,1.2,1.2), mean=0.539, stddev=0.347], bias-{mean,stddev}=-6.374e-08,0.01379, rank-in=20, rank-out=48, num-samples-history=2000, update-period=4, alpha=4
component name=output-0.log-softmax type=LogSoftmaxComponent, dim=96, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.04 0.06,0.07,0.09,0.12,0.13 0.15,0.22,0.27,0.29), mean=0.0927, stddev=0.0426], oderiv-count=7168
nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/28.raw MTL/exp/nnet3/multitask/29.raw 
LOG (nnet3-show-progress[5.4.217~1-8ae5]:SelectGpuId():cu-device.cc:123) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.42269 tdnn2.affine:0.27024 tdnn3.affine:0.36349 tdnn4.affine:0.35627 tdnn5.affine:0.337522 tdnn6.affine:0.314203 tdnn7.affine:0.299503 tdnn8.affine:0.299399 tdnn9.affine:0.333355 tdnn10.affine:0.357123 tdnn11.affine:0.397355 tdnnFINAL.affine:0.437427 prefinal-affine-task-0.affine:0.308675 output-0.affine:0.332373 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:26.4943 tdnn2.affine:24.1606 tdnn3.affine:23.3412 tdnn4.affine:23.7276 tdnn5.affine:23.2243 tdnn6.affine:24.2409 tdnn7.affine:23.6725 tdnn8.affine:24.0795 tdnn9.affine:23.3801 tdnn10.affine:24.3291 tdnn11.affine:24.1458 tdnnFINAL.affine:23.3211 prefinal-affine-task-0.affine:23.7209 output-0.affine:10.2615 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0159799 tdnn2.affine:0.0111908 tdnn3.affine:0.0155861 tdnn4.affine:0.0150297 tdnn5.affine:0.014548 tdnn6.affine:0.0129733 tdnn7.affine:0.0126631 tdnn8.affine:0.0124438 tdnn9.affine:0.0142714 tdnn10.affine:0.0146917 tdnn11.affine:0.0164732 tdnnFINAL.affine:0.0187793 prefinal-affine-task-0.affine:0.0130237 output-0.affine:0.0327083 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Tue Jul 24 11:17:38 UTC 2018, elapsed time 0 seconds
