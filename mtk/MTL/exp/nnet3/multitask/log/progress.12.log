# nnet3-info MTL/exp/nnet3/multitask/12.raw && nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/11.raw MTL/exp/nnet3/multitask/12.raw 
# Started at Tue Jul 24 11:15:01 UTC 2018
#
nnet3-info MTL/exp/nnet3/multitask/12.raw 
num-parameters: 1486432
modulus: 1
input-node name=input dim=13
component-node name=tdnn1.affine component=tdnn1.affine input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=65 output-dim=256
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=256 output-dim=256
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=256 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=tdnn1.renorm input-dim=256 output-dim=256
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=256 output-dim=256
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=256 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -1), Offset(tdnn2.renorm, 2)) input-dim=512 output-dim=256
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=256 output-dim=256
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=256 output-dim=256
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -3), Offset(tdnn3.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=256 output-dim=256
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=256 output-dim=256
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -3), Offset(tdnn4.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.renorm, -3), Offset(tdnn5.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=256 output-dim=256
component-node name=tdnn6.renorm component=tdnn6.renorm input=tdnn6.relu input-dim=256 output-dim=256
component-node name=tdnn7.affine component=tdnn7.affine input=Append(Offset(tdnn6.renorm, -3), Offset(tdnn6.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn7.relu component=tdnn7.relu input=tdnn7.affine input-dim=256 output-dim=256
component-node name=tdnn7.renorm component=tdnn7.renorm input=tdnn7.relu input-dim=256 output-dim=256
component-node name=tdnn8.affine component=tdnn8.affine input=Append(Offset(tdnn7.renorm, -3), Offset(tdnn7.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn8.relu component=tdnn8.relu input=tdnn8.affine input-dim=256 output-dim=256
component-node name=tdnn8.renorm component=tdnn8.renorm input=tdnn8.relu input-dim=256 output-dim=256
component-node name=tdnn9.affine component=tdnn9.affine input=Append(Offset(tdnn8.renorm, -3), Offset(tdnn8.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn9.relu component=tdnn9.relu input=tdnn9.affine input-dim=256 output-dim=256
component-node name=tdnn9.renorm component=tdnn9.renorm input=tdnn9.relu input-dim=256 output-dim=256
component-node name=tdnn10.affine component=tdnn10.affine input=Append(Offset(tdnn9.renorm, -3), Offset(tdnn9.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn10.relu component=tdnn10.relu input=tdnn10.affine input-dim=256 output-dim=256
component-node name=tdnn10.renorm component=tdnn10.renorm input=tdnn10.relu input-dim=256 output-dim=256
component-node name=tdnn11.affine component=tdnn11.affine input=Append(Offset(tdnn10.renorm, -3), Offset(tdnn10.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn11.relu component=tdnn11.relu input=tdnn11.affine input-dim=256 output-dim=256
component-node name=tdnn11.renorm component=tdnn11.renorm input=tdnn11.relu input-dim=256 output-dim=256
component-node name=tdnnFINAL.affine component=tdnnFINAL.affine input=Append(Offset(tdnn11.renorm, -3), Offset(tdnn11.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnnFINAL.relu component=tdnnFINAL.relu input=tdnnFINAL.affine input-dim=256 output-dim=256
component-node name=tdnnFINAL.renorm component=tdnnFINAL.renorm input=tdnnFINAL.relu input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.affine component=prefinal-affine-task-0.affine input=tdnnFINAL.renorm input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.relu component=prefinal-affine-task-0.relu input=prefinal-affine-task-0.affine input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.renorm component=prefinal-affine-task-0.renorm input=prefinal-affine-task-0.relu input-dim=256 output-dim=256
component-node name=output-0.affine component=output-0.affine input=prefinal-affine-task-0.renorm input-dim=256 output-dim=96
component-node name=output-0.log-softmax component=output-0.log-softmax input=output-0.affine input-dim=96 output-dim=96
output-node name=output-0 input=output-0.log-softmax dim=96 objective=linear
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=65, output-dim=256, learning-rate=0.000796327, max-change=0.75, linear-params-rms=0.142, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.85,0.87,0.90 0.93,0.98,1.1,1.3,1.4 1.5,1.6,1.6,1.7), mean=1.13, stddev=0.176], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,1.9,1.9 2.0,2.0,2.2,2.5,2.6 2.7,2.8,2.9,3.0), mean=2.26, stddev=0.257], bias-{mean,stddev}=0.01668,1.097, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=9.73e+04, self-repaired-proportion=0.0693934, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.03,0.07,0.34,1.6,2.1 2.6,3.1,4.2,5.9), mean=0.805, stddev=0.98], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.06 0.08,0.13,0.40,0.86,0.93 0.95,0.95,0.96,0.99), mean=0.464, stddev=0.323], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.003,0.003,0.004,0.005,0.006 0.007,0.008,0.009,0.009), mean=0.00408, stddev=0.00146], oderiv-count=153600
component name=tdnn1.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=256, learning-rate=0.000796327, max-change=0.75, linear-params-rms=0.06402, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,0.89,0.91,0.94 0.96,0.98,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.02, stddev=0.0547], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.91,0.92,0.93 0.95,0.98,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.02, stddev=0.0531], bias-{mean,stddev}=0.03405,1.089, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.18e+05, self-repaired-proportion=0.0815972, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0007,0.004,0.01 0.02,0.04,0.28,0.88,1.2 1.5,1.7,2.2,3.8), mean=0.491, stddev=0.564], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.006,0.02,0.05 0.08,0.13,0.43,0.78,0.88 0.94,0.95,0.96,1.0), mean=0.457, stddev=0.297], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.004,0.004 0.004,0.004,0.005,0.007,0.009 0.01,0.01,0.01,0.01), mean=0.00607, stddev=0.00206], oderiv-count=138240
component name=tdnn2.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000796327, max-change=0.75, linear-params-rms=0.04617, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.94,0.95,0.97 0.98,1.0,1.0,1.1,1.1 1.1,1.2,1.2,1.3), mean=1.04, stddev=0.0527], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.65,0.66,0.67 0.69,0.70,0.73,0.77,0.79 0.82,0.84,0.85,0.89), mean=0.737, stddev=0.0433], bias-{mean,stddev}=0.07215,0.9827, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.86e+04, self-repaired-proportion=0.111816, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0004,0.004 0.01,0.05,0.37,1.1,1.6 2.1,2.4,2.7,3.0), mean=0.615, stddev=0.679], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.004,0.03 0.06,0.14,0.43,0.78,0.86 0.91,0.95,0.99,1.0), mean=0.457, stddev=0.299], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.004,0.004 0.004,0.005,0.006,0.009,0.01 0.01,0.02,0.02,0.02), mean=0.0071, stddev=0.00304], oderiv-count=64000
component name=tdnn3.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000796327, max-change=0.75, linear-params-rms=0.04616, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.96,0.97 0.98,0.99,1.0,1.1,1.1 1.1,1.2,1.2,1.3), mean=1.04, stddev=0.0537], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.64,0.65,0.67 0.68,0.70,0.73,0.77,0.80 0.82,0.84,0.85,0.88), mean=0.737, stddev=0.046], bias-{mean,stddev}=-0.04936,1.016, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.84e+04, self-repaired-proportion=0.104725, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,2e-06,0.0003,0.003 0.01,0.04,0.28,1.1,1.6 2.0,2.4,3.2,3.6), mean=0.577, stddev=0.7], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,4e-05,0.003,0.02 0.06,0.11,0.35,0.72,0.83 0.90,0.94,0.95,1.0), mean=0.411, stddev=0.291], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.004,0.004 0.004,0.005,0.006,0.009,0.01 0.01,0.01,0.01,0.02), mean=0.00701, stddev=0.00299], oderiv-count=66816
component name=tdnn4.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000796327, max-change=0.75, linear-params-rms=0.0459, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.93,0.94,0.97 0.98,1.0,1.0,1.1,1.1 1.1,1.1,1.2,1.3), mean=1.04, stddev=0.0493], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.64,0.66,0.67 0.68,0.70,0.73,0.77,0.79 0.81,0.83,0.85,0.89), mean=0.733, stddev=0.0435], bias-{mean,stddev}=-0.1217,0.9714, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.51e+04, self-repaired-proportion=0.129794, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0001,0.001 0.01,0.05,0.30,1.1,1.7 2.3,2.8,3.2,4.3), mean=0.604, stddev=0.768], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0007,0.01 0.05,0.13,0.39,0.73,0.86 0.91,0.93,0.95,0.98), mean=0.424, stddev=0.295], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.004 0.004,0.004,0.006,0.009,0.01 0.01,0.01,0.02,0.02), mean=0.00665, stddev=0.00284], oderiv-count=65536
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000796327, max-change=0.75, linear-params-rms=0.04598, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.95,0.97 0.98,1.0,1.0,1.1,1.1 1.1,1.1,1.2,1.2), mean=1.04, stddev=0.0483], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.65,0.66,0.67 0.68,0.70,0.73,0.77,0.79 0.81,0.84,0.85,0.87), mean=0.734, stddev=0.0422], bias-{mean,stddev}=0.08848,1.067, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=3.94e+04, self-repaired-proportion=0.108008, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,9e-05,0.0006 0.01,0.04,0.32,1.2,1.7 2.3,2.5,2.7,3.3), mean=0.634, stddev=0.733], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.001,0.007 0.05,0.13,0.37,0.80,0.87 0.91,0.94,0.94,0.99), mean=0.436, stddev=0.309], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.004,0.004 0.004,0.005,0.006,0.009,0.01 0.01,0.01,0.01,0.02), mean=0.00693, stddev=0.00261], oderiv-count=50176
component name=tdnn6.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn7.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000796327, max-change=0.75, linear-params-rms=0.04601, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.96,0.97 0.99,1.0,1.0,1.1,1.1 1.1,1.1,1.2,1.2), mean=1.04, stddev=0.0443], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.64,0.65,0.66 0.68,0.70,0.73,0.77,0.79 0.81,0.82,0.84,0.88), mean=0.735, stddev=0.043], bias-{mean,stddev}=-0.02725,1.022, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn7.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=3.38e+04, self-repaired-proportion=0.127865, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0001 0.007,0.04,0.33,1.2,1.6 2.2,2.5,2.7,3.8), mean=0.627, stddev=0.731], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.001 0.05,0.11,0.42,0.77,0.86 0.89,0.94,0.97,0.99), mean=0.433, stddev=0.299], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.005,0.005,0.007,0.01,0.01 0.01,0.01,0.02,0.02), mean=0.00741, stddev=0.00283], oderiv-count=41472
component name=tdnn7.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn8.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000796327, max-change=0.75, linear-params-rms=0.04564, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.93,0.95,0.97 0.98,0.99,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.03, stddev=0.045], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.65,0.66,0.67 0.68,0.69,0.73,0.76,0.78 0.79,0.81,0.82,0.88), mean=0.729, stddev=0.0386], bias-{mean,stddev}=-0.003114,1.066, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn8.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=2.82e+04, self-repaired-proportion=0.224185, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.0007,0.01,0.34,1.2,1.7 2.2,2.7,3.0,3.6), mean=0.651, stddev=0.764], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.006,0.05,0.42,0.76,0.85 0.91,0.95,0.97,1.0), mean=0.42, stddev=0.323], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.005,0.005 0.006,0.006,0.008,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.00843, stddev=0.00282], oderiv-count=35840
component name=tdnn8.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn9.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000796327, max-change=0.75, linear-params-rms=0.04577, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.94,0.95,0.97 0.98,1.0,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.03, stddev=0.0441], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.65,0.65,0.67 0.68,0.70,0.73,0.76,0.78 0.80,0.82,0.83,0.86), mean=0.731, stddev=0.0395], bias-{mean,stddev}=-0.03458,0.9974, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn9.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.95e+04, self-repaired-proportion=0.161458, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,4e-05 0.005,0.03,0.34,1.1,1.5 2.0,2.6,2.9,3.8), mean=0.609, stddev=0.71], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0005 0.03,0.10,0.41,0.75,0.86 0.91,0.93,0.96,1.0), mean=0.425, stddev=0.301], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.007,0.007 0.007,0.008,0.01,0.01,0.01 0.02,0.02,0.02,0.02), mean=0.0109, stddev=0.00328], oderiv-count=28672
component name=tdnn9.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn10.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000796327, max-change=0.75, linear-params-rms=0.04594, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.96,0.96 0.98,1.0,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.04, stddev=0.0454], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.65,0.66,0.67 0.68,0.70,0.73,0.77,0.79 0.81,0.83,0.84,0.86), mean=0.734, stddev=0.0414], bias-{mean,stddev}=0.06542,1.074, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn10.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.31e+04, self-repaired-proportion=0.229492, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,2e-05 0.002,0.03,0.37,1.4,1.8 2.1,2.6,2.8,3.3), mean=0.685, stddev=0.749], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0002 0.01,0.08,0.45,0.81,0.89 0.95,0.98,0.99,1.0), mean=0.455, stddev=0.327], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.009,0.009,0.009 0.01,0.01,0.01,0.02,0.02 0.02,0.02,0.02,0.03), mean=0.0137, stddev=0.00376], oderiv-count=23040
component name=tdnn10.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn11.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000796327, max-change=0.75, linear-params-rms=0.04621, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.93,0.95,0.96 0.98,1.0,1.0,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.04, stddev=0.0499], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.66,0.67 0.68,0.70,0.73,0.77,0.80 0.82,0.85,0.86,0.89), mean=0.738, stddev=0.0456], bias-{mean,stddev}=-0.03499,1.048, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn11.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=9.22e+03, self-repaired-proportion=0.291094, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.0002,0.006,0.29,1.1,1.8 2.3,2.6,2.7,4.1), mean=0.635, stddev=0.78], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.001,0.03,0.37,0.76,0.90 0.97,0.99,1.0,1.0), mean=0.414, stddev=0.33], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.02,0.02,0.02,0.03,0.03 0.03,0.04,0.04,0.04), mean=0.0212, stddev=0.00569], oderiv-count=13824
component name=tdnn11.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnnFINAL.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.000796327, max-change=0.75, linear-params-rms=0.04662, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.92,0.95,0.96 0.98,0.99,1.0,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.05, stddev=0.0631], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.65,0.65,0.67 0.68,0.70,0.74,0.79,0.81 0.85,0.87,0.88,0.94), mean=0.744, stddev=0.0529], bias-{mean,stddev}=-0.07702,0.9503, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnnFINAL.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=5.12e+03, self-repaired-proportion=0.304482, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 7e-05,0.006,0.25,1.2,1.8 2.1,2.6,3.3,4.2), mean=0.611, stddev=0.795], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.001,0.03,0.35,0.74,0.87 0.94,0.98,0.99,1.0), mean=0.389, stddev=0.33], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.03,0.05,0.05 0.05,0.06,0.06,0.07), mean=0.0356, stddev=0.0108], oderiv-count=7168
component name=tdnnFINAL.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=prefinal-affine-task-0.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=256, learning-rate=0.000796327, max-change=0.75, linear-params-rms=0.06522, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.92,0.93,0.94 0.96,0.99,1.0,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.04, stddev=0.0636], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.92,0.93,0.95 0.96,0.99,1.0,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.04, stddev=0.0636], bias-{mean,stddev}=-0.0002726,1.011, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-affine-task-0.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=5.89e+03, self-repaired-proportion=0.292344, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 9e-05,0.01,0.30,1.2,1.6 2.0,2.2,2.3,3.0), mean=0.597, stddev=0.672], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.001,0.06,0.41,0.83,0.95 0.98,0.99,0.99,1.0), mean=0.445, stddev=0.34], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-08,7e-08,8e-08,2e-07 0.0002,0.007,0.04,0.05,0.06 0.07,0.07,0.07,0.08), mean=0.0322, stddev=0.0223], oderiv-count=7936
component name=prefinal-affine-task-0.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output-0.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=96, learning-rate=0.000796327, max-change=1.5, linear-params-rms=0.05026, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.22,0.22,0.52 0.61,0.65,0.77,0.90,0.98 1.1,1.2,1.4,1.6), mean=0.779, stddev=0.201], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-07,9e-07,1e-06,2e-06 0.003,0.08,0.45,0.67,0.74 0.83,0.89,1.0,1.0), mean=0.401, stddev=0.285], bias-{mean,stddev}=-6.384e-08,0.01356, rank-in=20, rank-out=48, num-samples-history=2000, update-period=4, alpha=4
component name=output-0.log-softmax type=LogSoftmaxComponent, dim=96, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.03 0.06,0.07,0.08,0.12,0.14 0.15,0.22,0.27,0.30), mean=0.0923, stddev=0.0437], oderiv-count=6400
nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/11.raw MTL/exp/nnet3/multitask/12.raw 
LOG (nnet3-show-progress[5.4.217~1-8ae5]:SelectGpuId():cu-device.cc:123) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.805405 tdnn2.affine:0.461439 tdnn3.affine:0.569849 tdnn4.affine:0.523502 tdnn5.affine:0.468864 tdnn6.affine:0.431215 tdnn7.affine:0.414416 tdnn8.affine:0.41822 tdnn9.affine:0.447272 tdnn10.affine:0.486446 tdnn11.affine:0.561636 tdnnFINAL.affine:0.699222 prefinal-affine-task-0.affine:0.547541 output-0.affine:0.881093 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:25.3702 tdnn2.affine:23.9236 tdnn3.affine:22.9764 tdnn4.affine:23.3302 tdnn5.affine:22.837 tdnn6.affine:23.8857 tdnn7.affine:23.3405 tdnn8.affine:23.7511 tdnn9.affine:23.0116 tdnn10.affine:23.9409 tdnn11.affine:23.6951 tdnnFINAL.affine:22.7512 prefinal-affine-task-0.affine:23.2486 output-0.affine:7.88096 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0319062 tdnn2.affine:0.019301 tdnn3.affine:0.024831 tdnn4.affine:0.0224679 tdnn5.affine:0.0205571 tdnn6.affine:0.018072 tdnn7.affine:0.0177732 tdnn8.affine:0.0176247 tdnn9.affine:0.0194561 tdnn10.affine:0.0203383 tdnn11.affine:0.0237342 tdnnFINAL.affine:0.0307935 prefinal-affine-task-0.affine:0.0235906 output-0.affine:0.114735 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Tue Jul 24 11:15:02 UTC 2018, elapsed time 1 seconds
