# nnet3-info MTL/exp/nnet3/multitask/38.raw && nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/37.raw MTL/exp/nnet3/multitask/38.raw 
# Started at Fri Jul 27 01:54:51 UTC 2018
#
nnet3-info MTL/exp/nnet3/multitask/38.raw 
num-parameters: 13891160
modulus: 1
input-node name=input dim=13
component-node name=tdnn1.affine component=tdnn1.affine input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=65 output-dim=768
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=768 output-dim=768
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=768 output-dim=768
component-node name=tdnn2.affine component=tdnn2.affine input=tdnn1.renorm input-dim=768 output-dim=768
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=768 output-dim=768
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=768 output-dim=768
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -1), Offset(tdnn2.renorm, 2)) input-dim=1536 output-dim=768
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=768 output-dim=768
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=768 output-dim=768
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -3), Offset(tdnn3.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=768 output-dim=768
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=768 output-dim=768
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -3), Offset(tdnn4.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=768 output-dim=768
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=768 output-dim=768
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.renorm, -3), Offset(tdnn5.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=768 output-dim=768
component-node name=tdnn6.renorm component=tdnn6.renorm input=tdnn6.relu input-dim=768 output-dim=768
component-node name=tdnn7.affine component=tdnn7.affine input=Append(Offset(tdnn6.renorm, -3), Offset(tdnn6.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn7.relu component=tdnn7.relu input=tdnn7.affine input-dim=768 output-dim=768
component-node name=tdnn7.renorm component=tdnn7.renorm input=tdnn7.relu input-dim=768 output-dim=768
component-node name=tdnn8.affine component=tdnn8.affine input=Append(Offset(tdnn7.renorm, -3), Offset(tdnn7.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn8.relu component=tdnn8.relu input=tdnn8.affine input-dim=768 output-dim=768
component-node name=tdnn8.renorm component=tdnn8.renorm input=tdnn8.relu input-dim=768 output-dim=768
component-node name=tdnn9.affine component=tdnn9.affine input=Append(Offset(tdnn8.renorm, -3), Offset(tdnn8.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn9.relu component=tdnn9.relu input=tdnn9.affine input-dim=768 output-dim=768
component-node name=tdnn9.renorm component=tdnn9.renorm input=tdnn9.relu input-dim=768 output-dim=768
component-node name=tdnn10.affine component=tdnn10.affine input=Append(Offset(tdnn9.renorm, -3), Offset(tdnn9.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn10.relu component=tdnn10.relu input=tdnn10.affine input-dim=768 output-dim=768
component-node name=tdnn10.renorm component=tdnn10.renorm input=tdnn10.relu input-dim=768 output-dim=768
component-node name=tdnn11.affine component=tdnn11.affine input=Append(Offset(tdnn10.renorm, -3), Offset(tdnn10.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn11.relu component=tdnn11.relu input=tdnn11.affine input-dim=768 output-dim=768
component-node name=tdnn11.renorm component=tdnn11.renorm input=tdnn11.relu input-dim=768 output-dim=768
component-node name=tdnnFINAL.affine component=tdnnFINAL.affine input=Append(Offset(tdnn11.renorm, -3), Offset(tdnn11.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnnFINAL.relu component=tdnnFINAL.relu input=tdnnFINAL.affine input-dim=768 output-dim=768
component-node name=tdnnFINAL.renorm component=tdnnFINAL.renorm input=tdnnFINAL.relu input-dim=768 output-dim=768
component-node name=prefinal-affine-task-0.affine component=prefinal-affine-task-0.affine input=tdnnFINAL.renorm input-dim=768 output-dim=768
component-node name=prefinal-affine-task-0.relu component=prefinal-affine-task-0.relu input=prefinal-affine-task-0.affine input-dim=768 output-dim=768
component-node name=prefinal-affine-task-0.renorm component=prefinal-affine-task-0.renorm input=prefinal-affine-task-0.relu input-dim=768 output-dim=768
component-node name=output-0.affine component=output-0.affine input=prefinal-affine-task-0.renorm input-dim=768 output-dim=152
component-node name=output-0.log-softmax component=output-0.log-softmax input=output-0.affine input-dim=152 output-dim=152
output-node name=output-0 input=output-0.log-softmax dim=152 objective=linear
component-node name=prefinal-affine-task-1.affine component=prefinal-affine-task-1.affine input=tdnnFINAL.renorm input-dim=768 output-dim=768
component-node name=prefinal-affine-task-1.relu component=prefinal-affine-task-1.relu input=prefinal-affine-task-1.affine input-dim=768 output-dim=768
component-node name=prefinal-affine-task-1.renorm component=prefinal-affine-task-1.renorm input=prefinal-affine-task-1.relu input-dim=768 output-dim=768
component-node name=output-1.affine component=output-1.affine input=prefinal-affine-task-1.renorm input-dim=768 output-dim=192
component-node name=output-1.log-softmax component=output-1.log-softmax input=output-1.affine input-dim=192 output-dim=192
output-node name=output-1 input=output-1.log-softmax dim=192 objective=linear
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=65, output-dim=768, learning-rate=0.00051712, max-change=0.75, linear-params-rms=0.1406, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.82,0.85,0.90 0.93,0.99,1.1,1.2,1.3 1.4,1.5,1.5,1.6), mean=1.12, stddev=0.154], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.3,3.3,3.5,3.6 3.6,3.7,3.9,4.1,4.1 4.2,4.3,4.3,4.6), mean=3.89, stddev=0.222], bias-{mean,stddev}=0.0302,1.031, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=1.79e+05, self-repaired-proportion=0.00778222, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.03,0.05,0.27,1.3,1.8 2.1,2.5,2.8,5.6), mean=0.669, stddev=0.781], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.08,0.12,0.36,0.87,0.91 0.93,0.94,0.95,0.95), mean=0.463, stddev=0.334], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.001,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.002,0.003,0.003,0.003), mean=0.00157, stddev=0.000456], oderiv-count=271360
component name=tdnn1.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=768, learning-rate=0.00051712, max-change=0.75, linear-params-rms=0.03756, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.96,0.97,0.98 0.99,1.0,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.04, stddev=0.0378], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.96,0.96,0.98 0.99,1.0,1.0,1.1,1.1 1.1,1.1,1.2,1.2), mean=1.04, stddev=0.0444], bias-{mean,stddev}=0.01178,1.051, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=2.05e+05, self-repaired-proportion=0.00457974, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.02,0.03 0.04,0.07,0.34,0.94,1.3 1.4,1.8,2.1,2.7), mean=0.514, stddev=0.51], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.07,0.09 0.12,0.18,0.45,0.78,0.86 0.90,0.92,0.93,0.95), mean=0.473, stddev=0.276], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002,0.002 0.003,0.003,0.003,0.003), mean=0.00184, stddev=0.000407], oderiv-count=286720
component name=tdnn2.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00051712, max-change=0.75, linear-params-rms=0.02705, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.98,0.99,1.0 1.0,1.0,1.1,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.06, stddev=0.0395], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.68,0.69,0.70 0.70,0.72,0.74,0.78,0.80 0.82,0.84,0.85,0.91), mean=0.749, stddev=0.0381], bias-{mean,stddev}=0.01778,1.008, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=9.73e+04, self-repaired-proportion=0.00161047, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.05,0.11,0.36,0.99,1.4 1.8,2.0,2.2,2.6), mean=0.566, stddev=0.549], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.08,0.11 0.13,0.20,0.41,0.69,0.80 0.87,0.91,0.92,0.94), mean=0.444, stddev=0.243], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.002,0.003,0.003 0.004,0.004,0.004,0.005), mean=0.00257, stddev=0.000606], oderiv-count=140800
component name=tdnn3.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00051712, max-change=0.75, linear-params-rms=0.02719, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.98,0.99,1.0 1.0,1.0,1.1,1.1,1.1 1.1,1.1,1.2,1.2), mean=1.06, stddev=0.0422], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.67,0.68,0.70 0.71,0.72,0.75,0.79,0.81 0.83,0.84,0.86,0.91), mean=0.752, stddev=0.0416], bias-{mean,stddev}=0.007429,1.004, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=8.76e+04, self-repaired-proportion=0.00197173, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.02,0.03,0.04 0.06,0.11,0.33,0.89,1.3 1.5,1.9,2.1,2.6), mean=0.511, stddev=0.501], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.07,0.08,0.10 0.13,0.20,0.38,0.64,0.76 0.82,0.88,0.91,0.95), mean=0.417, stddev=0.228], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.003,0.004 0.004,0.004,0.005,0.005), mean=0.00292, stddev=0.000634], oderiv-count=140544
component name=tdnn4.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00051712, max-change=0.75, linear-params-rms=0.0274, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,0.98,0.99,1.0 1.0,1.0,1.1,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.07, stddev=0.0438], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.68,0.69,0.70 0.71,0.72,0.75,0.80,0.82 0.84,0.86,0.87,0.92), mean=0.758, stddev=0.0441], bias-{mean,stddev}=0.022,1.015, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=9.63e+04, self-repaired-proportion=0.00167411, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.02,0.03,0.05 0.07,0.14,0.38,0.86,1.2 1.5,1.7,1.9,2.4), mean=0.526, stddev=0.455], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.08,0.11 0.15,0.23,0.43,0.64,0.75 0.82,0.87,0.90,0.93), mean=0.437, stddev=0.215], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.003 0.003,0.003,0.003,0.004,0.004 0.004,0.005,0.005,0.005), mean=0.00333, stddev=0.0006], oderiv-count=120832
component name=tdnn5.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00051712, max-change=0.75, linear-params-rms=0.02761, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,0.99,1.0,1.0 1.0,1.0,1.1,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.08, stddev=0.0459], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.68,0.69,0.70 0.71,0.73,0.76,0.80,0.82 0.84,0.86,0.87,0.91), mean=0.764, stddev=0.0422], bias-{mean,stddev}=0.04583,1.007, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=5.38e+04, self-repaired-proportion=0.00687767, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.02,0.03,0.05 0.07,0.13,0.40,0.88,1.2 1.5,1.8,1.9,2.5), mean=0.534, stddev=0.461], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.07,0.08,0.11 0.15,0.22,0.43,0.65,0.77 0.82,0.89,0.92,0.99), mean=0.443, stddev=0.224], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.003 0.003,0.003,0.004,0.005,0.005 0.005,0.005,0.005,0.006), mean=0.00393, stddev=0.000652], oderiv-count=100352
component name=tdnn6.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn7.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00051712, max-change=0.75, linear-params-rms=0.0279, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,0.99,1.0,1.0 1.0,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.2), mean=1.09, stddev=0.0503], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.68,0.69,0.70 0.71,0.73,0.77,0.82,0.83 0.85,0.87,0.87,0.93), mean=0.772, stddev=0.0467], bias-{mean,stddev}=0.01652,0.9738, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn7.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=6.91e+04, self-repaired-proportion=0.00885417, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.02,0.03,0.05 0.08,0.13,0.36,0.80,1.1 1.4,1.8,2.0,3.7), mean=0.506, stddev=0.459], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.06,0.08,0.12 0.16,0.23,0.41,0.62,0.72 0.83,0.90,0.93,0.97), mean=0.431, stddev=0.215], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.004 0.004,0.004,0.005,0.005,0.006 0.006,0.006,0.006,0.007), mean=0.00471, stddev=0.00075], oderiv-count=82944
component name=tdnn7.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn8.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00051712, max-change=0.75, linear-params-rms=0.02808, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,0.99,0.99,1.0 1.0,1.0,1.1,1.2,1.2 1.2,1.2,1.2,1.2), mean=1.1, stddev=0.0554], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.69,0.70,0.71 0.72,0.73,0.78,0.82,0.84 0.85,0.87,0.88,0.93), mean=0.777, stddev=0.0475], bias-{mean,stddev}=-0.05806,1.063, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn8.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=5.12e+04, self-repaired-proportion=0.027185, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.001,0.008,0.03 0.05,0.11,0.38,0.83,1.2 1.4,1.8,2.0,2.7), mean=0.507, stddev=0.46], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.005,0.02,0.07 0.11,0.20,0.42,0.65,0.77 0.82,0.89,0.91,0.97), mean=0.428, stddev=0.234], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.004,0.004,0.005,0.006,0.006 0.007,0.007,0.007,0.008), mean=0.00523, stddev=0.000856], oderiv-count=58880
component name=tdnn8.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn9.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00051712, max-change=0.75, linear-params-rms=0.02822, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.98,0.99,1.0 1.0,1.0,1.1,1.2,1.2 1.2,1.2,1.2,1.2), mean=1.1, stddev=0.0594], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.69,0.69,0.70 0.71,0.73,0.78,0.83,0.85 0.86,0.88,0.88,0.91), mean=0.78, stddev=0.0514], bias-{mean,stddev}=-0.05938,0.9981, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn9.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=3.79e+04, self-repaired-proportion=0.0406901, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0004,0.003,0.02 0.05,0.12,0.37,0.81,1.1 1.4,1.7,1.9,2.4), mean=0.494, stddev=0.441], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.003,0.01,0.06 0.12,0.20,0.41,0.64,0.75 0.84,0.89,0.93,0.98), mean=0.424, stddev=0.232], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.005 0.005,0.005,0.006,0.007,0.007 0.008,0.008,0.008,0.009), mean=0.00611, stddev=0.00102], oderiv-count=64512
component name=tdnn9.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn10.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00051712, max-change=0.75, linear-params-rms=0.02818, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,0.98,0.99,1.0 1.0,1.0,1.1,1.2,1.2 1.2,1.2,1.2,1.2), mean=1.1, stddev=0.059], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.68,0.69,0.70 0.71,0.73,0.78,0.83,0.84 0.86,0.87,0.88,0.92), mean=0.779, stddev=0.0496], bias-{mean,stddev}=0.02919,1.027, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn10.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=2.84e+04, self-repaired-proportion=0.0584077, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,6e-05,0.002,0.02 0.04,0.11,0.37,0.88,1.2 1.5,1.8,2.0,2.4), mean=0.513, stddev=0.468], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0004,0.009,0.05 0.11,0.20,0.42,0.67,0.78 0.84,0.92,0.95,0.98), mean=0.433, stddev=0.246], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.005,0.005 0.005,0.005,0.007,0.008,0.008 0.009,0.009,0.009,0.01), mean=0.0067, stddev=0.0012], oderiv-count=42240
component name=tdnn10.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn11.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00051712, max-change=0.75, linear-params-rms=0.02813, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.97,0.98,1.0 1.0,1.0,1.1,1.2,1.2 1.2,1.2,1.2,1.2), mean=1.1, stddev=0.0628], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.69,0.69,0.70 0.71,0.73,0.78,0.82,0.84 0.86,0.87,0.89,0.93), mean=0.778, stddev=0.0491], bias-{mean,stddev}=0.03175,1.019, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn11.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=1.84e+04, self-repaired-proportion=0.105295, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,6e-05,0.0002,0.004 0.02,0.09,0.35,0.86,1.2 1.6,2.0,2.2,2.6), mean=0.511, stddev=0.509], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0005,0.002,0.02 0.06,0.17,0.40,0.66,0.80 0.89,0.94,0.97,1.0), mean=0.422, stddev=0.262], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.006,0.006 0.006,0.006,0.008,0.009,0.01 0.01,0.01,0.01,0.01), mean=0.00796, stddev=0.00145], oderiv-count=30720
component name=tdnn11.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnnFINAL.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00051712, max-change=0.75, linear-params-rms=0.02821, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,0.98,0.99,1.0 1.0,1.0,1.1,1.2,1.2 1.2,1.2,1.2,1.3), mean=1.1, stddev=0.0686], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.68,0.69,0.70 0.71,0.72,0.78,0.83,0.85 0.87,0.89,0.91,0.94), mean=0.78, stddev=0.0559], bias-{mean,stddev}=-0.06728,0.9591, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnnFINAL.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=8.96e+03, self-repaired-proportion=0.11761, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,4e-06,0.0001,0.001 0.009,0.06,0.33,0.73,1.0 1.2,1.5,1.8,2.4), mean=0.433, stddev=0.414], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0001,0.0007,0.008 0.03,0.14,0.38,0.60,0.71 0.77,0.87,0.91,0.99), mean=0.382, stddev=0.24], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.008,0.008,0.008 0.009,0.009,0.01,0.01,0.01 0.02,0.02,0.02,0.02), mean=0.0117, stddev=0.00233], oderiv-count=14592
component name=tdnnFINAL.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=prefinal-affine-task-0.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=768, learning-rate=0.00051712, max-change=0.75, linear-params-rms=0.03807, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.95,0.96,0.97 0.98,1.0,1.1,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.05, stddev=0.0536], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.96,0.97,0.98 0.99,1.0,1.1,1.1,1.1 1.1,1.1,1.2,1.2), mean=1.05, stddev=0.0486], bias-{mean,stddev}=0.0008148,1.006, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-affine-task-0.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=5.38e+03, self-repaired-proportion=0.137178, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,2e-05,0.0007 0.005,0.04,0.30,0.69,0.85 0.98,1.2,1.2,1.4), mean=0.378, stddev=0.336], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0002,0.003 0.02,0.10,0.38,0.63,0.70 0.76,0.80,0.81,0.85), mean=0.38, stddev=0.248], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-08,2e-05,5e-05,0.0003 0.0009,0.003,0.01,0.02,0.02 0.02,0.02,0.02,0.02), mean=0.0113, stddev=0.00669], oderiv-count=7424
component name=prefinal-affine-task-0.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=output-0.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=152, learning-rate=0.00051712, max-change=1.5, linear-params-rms=0.04437, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.48,0.84,0.91 0.99,1.1,1.2,1.4,1.4 1.5,1.5,1.6,1.7), mean=1.21, stddev=0.195], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-07,0.0005,0.002,0.008 0.03,0.11,0.54,0.74,0.79 0.84,0.89,0.91,1.0), mean=0.462, stddev=0.292], bias-{mean,stddev}=-4.812e-08,0.003287, rank-in=20, rank-out=76, num-samples-history=2000, update-period=4, alpha=4
component name=output-0.log-softmax type=LogSoftmaxComponent, dim=152, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.01,0.01,0.02 0.03,0.04,0.05,0.07,0.08 0.10,0.13,0.19,0.24), mean=0.0568, stddev=0.0313], oderiv-count=6656
component name=prefinal-affine-task-1.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=768, learning-rate=0.00051712, max-change=0.75, linear-params-rms=0.03616, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.94,0.95,0.96 0.97,0.98,1.0,1.0,1.0 1.0,1.1,1.1,1.1), mean=1, stddev=0.0265], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.95,0.96 0.97,0.98,1.0,1.0,1.0 1.0,1.1,1.1,1.1), mean=1, stddev=0.026], bias-{mean,stddev}=-0.07008,1.031, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-affine-task-1.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=4.86e+03, self-repaired-proportion=0.159234, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,2e-05,0.0007 0.004,0.03,0.28,0.64,0.84 0.97,1.1,1.3,1.7), mean=0.353, stddev=0.333], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0004,0.003 0.02,0.08,0.45,0.72,0.82 0.86,0.90,0.93,0.98), mean=0.422, stddev=0.294], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-09,2e-06,1e-05,7e-05 0.0003,0.001,0.005,0.007,0.008 0.009,0.009,0.01,0.01), mean=0.00459, stddev=0.00295], oderiv-count=6400
component name=prefinal-affine-task-1.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=output-1.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=192, learning-rate=0.00051712, max-change=1.5, linear-params-rms=0.02242, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.07 0.07,0.07,0.07,0.94,1.0 1.1,1.1,1.1,1.2), mean=0.453, stddev=0.426], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,8e-05,0.0008,0.004 0.01,0.06,0.31,0.42,0.46 0.49,0.51,0.53,0.56), mean=0.261, stddev=0.169], bias-{mean,stddev}=2.571e-08,0.002036, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-1.log-softmax type=LogSoftmaxComponent, dim=192, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.02,0.02 0.03,0.05,0.05,0.07), mean=0.0081, stddev=0.0119], oderiv-count=7936
nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/37.raw MTL/exp/nnet3/multitask/38.raw 
LOG (nnet3-show-progress[5.4.217~1-8ae5]:SelectGpuId():cu-device.cc:123) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.504053 tdnn2.affine:0.352559 tdnn3.affine:0.480278 tdnn4.affine:0.52352 tdnn5.affine:0.561468 tdnn6.affine:0.600628 tdnn7.affine:0.640757 tdnn8.affine:0.667983 tdnn9.affine:0.684219 tdnn10.affine:0.674407 tdnn11.affine:0.655495 tdnnFINAL.affine:0.661098 prefinal-affine-task-0.affine:0.399728 output-0.affine:0.357693 prefinal-affine-task-1.affine:0.182406 output-1.affine:0.166507 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:42.476 tdnn2.affine:41 tdnn3.affine:40.5511 tdnn4.affine:40.5744 tdnn5.affine:40.9462 tdnn6.affine:40.9915 tdnn7.affine:40.5807 tdnn8.affine:42.4321 tdnn9.affine:41.3166 tdnn10.affine:41.8102 tdnn11.affine:41.614 tdnnFINAL.affine:40.6057 prefinal-affine-task-0.affine:40.3997 output-0.affine:15.1602 prefinal-affine-task-1.affine:39.8961 output-1.affine:8.61057 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0118709 tdnn2.affine:0.00860024 tdnn3.affine:0.011846 tdnn4.affine:0.0129053 tdnn5.affine:0.0137151 tdnn6.affine:0.014656 tdnn7.affine:0.0157944 tdnn8.affine:0.0157469 tdnn9.affine:0.0165657 tdnn10.affine:0.0161353 tdnn11.affine:0.0157567 tdnnFINAL.affine:0.0162854 prefinal-affine-task-0.affine:0.0098951 output-0.affine:0.0236924 prefinal-affine-task-1.affine:0.00457205 output-1.affine:0.0194772 ]
# Accounting: time=4 threads=1
# Ended (code 0) at Fri Jul 27 01:54:55 UTC 2018, elapsed time 4 seconds
