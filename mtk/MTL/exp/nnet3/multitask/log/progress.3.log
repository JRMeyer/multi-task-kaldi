# nnet3-info MTL/exp/nnet3/multitask/3.raw && nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/2.raw MTL/exp/nnet3/multitask/3.raw 
# Started at Fri Jul 27 00:58:49 UTC 2018
#
nnet3-info MTL/exp/nnet3/multitask/3.raw 
num-parameters: 13891160
modulus: 1
input-node name=input dim=13
component-node name=tdnn1.affine component=tdnn1.affine input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=65 output-dim=768
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=768 output-dim=768
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=768 output-dim=768
component-node name=tdnn2.affine component=tdnn2.affine input=tdnn1.renorm input-dim=768 output-dim=768
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=768 output-dim=768
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=768 output-dim=768
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -1), Offset(tdnn2.renorm, 2)) input-dim=1536 output-dim=768
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=768 output-dim=768
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=768 output-dim=768
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -3), Offset(tdnn3.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=768 output-dim=768
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=768 output-dim=768
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -3), Offset(tdnn4.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=768 output-dim=768
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=768 output-dim=768
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.renorm, -3), Offset(tdnn5.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=768 output-dim=768
component-node name=tdnn6.renorm component=tdnn6.renorm input=tdnn6.relu input-dim=768 output-dim=768
component-node name=tdnn7.affine component=tdnn7.affine input=Append(Offset(tdnn6.renorm, -3), Offset(tdnn6.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn7.relu component=tdnn7.relu input=tdnn7.affine input-dim=768 output-dim=768
component-node name=tdnn7.renorm component=tdnn7.renorm input=tdnn7.relu input-dim=768 output-dim=768
component-node name=tdnn8.affine component=tdnn8.affine input=Append(Offset(tdnn7.renorm, -3), Offset(tdnn7.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn8.relu component=tdnn8.relu input=tdnn8.affine input-dim=768 output-dim=768
component-node name=tdnn8.renorm component=tdnn8.renorm input=tdnn8.relu input-dim=768 output-dim=768
component-node name=tdnn9.affine component=tdnn9.affine input=Append(Offset(tdnn8.renorm, -3), Offset(tdnn8.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn9.relu component=tdnn9.relu input=tdnn9.affine input-dim=768 output-dim=768
component-node name=tdnn9.renorm component=tdnn9.renorm input=tdnn9.relu input-dim=768 output-dim=768
component-node name=tdnn10.affine component=tdnn10.affine input=Append(Offset(tdnn9.renorm, -3), Offset(tdnn9.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn10.relu component=tdnn10.relu input=tdnn10.affine input-dim=768 output-dim=768
component-node name=tdnn10.renorm component=tdnn10.renorm input=tdnn10.relu input-dim=768 output-dim=768
component-node name=tdnn11.affine component=tdnn11.affine input=Append(Offset(tdnn10.renorm, -3), Offset(tdnn10.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn11.relu component=tdnn11.relu input=tdnn11.affine input-dim=768 output-dim=768
component-node name=tdnn11.renorm component=tdnn11.renorm input=tdnn11.relu input-dim=768 output-dim=768
component-node name=tdnnFINAL.affine component=tdnnFINAL.affine input=Append(Offset(tdnn11.renorm, -3), Offset(tdnn11.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnnFINAL.relu component=tdnnFINAL.relu input=tdnnFINAL.affine input-dim=768 output-dim=768
component-node name=tdnnFINAL.renorm component=tdnnFINAL.renorm input=tdnnFINAL.relu input-dim=768 output-dim=768
component-node name=prefinal-affine-task-0.affine component=prefinal-affine-task-0.affine input=tdnnFINAL.renorm input-dim=768 output-dim=768
component-node name=prefinal-affine-task-0.relu component=prefinal-affine-task-0.relu input=prefinal-affine-task-0.affine input-dim=768 output-dim=768
component-node name=prefinal-affine-task-0.renorm component=prefinal-affine-task-0.renorm input=prefinal-affine-task-0.relu input-dim=768 output-dim=768
component-node name=output-0.affine component=output-0.affine input=prefinal-affine-task-0.renorm input-dim=768 output-dim=152
component-node name=output-0.log-softmax component=output-0.log-softmax input=output-0.affine input-dim=152 output-dim=152
output-node name=output-0 input=output-0.log-softmax dim=152 objective=linear
component-node name=prefinal-affine-task-1.affine component=prefinal-affine-task-1.affine input=tdnnFINAL.renorm input-dim=768 output-dim=768
component-node name=prefinal-affine-task-1.relu component=prefinal-affine-task-1.relu input=prefinal-affine-task-1.affine input-dim=768 output-dim=768
component-node name=prefinal-affine-task-1.renorm component=prefinal-affine-task-1.renorm input=prefinal-affine-task-1.relu input-dim=768 output-dim=768
component-node name=output-1.affine component=output-1.affine input=prefinal-affine-task-1.renorm input-dim=768 output-dim=192
component-node name=output-1.log-softmax component=output-1.log-softmax input=output-1.affine input-dim=192 output-dim=192
output-node name=output-1 input=output-1.log-softmax dim=192 objective=linear
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=65, output-dim=768, learning-rate=0.00141609, max-change=0.75, linear-params-rms=0.1246, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.80,0.82,0.85 0.89,0.92,1.0,1.1,1.1 1.1,1.2,1.2,1.3), mean=1, stddev=0.0892], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.0,3.0,3.0,3.2 3.3,3.4,3.5,3.5,3.6 3.6,3.7,3.7,3.8), mean=3.45, stddev=0.132], bias-{mean,stddev}=0.02984,1.026, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=1.69e+05, self-repaired-proportion=0.089018, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.03,0.04,0.21,1.1,1.6 2.0,2.5,3.0,6.7), mean=0.558, stddev=0.734], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.06 0.07,0.10,0.32,0.79,0.90 0.93,0.95,0.98,1.0), mean=0.412, stddev=0.316], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0009,0.0009,0.001 0.001,0.001,0.001,0.002,0.002 0.002,0.002,0.002,0.003), mean=0.00135, stddev=0.000337], oderiv-count=312320
component name=tdnn1.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=768, learning-rate=0.00141609, max-change=0.75, linear-params-rms=0.0364, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.95,0.95,0.96 0.97,0.99,1.0,1.0,1.0 1.1,1.1,1.1,1.1), mean=1.01, stddev=0.0265], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.94,0.96,0.96 0.97,0.99,1.0,1.0,1.0 1.1,1.1,1.1,1.1), mean=1.01, stddev=0.0268], bias-{mean,stddev}=0.0117,1.052, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=2.25e+05, self-repaired-proportion=0.119575, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.005,0.007,0.01 0.02,0.05,0.26,0.77,1.0 1.4,1.6,1.8,2.9), mean=0.425, stddev=0.444], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.03,0.04,0.06 0.08,0.15,0.46,0.80,0.89 0.94,0.97,0.98,1.0), mean=0.477, stddev=0.297], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.002,0.002,0.003,0.003), mean=0.00154, stddev=0.000327], oderiv-count=281600
component name=tdnn2.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00141609, max-change=0.75, linear-params-rms=0.02575, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.96,0.97,0.98 0.99,0.99,1.0,1.0,1.0 1.0,1.1,1.1,1.1), mean=1.01, stddev=0.0198], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.67,0.67,0.68 0.69,0.70,0.71,0.73,0.74 0.74,0.75,0.76,0.81), mean=0.713, stddev=0.0181], bias-{mean,stddev}=0.01785,1.008, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=7.42e+04, self-repaired-proportion=0.143294, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,5e-05,0.0008,0.009 0.02,0.05,0.32,0.94,1.4 1.7,2.1,2.5,3.5), mean=0.523, stddev=0.579], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0004,0.005,0.04 0.07,0.14,0.45,0.77,0.88 0.95,0.97,0.99,1.0), mean=0.462, stddev=0.299], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.002,0.002,0.002,0.003 0.003,0.003,0.004,0.005), mean=0.00192, stddev=0.000513], oderiv-count=158720
component name=tdnn3.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00141609, max-change=0.75, linear-params-rms=0.02572, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.96,0.97,0.97 0.98,0.99,1.0,1.0,1.0 1.0,1.0,1.1,1.1), mean=1.01, stddev=0.0197], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.66,0.67,0.68 0.69,0.70,0.71,0.73,0.74 0.74,0.76,0.76,0.81), mean=0.712, stddev=0.0198], bias-{mean,stddev}=0.007504,1.004, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=9.22e+04, self-repaired-proportion=0.155909, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,2e-05,0.0008,0.008 0.02,0.04,0.26,0.90,1.3 1.6,1.9,2.4,3.5), mean=0.491, stddev=0.566], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0002,0.006,0.03 0.06,0.13,0.42,0.74,0.89 0.93,0.97,1.0,1.0), mean=0.442, stddev=0.296], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.002,0.002,0.002,0.002,0.003 0.003,0.003,0.003,0.004), mean=0.002, stddev=0.00048], oderiv-count=122112
component name=tdnn4.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00141609, max-change=0.75, linear-params-rms=0.02571, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.96,0.96,0.98 0.98,0.99,1.0,1.0,1.0 1.0,1.0,1.1,1.1), mean=1.01, stddev=0.0196], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.66,0.67,0.68 0.69,0.70,0.71,0.73,0.73 0.74,0.75,0.76,0.79), mean=0.712, stddev=0.0182], bias-{mean,stddev}=0.02207,1.015, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=7.99e+04, self-repaired-proportion=0.153556, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0001,0.004 0.01,0.04,0.30,0.88,1.2 1.6,2.0,2.2,3.3), mean=0.49, stddev=0.532], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.001,0.02 0.06,0.14,0.43,0.74,0.86 0.93,0.96,0.98,1.0), mean=0.444, stddev=0.29], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.002,0.002,0.002,0.003 0.003,0.003,0.003,0.003), mean=0.00194, stddev=0.00041], oderiv-count=120832
component name=tdnn5.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00141609, max-change=0.75, linear-params-rms=0.02569, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.96,0.97,0.98 0.98,0.99,1.0,1.0,1.0 1.0,1.0,1.1,1.1), mean=1.01, stddev=0.0184], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.66,0.67,0.68 0.69,0.70,0.71,0.73,0.73 0.74,0.75,0.76,0.80), mean=0.712, stddev=0.0186], bias-{mean,stddev}=0.04589,1.008, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=5.73e+04, self-repaired-proportion=0.167386, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,7e-06,0.0001,0.003 0.01,0.04,0.32,0.97,1.3 1.6,2.0,2.4,3.5), mean=0.527, stddev=0.566], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,5e-05,0.0009,0.02 0.05,0.14,0.46,0.79,0.91 0.95,0.98,1.0,1.0), mean=0.462, stddev=0.308], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.002,0.002,0.002,0.002,0.002 0.003,0.003,0.003,0.004), mean=0.00195, stddev=0.000394], oderiv-count=93184
component name=tdnn6.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn7.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00141609, max-change=0.75, linear-params-rms=0.02573, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.96,0.97,0.98 0.98,0.99,1.0,1.0,1.0 1.0,1.0,1.1,1.1), mean=1.01, stddev=0.0196], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.66,0.67,0.68 0.69,0.70,0.71,0.73,0.74 0.74,0.76,0.76,0.84), mean=0.713, stddev=0.0193], bias-{mean,stddev}=0.01659,0.974, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn7.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=7.07e+04, self-repaired-proportion=0.185872, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,2e-06,3e-05,0.001 0.007,0.03,0.27,0.88,1.3 1.7,2.0,2.3,3.4), mean=0.494, stddev=0.571], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,3e-05,0.0005,0.007 0.04,0.10,0.42,0.76,0.89 0.95,0.98,0.99,1.0), mean=0.44, stddev=0.307], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.002,0.003,0.003 0.003,0.004,0.004,0.004), mean=0.00238, stddev=0.000483], oderiv-count=89088
component name=tdnn7.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn8.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00141609, max-change=0.75, linear-params-rms=0.02571, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.97,0.97,0.98 0.98,0.99,1.0,1.0,1.0 1.0,1.0,1.1,1.1), mean=1.01, stddev=0.0185], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.67,0.67,0.68 0.69,0.70,0.71,0.73,0.73 0.74,0.75,0.76,0.79), mean=0.712, stddev=0.0182], bias-{mean,stddev}=-0.05802,1.063, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn8.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=4.99e+04, self-repaired-proportion=0.258292, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,6e-05 0.003,0.02,0.29,0.97,1.4 1.7,2.0,2.4,3.5), mean=0.515, stddev=0.599], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0006 0.02,0.06,0.43,0.78,0.91 0.96,0.99,1.0,1.0), mean=0.436, stddev=0.322], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.002,0.003,0.003 0.003,0.003,0.003,0.004), mean=0.00223, stddev=0.000416], oderiv-count=66560
component name=tdnn8.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn9.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00141609, max-change=0.75, linear-params-rms=0.02572, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.97,0.97,0.98 0.98,0.99,1.0,1.0,1.0 1.0,1.0,1.1,1.1), mean=1.01, stddev=0.0194], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.67,0.67,0.68 0.69,0.70,0.71,0.73,0.74 0.74,0.75,0.76,0.80), mean=0.713, stddev=0.0189], bias-{mean,stddev}=-0.05928,0.9982, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn9.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=3.89e+04, self-repaired-proportion=0.215954, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,3e-05 0.003,0.02,0.30,0.87,1.3 1.6,2.0,2.3,2.9), mean=0.49, stddev=0.542], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0004 0.02,0.10,0.42,0.77,0.90 0.94,0.99,1.0,1.0), mean=0.437, stddev=0.313], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.003 0.003,0.003,0.003,0.004,0.004 0.004,0.005,0.005,0.006), mean=0.00322, stddev=0.000557], oderiv-count=58368
component name=tdnn9.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn10.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00141609, max-change=0.75, linear-params-rms=0.02571, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.97,0.97,0.98 0.98,0.99,1.0,1.0,1.0 1.0,1.0,1.1,1.1), mean=1.01, stddev=0.0187], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.66,0.67,0.68 0.69,0.70,0.71,0.73,0.74 0.74,0.75,0.76,0.79), mean=0.712, stddev=0.0193], bias-{mean,stddev}=0.02929,1.028, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn10.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=2.92e+04, self-repaired-proportion=0.227702, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,8e-05 0.003,0.03,0.31,1.1,1.5 1.8,2.1,2.5,3.7), mean=0.554, stddev=0.621], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0007 0.02,0.10,0.43,0.79,0.91 0.97,0.99,1.0,1.0), mean=0.455, stddev=0.32], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.003 0.003,0.003,0.004,0.004,0.005 0.005,0.005,0.005,0.006), mean=0.00367, stddev=0.000617], oderiv-count=38400
component name=tdnn10.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn11.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00141609, max-change=0.75, linear-params-rms=0.02576, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.96,0.97,0.97 0.98,0.99,1.0,1.0,1.0 1.0,1.0,1.1,1.1), mean=1.01, stddev=0.0202], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.66,0.67,0.68 0.69,0.70,0.71,0.73,0.74 0.74,0.76,0.76,0.80), mean=0.714, stddev=0.0191], bias-{mean,stddev}=0.03184,1.019, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn11.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=2.05e+04, self-repaired-proportion=0.291088, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.0004,0.01,0.27,1.2,1.7 2.2,2.6,3.3,3.8), mean=0.602, stddev=0.744], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.004,0.07,0.42,0.84,0.94 0.98,0.99,1.0,1.0), mean=0.445, stddev=0.344], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.004,0.004,0.005,0.006,0.006 0.007,0.007,0.007,0.008), mean=0.0052, stddev=0.000821], oderiv-count=28672
component name=tdnn11.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnnFINAL.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00141609, max-change=0.75, linear-params-rms=0.02576, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.97,0.97,0.98 0.98,0.99,1.0,1.0,1.0 1.0,1.1,1.1,1.1), mean=1.01, stddev=0.0203], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.66,0.66,0.68 0.69,0.70,0.71,0.73,0.74 0.75,0.76,0.76,0.78), mean=0.714, stddev=0.02], bias-{mean,stddev}=-0.06713,0.9593, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnnFINAL.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=9.47e+03, self-repaired-proportion=0.327821, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.0001,0.006,0.22,1.1,1.7 2.1,2.7,3.4,4.7), mean=0.586, stddev=0.78], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.001,0.03,0.36,0.81,0.94 0.97,0.99,1.0,1.0), mean=0.421, stddev=0.349], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.006,0.006 0.006,0.007,0.008,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.00873, stddev=0.00207], oderiv-count=15616
component name=tdnnFINAL.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=prefinal-affine-task-0.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=768, learning-rate=0.00141609, max-change=0.75, linear-params-rms=0.03629, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.94,0.95,0.96 0.97,0.98,1.0,1.0,1.0 1.1,1.1,1.1,1.1), mean=1.01, stddev=0.0272], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.95,0.96 0.97,0.98,1.0,1.0,1.0 1.0,1.1,1.1,1.1), mean=1.01, stddev=0.026], bias-{mean,stddev}=0.00133,1.007, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-affine-task-0.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=4.1e+03, self-repaired-proportion=0.467936, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.001,0.19,1.3,1.9 2.4,3.0,3.3,4.7), mean=0.658, stddev=0.879], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.01,0.36,0.94,0.99 1.0,1.0,1.0,1.0), mean=0.456, stddev=0.398], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-08,2e-08,3e-08,4e-08 9e-06,0.0005,0.01,0.02,0.02 0.02,0.02,0.02,0.03), mean=0.0098, stddev=0.00746], oderiv-count=6400
component name=prefinal-affine-task-0.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=output-0.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=152, learning-rate=0.00141609, max-change=1.5, linear-params-rms=0.01807, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.25,0.29 0.35,0.39,0.48,0.56,0.59 0.64,0.79,0.97,1.1), mean=0.483, stddev=0.133], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,4e-07,6e-07,8e-07 0.0002,0.01,0.19,0.31,0.34 0.36,0.40,0.41,0.50), mean=0.176, stddev=0.137], bias-{mean,stddev}=-4.873e-08,0.002615, rank-in=20, rank-out=76, num-samples-history=2000, update-period=4, alpha=4
component name=output-0.log-softmax type=LogSoftmaxComponent, dim=152, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.009,0.01,0.02 0.03,0.04,0.05,0.07,0.08 0.10,0.13,0.19,0.24), mean=0.0569, stddev=0.0311], oderiv-count=7168
component name=prefinal-affine-task-1.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=768, learning-rate=0.00141609, max-change=0.75, linear-params-rms=0.03607, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.94,0.95,0.96 0.97,0.98,1.0,1.0,1.0 1.0,1.0,1.1,1.1), mean=0.999, stddev=0.0252], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.94,0.95,0.96 0.97,0.98,1.0,1.0,1.0 1.0,1.0,1.1,1.1), mean=0.999, stddev=0.025], bias-{mean,stddev}=-0.0697,1.032, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-affine-task-1.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=4.35e+03, self-repaired-proportion=0.479948, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.001,0.19,1.0,1.4 1.9,2.4,2.7,3.7), mean=0.505, stddev=0.665], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.008,0.42,0.94,0.99 1.0,1.0,1.0,1.0), mean=0.466, stddev=0.399], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-09,5e-09,7e-09,9e-09 1e-08,5e-05,0.002,0.003,0.004 0.004,0.005,0.005,0.005), mean=0.00181, stddev=0.0015], oderiv-count=7424
component name=prefinal-affine-task-1.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=output-1.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=192, learning-rate=0.00141609, max-change=1.5, linear-params-rms=0.00801, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.07 0.07,0.07,0.07,0.30,0.37 0.41,0.45,0.62,0.66), mean=0.174, stddev=0.137], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-07,3e-07,4e-07 7e-07,0.003,0.09,0.15,0.18 0.20,0.22,0.23,0.28), mean=0.0852, stddev=0.0711], bias-{mean,stddev}=1.802e-08,0.00159, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-1.log-softmax type=LogSoftmaxComponent, dim=192, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.02,0.02 0.03,0.05,0.05,0.07), mean=0.00806, stddev=0.012], oderiv-count=7424
nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/2.raw MTL/exp/nnet3/multitask/3.raw 
LOG (nnet3-show-progress[5.4.217~1-8ae5]:SelectGpuId():cu-device.cc:123) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:1.79793 tdnn2.affine:1.7216 tdnn3.affine:1.89456 tdnn4.affine:1.81314 tdnn5.affine:1.73784 tdnn6.affine:1.71989 tdnn7.affine:1.76192 tdnn8.affine:1.78728 tdnn9.affine:1.83677 tdnn10.affine:1.88315 tdnn11.affine:2.04431 tdnnFINAL.affine:2.37776 prefinal-affine-task-0.affine:2.10225 output-0.affine:2.95737 prefinal-affine-task-1.affine:0.725609 output-1.affine:1.198 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:39.8022 tdnn2.affine:40.3814 tdnn3.affine:39.5406 tdnn4.affine:39.4266 tdnn5.affine:39.6376 tdnn6.affine:39.4977 tdnn7.affine:38.8572 tdnn8.affine:40.6243 tdnn9.affine:39.3504 tdnn10.affine:39.8937 tdnn11.affine:39.7625 tdnnFINAL.affine:38.6438 prefinal-affine-task-0.affine:39.4336 output-0.affine:6.17446 prefinal-affine-task-1.affine:39.8566 output-1.affine:3.07592 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0453708 tdnn2.affine:0.0426799 tdnn3.affine:0.0479735 tdnn4.affine:0.0460488 tdnn5.affine:0.0439034 tdnn6.affine:0.0436048 tdnn7.affine:0.0454113 tdnn8.affine:0.0440556 tdnn9.affine:0.0467493 tdnn10.affine:0.0472757 tdnn11.affine:0.0514943 tdnnFINAL.affine:0.0616499 prefinal-affine-task-0.affine:0.0533685 output-0.affine:0.57 prefinal-affine-task-1.affine:0.01821 output-1.affine:0.461306 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Fri Jul 27 00:58:51 UTC 2018, elapsed time 1 seconds
