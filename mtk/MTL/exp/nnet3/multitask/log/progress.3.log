# nnet3-info MTL/exp/nnet3/multitask/3.raw && nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/2.raw MTL/exp/nnet3/multitask/3.raw 
# Started at Tue Jul 24 11:13:40 UTC 2018
#
nnet3-info MTL/exp/nnet3/multitask/3.raw 
num-parameters: 1486432
modulus: 1
input-node name=input dim=13
component-node name=tdnn1.affine component=tdnn1.affine input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=65 output-dim=256
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=256 output-dim=256
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=256 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=tdnn1.renorm input-dim=256 output-dim=256
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=256 output-dim=256
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=256 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -1), Offset(tdnn2.renorm, 2)) input-dim=512 output-dim=256
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=256 output-dim=256
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=256 output-dim=256
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -3), Offset(tdnn3.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=256 output-dim=256
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=256 output-dim=256
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -3), Offset(tdnn4.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.renorm, -3), Offset(tdnn5.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=256 output-dim=256
component-node name=tdnn6.renorm component=tdnn6.renorm input=tdnn6.relu input-dim=256 output-dim=256
component-node name=tdnn7.affine component=tdnn7.affine input=Append(Offset(tdnn6.renorm, -3), Offset(tdnn6.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn7.relu component=tdnn7.relu input=tdnn7.affine input-dim=256 output-dim=256
component-node name=tdnn7.renorm component=tdnn7.renorm input=tdnn7.relu input-dim=256 output-dim=256
component-node name=tdnn8.affine component=tdnn8.affine input=Append(Offset(tdnn7.renorm, -3), Offset(tdnn7.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn8.relu component=tdnn8.relu input=tdnn8.affine input-dim=256 output-dim=256
component-node name=tdnn8.renorm component=tdnn8.renorm input=tdnn8.relu input-dim=256 output-dim=256
component-node name=tdnn9.affine component=tdnn9.affine input=Append(Offset(tdnn8.renorm, -3), Offset(tdnn8.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn9.relu component=tdnn9.relu input=tdnn9.affine input-dim=256 output-dim=256
component-node name=tdnn9.renorm component=tdnn9.renorm input=tdnn9.relu input-dim=256 output-dim=256
component-node name=tdnn10.affine component=tdnn10.affine input=Append(Offset(tdnn9.renorm, -3), Offset(tdnn9.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn10.relu component=tdnn10.relu input=tdnn10.affine input-dim=256 output-dim=256
component-node name=tdnn10.renorm component=tdnn10.renorm input=tdnn10.relu input-dim=256 output-dim=256
component-node name=tdnn11.affine component=tdnn11.affine input=Append(Offset(tdnn10.renorm, -3), Offset(tdnn10.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnn11.relu component=tdnn11.relu input=tdnn11.affine input-dim=256 output-dim=256
component-node name=tdnn11.renorm component=tdnn11.renorm input=tdnn11.relu input-dim=256 output-dim=256
component-node name=tdnnFINAL.affine component=tdnnFINAL.affine input=Append(Offset(tdnn11.renorm, -3), Offset(tdnn11.renorm, 3)) input-dim=512 output-dim=256
component-node name=tdnnFINAL.relu component=tdnnFINAL.relu input=tdnnFINAL.affine input-dim=256 output-dim=256
component-node name=tdnnFINAL.renorm component=tdnnFINAL.renorm input=tdnnFINAL.relu input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.affine component=prefinal-affine-task-0.affine input=tdnnFINAL.renorm input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.relu component=prefinal-affine-task-0.relu input=prefinal-affine-task-0.affine input-dim=256 output-dim=256
component-node name=prefinal-affine-task-0.renorm component=prefinal-affine-task-0.renorm input=prefinal-affine-task-0.relu input-dim=256 output-dim=256
component-node name=output-0.affine component=output-0.affine input=prefinal-affine-task-0.renorm input-dim=256 output-dim=96
component-node name=output-0.log-softmax component=output-0.log-softmax input=output-0.affine input-dim=96 output-dim=96
output-node name=output-0 input=output-0.log-softmax dim=96 objective=linear
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=65, output-dim=256, learning-rate=0.00133688, max-change=0.75, linear-params-rms=0.1271, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.81,0.84,0.86 0.89,0.94,1.0,1.1,1.1 1.2,1.2,1.3,1.4), mean=1.02, stddev=0.102], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.9 1.9,1.9,2.0,2.1,2.2 2.3,2.4,2.4,2.5), mean=2.03, stddev=0.14], bias-{mean,stddev}=0.01587,1.086, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.13e+05, self-repaired-proportion=0.269271, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.006 0.01,0.03,0.12,1.4,2.2 3.3,4.8,5.7,8.3), mean=0.776, stddev=1.25], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.02 0.05,0.06,0.20,0.82,0.93 0.96,0.98,0.99,1.0), mean=0.378, stddev=0.348], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.001,0.001,0.001 0.001,0.001,0.002,0.003,0.004 0.004,0.005,0.005,0.007), mean=0.00226, stddev=0.00102], oderiv-count=138240
component name=tdnn1.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=256, learning-rate=0.00133688, max-change=0.75, linear-params-rms=0.06311, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.88,0.90,0.93 0.95,0.97,1.0,1.0,1.1 1.1,1.1,1.1,1.2), mean=1.01, stddev=0.0506], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.91,0.92,0.93 0.95,0.97,1.0,1.0,1.1 1.1,1.1,1.1,1.1), mean=1.01, stddev=0.0468], bias-{mean,stddev}=0.0339,1.09, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.18e+05, self-repaired-proportion=0.400856, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,2e-05 0.002,0.01,0.17,0.80,1.3 1.7,2.1,2.4,2.9), mean=0.452, stddev=0.59], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0003 0.01,0.07,0.37,0.86,0.95 0.98,1.0,1.0,1.0), mean=0.451, stddev=0.353], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.005,0.005 0.007,0.007,0.008,0.01), mean=0.0036, stddev=0.00142], oderiv-count=163840
component name=tdnn2.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00133688, max-change=0.75, linear-params-rms=0.0451, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.93,0.95,0.96 0.98,0.99,1.0,1.0,1.1 1.1,1.1,1.1,1.2), mean=1.02, stddev=0.0408], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.64,0.65,0.66 0.68,0.69,0.72,0.75,0.76 0.78,0.79,0.80,0.86), mean=0.721, stddev=0.0348], bias-{mean,stddev}=0.07201,0.9831, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.86e+04, self-repaired-proportion=0.39974, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.0001,0.007,0.24,1.1,1.9 2.5,2.7,2.9,3.7), mean=0.611, stddev=0.803], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.001,0.04,0.42,0.84,0.93 0.97,0.99,1.0,1.0), mean=0.443, stddev=0.355], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.002,0.002 0.002,0.002,0.003,0.005,0.007 0.009,0.01,0.01,0.01), mean=0.00404, stddev=0.00213], oderiv-count=74240
component name=tdnn3.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00133688, max-change=0.75, linear-params-rms=0.04507, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.94,0.95,0.96 0.97,0.99,1.0,1.0,1.1 1.1,1.1,1.1,1.2), mean=1.02, stddev=0.0417], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.64,0.64,0.66 0.67,0.69,0.72,0.75,0.77 0.78,0.81,0.81,0.82), mean=0.72, stddev=0.0374], bias-{mean,stddev}=-0.04962,1.017, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=3.23e+04, self-repaired-proportion=0.371094, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 4e-07,0.001,0.17,1.1,1.9 2.4,3.2,3.5,5.3), mean=0.6, stddev=0.895], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 3e-05,0.01,0.32,0.84,0.92 0.96,0.98,1.0,1.0), mean=0.397, stddev=0.358], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.002,0.002 0.002,0.002,0.003,0.005,0.006 0.008,0.01,0.01,0.01), mean=0.00365, stddev=0.00193], oderiv-count=73728
component name=tdnn4.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00133688, max-change=0.75, linear-params-rms=0.04494, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.93,0.94,0.96 0.97,0.99,1.0,1.0,1.1 1.1,1.1,1.1,1.2), mean=1.02, stddev=0.0389], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.64,0.65,0.67 0.68,0.69,0.72,0.75,0.77 0.78,0.80,0.81,0.84), mean=0.718, stddev=0.0358], bias-{mean,stddev}=-0.1219,0.9716, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.51e+04, self-repaired-proportion=0.326389, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 1e-06,0.005,0.19,1.0,1.7 2.3,2.8,3.5,4.6), mean=0.571, stddev=0.834], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 2e-05,0.03,0.31,0.80,0.89 0.94,0.98,1.0,1.0), mean=0.392, stddev=0.345], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.002 0.002,0.002,0.003,0.005,0.006 0.007,0.009,0.01,0.01), mean=0.0035, stddev=0.00189], oderiv-count=61440
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00133688, max-change=0.75, linear-params-rms=0.04505, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.93,0.94,0.96 0.97,0.99,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=1.02, stddev=0.0371], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.65,0.67 0.67,0.69,0.72,0.75,0.76 0.78,0.80,0.81,0.84), mean=0.72, stddev=0.0348], bias-{mean,stddev}=0.08829,1.067, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=3.58e+04, self-repaired-proportion=0.336143, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 2e-07,0.003,0.22,1.3,1.8 2.5,3.2,3.6,3.8), mean=0.636, stddev=0.87], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 6e-05,0.02,0.33,0.85,0.92 0.98,1.0,1.0,1.0), mean=0.427, stddev=0.375], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.003,0.004,0.006,0.007 0.008,0.008,0.009,0.01), mean=0.00414, stddev=0.00183], oderiv-count=51968
component name=tdnn6.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn7.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00133688, max-change=0.75, linear-params-rms=0.0451, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.95,0.96 0.98,0.99,1.0,1.0,1.1 1.1,1.1,1.1,1.2), mean=1.02, stddev=0.0356], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.64,0.65,0.66 0.68,0.69,0.72,0.75,0.76 0.78,0.79,0.80,0.82), mean=0.721, stddev=0.0356], bias-{mean,stddev}=-0.02739,1.022, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn7.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=2.3e+04, self-repaired-proportion=0.329963, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.003,0.19,1.2,1.7 2.1,2.7,3.2,4.8), mean=0.587, stddev=0.801], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.02,0.38,0.84,0.91 0.96,0.98,1.0,1.0), mean=0.418, stddev=0.355], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.003,0.004,0.006,0.007 0.008,0.009,0.01,0.01), mean=0.0043, stddev=0.00198], oderiv-count=41472
component name=tdnn7.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn8.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00133688, max-change=0.75, linear-params-rms=0.04476, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.93,0.95,0.96 0.97,0.98,1.0,1.0,1.1 1.1,1.1,1.1,1.1), mean=1.01, stddev=0.0347], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.64,0.66,0.67 0.68,0.69,0.71,0.74,0.76 0.77,0.78,0.79,0.80), mean=0.715, stddev=0.0315], bias-{mean,stddev}=-0.00322,1.067, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn8.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=3.33e+04, self-repaired-proportion=0.399957, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,6e-05,0.21,1.2,1.7 2.3,2.8,2.9,3.4), mean=0.6, stddev=0.778], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.001,0.36,0.84,0.95 0.98,1.0,1.0,1.0), mean=0.421, stddev=0.37], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.003 0.003,0.003,0.004,0.006,0.007 0.008,0.009,0.01,0.01), mean=0.00472, stddev=0.00181], oderiv-count=34560
component name=tdnn8.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn9.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00133688, max-change=0.75, linear-params-rms=0.04483, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.93,0.94,0.96 0.97,0.99,1.0,1.0,1.1 1.1,1.1,1.1,1.1), mean=1.01, stddev=0.0351], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.65,0.65,0.66 0.68,0.69,0.72,0.74,0.76 0.78,0.79,0.79,0.83), mean=0.716, stddev=0.0328], bias-{mean,stddev}=-0.03459,0.9976, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn9.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=2.05e+04, self-repaired-proportion=0.329368, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.004,0.26,1.1,1.6 2.0,2.9,3.1,3.6), mean=0.575, stddev=0.746], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.04,0.36,0.78,0.93 0.98,1.0,1.0,1.0), mean=0.421, stddev=0.344], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.003 0.004,0.004,0.005,0.007,0.008 0.01,0.01,0.01,0.01), mean=0.00561, stddev=0.00196], oderiv-count=32768
component name=tdnn9.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn10.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00133688, max-change=0.75, linear-params-rms=0.04489, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.95,0.96 0.96,0.98,1.0,1.0,1.1 1.1,1.1,1.1,1.1), mean=1.02, stddev=0.035], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.65,0.65,0.66 0.68,0.69,0.72,0.75,0.76 0.77,0.79,0.80,0.84), mean=0.717, stddev=0.0332], bias-{mean,stddev}=0.06546,1.075, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn10.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.61e+04, self-repaired-proportion=0.404811, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.002,0.30,1.5,2.0 2.4,2.6,2.8,3.4), mean=0.686, stddev=0.821], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.01,0.43,0.88,0.99 1.0,1.0,1.0,1.0), mean=0.453, stddev=0.37], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.005,0.005 0.005,0.006,0.007,0.009,0.01 0.01,0.01,0.01,0.02), mean=0.00738, stddev=0.00224], oderiv-count=20736
component name=tdnn10.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnn11.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00133688, max-change=0.75, linear-params-rms=0.0449, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.93,0.94,0.96 0.97,0.99,1.0,1.0,1.1 1.1,1.1,1.1,1.1), mean=1.02, stddev=0.0349], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.64,0.65,0.66 0.67,0.69,0.72,0.74,0.76 0.77,0.79,0.80,0.84), mean=0.718, stddev=0.0349], bias-{mean,stddev}=-0.03487,1.049, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn11.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=9.73e+03, self-repaired-proportion=0.424548, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,7e-05,0.16,1.2,1.8 2.4,2.6,3.2,4.5), mean=0.595, stddev=0.823], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.001,0.33,0.87,0.97 1.0,1.0,1.0,1.0), mean=0.416, stddev=0.38], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.007,0.008,0.008 0.009,0.01,0.01,0.01,0.02 0.02,0.02,0.02,0.03), mean=0.0121, stddev=0.00331], oderiv-count=11776
component name=tdnn11.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=tdnnFINAL.affine type=NaturalGradientAffineComponent, input-dim=512, output-dim=256, learning-rate=0.00133688, max-change=0.75, linear-params-rms=0.04487, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.92,0.94,0.95 0.97,0.98,1.0,1.0,1.1 1.1,1.1,1.1,1.1), mean=1.01, stddev=0.0379], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.64,0.65,0.66 0.67,0.69,0.72,0.74,0.76 0.78,0.80,0.81,0.83), mean=0.717, stddev=0.0354], bias-{mean,stddev}=-0.07691,0.9506, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnnFINAL.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=5.12e+03, self-repaired-proportion=0.466442, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.14,1.3,1.7 2.4,2.8,3.7,3.9), mean=0.596, stddev=0.844], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.32,0.83,0.98 1.0,1.0,1.0,1.0), mean=0.396, stddev=0.373], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.02,0.02,0.03,0.03 0.04,0.04,0.05,0.05), mean=0.0219, stddev=0.0072], oderiv-count=6400
component name=tdnnFINAL.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=prefinal-affine-task-0.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=256, learning-rate=0.00133688, max-change=0.75, linear-params-rms=0.0629, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,0.89,0.90,0.92 0.94,0.96,1.0,1.0,1.1 1.1,1.1,1.1,1.2), mean=1.01, stddev=0.0484], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.91,0.92,0.93 0.95,0.97,1.0,1.0,1.1 1.1,1.1,1.1,1.2), mean=1.01, stddev=0.0447], bias-{mean,stddev}=0.0001536,1.012, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-affine-task-0.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=3.58e+03, self-repaired-proportion=0.491992, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,4e-05,0.19,1.3,1.8 2.2,2.5,2.9,3.1), mean=0.618, stddev=0.778], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.0008,0.40,0.92,1.0 1.0,1.0,1.0,1.0), mean=0.459, stddev=0.397], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-08,7e-08,8e-08,1e-07 1e-07,0.0008,0.02,0.03,0.04 0.04,0.05,0.05,0.07), mean=0.0193, stddev=0.0152], oderiv-count=6912
component name=prefinal-affine-task-0.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output-0.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=96, learning-rate=0.00133688, max-change=1.5, linear-params-rms=0.02689, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.18,0.18,0.21 0.29,0.33,0.40,0.47,0.52 0.61,0.73,0.73,0.96), mean=0.413, stddev=0.121], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-07,8e-07,9e-07,1e-06 2e-06,0.008,0.22,0.36,0.41 0.47,0.51,0.59,0.66), mean=0.206, stddev=0.165], bias-{mean,stddev}=-6.458e-08,0.009585, rank-in=20, rank-out=48, num-samples-history=2000, update-period=4, alpha=4
component name=output-0.log-softmax type=LogSoftmaxComponent, dim=96, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.04 0.06,0.07,0.08,0.11,0.14 0.15,0.22,0.26,0.29), mean=0.0925, stddev=0.0431], oderiv-count=8448
nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/2.raw MTL/exp/nnet3/multitask/3.raw 
LOG (nnet3-show-progress[5.4.217~1-8ae5]:SelectGpuId():cu-device.cc:123) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:1.81313 tdnn2.affine:1.62733 tdnn3.affine:1.8831 tdnn4.affine:1.81486 tdnn5.affine:1.72812 tdnn6.affine:1.6098 tdnn7.affine:1.41293 tdnn8.affine:1.26243 tdnn9.affine:1.23609 tdnn10.affine:1.19831 tdnn11.affine:1.3451 tdnnFINAL.affine:1.44694 prefinal-affine-task-0.affine:1.31261 output-0.affine:2.30609 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:23.8962 tdnn2.affine:23.7786 tdnn3.affine:22.7027 tdnn4.affine:23.0525 tdnn5.affine:22.5887 tdnn6.affine:23.6582 tdnn7.affine:23.1106 tdnn8.affine:23.5353 tdnn9.affine:22.7698 tdnn10.affine:23.6824 tdnn11.affine:23.3676 tdnnFINAL.affine:22.2873 prefinal-affine-task-0.affine:22.8323 output-0.affine:4.21693 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0764188 tdnn2.affine:0.06856 tdnn3.affine:0.0831971 tdnn4.affine:0.0789661 tdnn5.affine:0.0767441 tdnn6.affine:0.0682327 tdnn7.affine:0.0612769 tdnn8.affine:0.0537295 tdnn9.affine:0.0543874 tdnn10.affine:0.0506797 tdnn11.affine:0.0576724 tdnnFINAL.affine:0.0650839 prefinal-affine-task-0.affine:0.0575873 output-0.affine:0.653559 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Tue Jul 24 11:13:41 UTC 2018, elapsed time 0 seconds
