# nnet3-info MTL/exp/nnet3/multitask/8.raw && nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/7.raw MTL/exp/nnet3/multitask/8.raw 
# Started at Fri Jul 27 01:03:07 UTC 2018
#
nnet3-info MTL/exp/nnet3/multitask/8.raw 
num-parameters: 13891160
modulus: 1
input-node name=input dim=13
component-node name=tdnn1.affine component=tdnn1.affine input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=65 output-dim=768
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=768 output-dim=768
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=768 output-dim=768
component-node name=tdnn2.affine component=tdnn2.affine input=tdnn1.renorm input-dim=768 output-dim=768
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=768 output-dim=768
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=768 output-dim=768
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -1), Offset(tdnn2.renorm, 2)) input-dim=1536 output-dim=768
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=768 output-dim=768
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=768 output-dim=768
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -3), Offset(tdnn3.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=768 output-dim=768
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=768 output-dim=768
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -3), Offset(tdnn4.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=768 output-dim=768
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=768 output-dim=768
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.renorm, -3), Offset(tdnn5.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=768 output-dim=768
component-node name=tdnn6.renorm component=tdnn6.renorm input=tdnn6.relu input-dim=768 output-dim=768
component-node name=tdnn7.affine component=tdnn7.affine input=Append(Offset(tdnn6.renorm, -3), Offset(tdnn6.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn7.relu component=tdnn7.relu input=tdnn7.affine input-dim=768 output-dim=768
component-node name=tdnn7.renorm component=tdnn7.renorm input=tdnn7.relu input-dim=768 output-dim=768
component-node name=tdnn8.affine component=tdnn8.affine input=Append(Offset(tdnn7.renorm, -3), Offset(tdnn7.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn8.relu component=tdnn8.relu input=tdnn8.affine input-dim=768 output-dim=768
component-node name=tdnn8.renorm component=tdnn8.renorm input=tdnn8.relu input-dim=768 output-dim=768
component-node name=tdnn9.affine component=tdnn9.affine input=Append(Offset(tdnn8.renorm, -3), Offset(tdnn8.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn9.relu component=tdnn9.relu input=tdnn9.affine input-dim=768 output-dim=768
component-node name=tdnn9.renorm component=tdnn9.renorm input=tdnn9.relu input-dim=768 output-dim=768
component-node name=tdnn10.affine component=tdnn10.affine input=Append(Offset(tdnn9.renorm, -3), Offset(tdnn9.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn10.relu component=tdnn10.relu input=tdnn10.affine input-dim=768 output-dim=768
component-node name=tdnn10.renorm component=tdnn10.renorm input=tdnn10.relu input-dim=768 output-dim=768
component-node name=tdnn11.affine component=tdnn11.affine input=Append(Offset(tdnn10.renorm, -3), Offset(tdnn10.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnn11.relu component=tdnn11.relu input=tdnn11.affine input-dim=768 output-dim=768
component-node name=tdnn11.renorm component=tdnn11.renorm input=tdnn11.relu input-dim=768 output-dim=768
component-node name=tdnnFINAL.affine component=tdnnFINAL.affine input=Append(Offset(tdnn11.renorm, -3), Offset(tdnn11.renorm, 3)) input-dim=1536 output-dim=768
component-node name=tdnnFINAL.relu component=tdnnFINAL.relu input=tdnnFINAL.affine input-dim=768 output-dim=768
component-node name=tdnnFINAL.renorm component=tdnnFINAL.renorm input=tdnnFINAL.relu input-dim=768 output-dim=768
component-node name=prefinal-affine-task-0.affine component=prefinal-affine-task-0.affine input=tdnnFINAL.renorm input-dim=768 output-dim=768
component-node name=prefinal-affine-task-0.relu component=prefinal-affine-task-0.relu input=prefinal-affine-task-0.affine input-dim=768 output-dim=768
component-node name=prefinal-affine-task-0.renorm component=prefinal-affine-task-0.renorm input=prefinal-affine-task-0.relu input-dim=768 output-dim=768
component-node name=output-0.affine component=output-0.affine input=prefinal-affine-task-0.renorm input-dim=768 output-dim=152
component-node name=output-0.log-softmax component=output-0.log-softmax input=output-0.affine input-dim=152 output-dim=152
output-node name=output-0 input=output-0.log-softmax dim=152 objective=linear
component-node name=prefinal-affine-task-1.affine component=prefinal-affine-task-1.affine input=tdnnFINAL.renorm input-dim=768 output-dim=768
component-node name=prefinal-affine-task-1.relu component=prefinal-affine-task-1.relu input=prefinal-affine-task-1.affine input-dim=768 output-dim=768
component-node name=prefinal-affine-task-1.renorm component=prefinal-affine-task-1.renorm input=prefinal-affine-task-1.relu input-dim=768 output-dim=768
component-node name=output-1.affine component=output-1.affine input=prefinal-affine-task-1.renorm input-dim=768 output-dim=192
component-node name=output-1.log-softmax component=output-1.log-softmax input=output-1.affine input-dim=192 output-dim=192
output-node name=output-1 input=output-1.log-softmax dim=192 objective=linear
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=65, output-dim=768, learning-rate=0.00122628, max-change=0.75, linear-params-rms=0.1297, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.82,0.84,0.88 0.90,0.95,1.0,1.1,1.2 1.2,1.3,1.3,1.4), mean=1.04, stddev=0.105], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.1,3.1,3.2,3.3 3.4,3.5,3.6,3.7,3.8 3.8,3.9,3.9,4.0), mean=3.59, stddev=0.16], bias-{mean,stddev}=0.03033,1.027, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=2.1e+05, self-repaired-proportion=0.044392, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.03,0.05,0.20,1.2,1.5 1.9,2.3,2.5,4.1), mean=0.558, stddev=0.673], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.06 0.07,0.10,0.31,0.83,0.92 0.94,0.95,0.95,0.98), mean=0.428, stddev=0.327], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.002,0.002 0.002,0.002,0.002,0.003,0.003 0.003,0.004,0.004,0.005), mean=0.00215, stddev=0.000531], oderiv-count=296960
component name=tdnn1.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=768, learning-rate=0.00122628, max-change=0.75, linear-params-rms=0.0367, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.95,0.97 0.98,0.99,1.0,1.0,1.1 1.1,1.1,1.1,1.1), mean=1.02, stddev=0.0283], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.95,0.96,0.97 0.98,0.99,1.0,1.0,1.1 1.1,1.1,1.1,1.1), mean=1.02, stddev=0.0299], bias-{mean,stddev}=0.01173,1.051, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=2.05e+05, self-repaired-proportion=0.0518777, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.01,0.02 0.03,0.06,0.28,0.83,1.1 1.4,1.6,1.9,2.4), mean=0.444, stddev=0.454], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.05,0.07 0.10,0.17,0.45,0.80,0.89 0.93,0.94,0.95,0.98), mean=0.481, stddev=0.294], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.003,0.003 0.004,0.004,0.004,0.005), mean=0.0027, stddev=0.000531], oderiv-count=302080
component name=tdnn2.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00122628, max-change=0.75, linear-params-rms=0.02602, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.97,0.97,0.98 0.99,1.0,1.0,1.0,1.0 1.1,1.1,1.1,1.1), mean=1.02, stddev=0.023], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.67,0.68,0.69 0.69,0.70,0.72,0.74,0.75 0.76,0.76,0.77,0.81), mean=0.721, stddev=0.0207], bias-{mean,stddev}=0.01783,1.008, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=8.45e+04, self-repaired-proportion=0.040811, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.009,0.01,0.02 0.03,0.06,0.29,0.91,1.4 1.7,1.9,2.1,2.6), mean=0.502, stddev=0.54], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.05,0.07 0.10,0.16,0.43,0.76,0.88 0.93,0.95,0.96,0.97), mean=0.455, stddev=0.284], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.003,0.003,0.004,0.005 0.005,0.006,0.006,0.007), mean=0.00332, stddev=0.000846], oderiv-count=130560
component name=tdnn3.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00122628, max-change=0.75, linear-params-rms=0.02601, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.96,0.97,0.98 0.99,1.0,1.0,1.0,1.0 1.1,1.1,1.1,1.1), mean=1.02, stddev=0.0232], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.66,0.67,0.68 0.69,0.70,0.72,0.74,0.75 0.76,0.77,0.78,0.84), mean=0.72, stddev=0.0227], bias-{mean,stddev}=0.007485,1.004, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=8.06e+04, self-repaired-proportion=0.0393601, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.008,0.01,0.02 0.03,0.06,0.26,0.87,1.3 1.6,2.0,2.2,3.0), mean=0.478, stddev=0.539], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.03,0.06,0.07 0.10,0.15,0.37,0.74,0.85 0.91,0.94,0.95,0.99), mean=0.43, stddev=0.279], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.003 0.003,0.003,0.003,0.004,0.005 0.005,0.005,0.006,0.007), mean=0.00346, stddev=0.000809], oderiv-count=142848
component name=tdnn4.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00122628, max-change=0.75, linear-params-rms=0.02602, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.96,0.97,0.98 0.99,1.0,1.0,1.0,1.0 1.1,1.1,1.1,1.1), mean=1.02, stddev=0.0236], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.67,0.68,0.69 0.69,0.70,0.72,0.74,0.75 0.76,0.77,0.78,0.80), mean=0.721, stddev=0.0217], bias-{mean,stddev}=0.02207,1.015, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=7.78e+04, self-repaired-proportion=0.0382059, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,0.001,0.009,0.02 0.04,0.07,0.31,0.84,1.3 1.6,1.8,2.0,2.4), mean=0.494, stddev=0.505], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.008,0.05,0.07 0.11,0.17,0.42,0.72,0.84 0.89,0.93,0.94,0.98), mean=0.449, stddev=0.268], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.003 0.003,0.003,0.004,0.004,0.005 0.005,0.006,0.006,0.006), mean=0.00382, stddev=0.000798], oderiv-count=114688
component name=tdnn5.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00122628, max-change=0.75, linear-params-rms=0.02601, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.97,0.98,0.98 0.99,1.0,1.0,1.0,1.0 1.1,1.1,1.1,1.1), mean=1.02, stddev=0.0217], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.66,0.68,0.69 0.70,0.70,0.72,0.74,0.75 0.76,0.77,0.77,0.80), mean=0.721, stddev=0.0212], bias-{mean,stddev}=0.04588,1.007, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=8.6e+04, self-repaired-proportion=0.0493384, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.005,0.009,0.01 0.03,0.07,0.33,0.89,1.3 1.6,1.9,2.1,3.2), mean=0.515, stddev=0.529], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.03,0.04,0.06 0.09,0.15,0.43,0.74,0.86 0.90,0.93,0.96,1.0), mean=0.456, stddev=0.28], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.003 0.003,0.003,0.004,0.005,0.005 0.005,0.006,0.006,0.006), mean=0.00388, stddev=0.000748], oderiv-count=103936
component name=tdnn6.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn7.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00122628, max-change=0.75, linear-params-rms=0.02606, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.97,0.98,0.98 0.99,1.0,1.0,1.0,1.1 1.1,1.1,1.1,1.1), mean=1.02, stddev=0.0235], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.67,0.68,0.69 0.70,0.70,0.72,0.74,0.75 0.76,0.77,0.78,0.84), mean=0.722, stddev=0.022], bias-{mean,stddev}=0.01659,0.9739, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn7.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=5.99e+04, self-repaired-proportion=0.0600775, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.003,0.007,0.01 0.03,0.06,0.30,0.84,1.2 1.5,1.9,2.2,4.1), mean=0.486, stddev=0.52], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.02,0.03,0.06 0.09,0.16,0.43,0.72,0.82 0.90,0.94,0.97,1.0), mean=0.444, stddev=0.273], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.003 0.003,0.004,0.004,0.005,0.005 0.006,0.006,0.006,0.007), mean=0.0042, stddev=0.000768], oderiv-count=87552
component name=tdnn7.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn8.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00122628, max-change=0.75, linear-params-rms=0.02606, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.97,0.98,0.99 0.99,1.0,1.0,1.0,1.1 1.1,1.1,1.1,1.1), mean=1.02, stddev=0.0223], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.68,0.68,0.69 0.70,0.70,0.72,0.74,0.75 0.76,0.77,0.78,0.81), mean=0.722, stddev=0.0215], bias-{mean,stddev}=-0.05801,1.063, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn8.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=4.86e+04, self-repaired-proportion=0.0877821, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,2e-06,0.0004,0.009 0.02,0.05,0.30,0.92,1.3 1.5,1.9,2.2,3.4), mean=0.498, stddev=0.532], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,2e-05,0.003,0.04 0.07,0.12,0.43,0.75,0.85 0.90,0.94,0.96,0.99), mean=0.439, stddev=0.289], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.004,0.004,0.005,0.006,0.006 0.006,0.007,0.007,0.008), mean=0.0049, stddev=0.000842], oderiv-count=79360
component name=tdnn8.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn9.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00122628, max-change=0.75, linear-params-rms=0.02609, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.97,0.98,0.98 0.99,1.0,1.0,1.0,1.1 1.1,1.1,1.1,1.1), mean=1.02, stddev=0.0238], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.67,0.68,0.69 0.69,0.70,0.72,0.74,0.75 0.76,0.77,0.78,0.81), mean=0.723, stddev=0.0224], bias-{mean,stddev}=-0.05929,0.9982, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn9.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=4.1e+04, self-repaired-proportion=0.105259, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,7e-05,0.002 0.02,0.05,0.31,0.88,1.2 1.5,1.9,2.1,2.6), mean=0.486, stddev=0.507], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0005,0.01 0.06,0.14,0.40,0.75,0.85 0.90,0.94,0.96,0.99), mean=0.434, stddev=0.287], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.005,0.005 0.005,0.005,0.006,0.007,0.008 0.008,0.008,0.009,0.009), mean=0.00614, stddev=0.000985], oderiv-count=62464
component name=tdnn9.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn10.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00122628, max-change=0.75, linear-params-rms=0.0261, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.97,0.98,0.98 0.99,1.0,1.0,1.0,1.1 1.1,1.1,1.1,1.1), mean=1.02, stddev=0.0236], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.67,0.68,0.69 0.70,0.71,0.72,0.74,0.75 0.76,0.77,0.78,0.79), mean=0.723, stddev=0.0225], bias-{mean,stddev}=0.02927,1.028, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn10.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=3e+04, self-repaired-proportion=0.112334, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,4e-05,0.002 0.02,0.05,0.32,0.94,1.3 1.6,1.9,2.1,2.6), mean=0.52, stddev=0.529], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0003,0.01 0.06,0.14,0.44,0.75,0.85 0.91,0.96,0.98,0.99), mean=0.45, stddev=0.294], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.006,0.006 0.006,0.006,0.007,0.008,0.009 0.009,0.009,0.01,0.01), mean=0.00711, stddev=0.00111], oderiv-count=46080
component name=tdnn10.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnn11.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00122628, max-change=0.75, linear-params-rms=0.02618, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.96,0.97,0.98 0.99,1.0,1.0,1.0,1.1 1.1,1.1,1.1,1.1), mean=1.03, stddev=0.0265], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.67,0.68,0.69 0.70,0.71,0.72,0.74,0.75 0.76,0.77,0.79,0.82), mean=0.725, stddev=0.0229], bias-{mean,stddev}=0.03182,1.019, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn11.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=2.36e+04, self-repaired-proportion=0.168848, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,2e-06,0.0003 0.005,0.04,0.32,0.99,1.3 1.6,2.0,2.3,3.0), mean=0.529, stddev=0.565], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,4e-05,0.002 0.02,0.11,0.43,0.75,0.87 0.92,0.97,0.98,1.0), mean=0.44, stddev=0.305], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.007,0.007,0.008 0.008,0.008,0.009,0.01,0.01 0.01,0.01,0.01,0.01), mean=0.00937, stddev=0.00137], oderiv-count=30208
component name=tdnn11.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=tdnnFINAL.affine type=NaturalGradientAffineComponent, input-dim=1536, output-dim=768, learning-rate=0.00122628, max-change=0.75, linear-params-rms=0.02628, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.97,0.97,0.99 0.99,1.0,1.0,1.1,1.1 1.1,1.1,1.1,1.1), mean=1.03, stddev=0.0291], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.66,0.67,0.69 0.70,0.71,0.73,0.75,0.76 0.77,0.78,0.78,0.80), mean=0.728, stddev=0.0257], bias-{mean,stddev}=-0.06719,0.9593, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnnFINAL.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=8.19e+03, self-repaired-proportion=0.176514, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,6e-05 0.002,0.03,0.32,0.92,1.3 1.5,1.9,2.2,3.3), mean=0.495, stddev=0.531], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0006 0.01,0.08,0.41,0.72,0.82 0.88,0.94,0.96,1.0), mean=0.415, stddev=0.296], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.03), mean=0.0158, stddev=0.00337], oderiv-count=14080
component name=tdnnFINAL.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=prefinal-affine-task-0.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=768, learning-rate=0.00122628, max-change=0.75, linear-params-rms=0.03677, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.95,0.96,0.97 0.98,0.99,1.0,1.0,1.1 1.1,1.1,1.1,1.1), mean=1.02, stddev=0.0316], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.96,0.96,0.97 0.98,0.99,1.0,1.0,1.1 1.1,1.1,1.1,1.1), mean=1.02, stddev=0.0305], bias-{mean,stddev}=0.00123,1.007, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-affine-task-0.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=4.1e+03, self-repaired-proportion=0.284054, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,9e-06 0.001,0.01,0.31,1.0,1.4 1.9,2.2,2.5,3.5), mean=0.553, stddev=0.635], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0002 0.006,0.05,0.42,0.81,0.94 0.97,0.99,1.0,1.0), mean=0.446, stddev=0.339], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-08,3e-08,4e-08,5e-05 0.0004,0.003,0.02,0.02,0.03 0.03,0.03,0.03,0.04), mean=0.0155, stddev=0.0103], oderiv-count=8704
component name=prefinal-affine-task-0.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=output-0.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=152, learning-rate=0.00122628, max-change=1.5, linear-params-rms=0.02804, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.17,0.51,0.59 0.64,0.69,0.77,0.85,0.88 0.94,0.99,1.1,1.2), mean=0.766, stddev=0.133], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-07,7e-07,8e-07,0.0009 0.008,0.05,0.33,0.48,0.51 0.54,0.58,0.60,0.67), mean=0.286, stddev=0.195], bias-{mean,stddev}=-4.861e-08,0.003019, rank-in=20, rank-out=76, num-samples-history=2000, update-period=4, alpha=4
component name=output-0.log-softmax type=LogSoftmaxComponent, dim=152, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.02,0.02 0.03,0.04,0.05,0.07,0.08 0.09,0.13,0.18,0.23), mean=0.0569, stddev=0.0305], oderiv-count=6912
component name=prefinal-affine-task-1.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=768, learning-rate=0.00122628, max-change=0.75, linear-params-rms=0.03611, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.94,0.95,0.96 0.97,0.98,1.0,1.0,1.0 1.0,1.1,1.1,1.1), mean=1, stddev=0.0253], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.95,0.96 0.97,0.98,1.0,1.0,1.0 1.0,1.1,1.1,1.1), mean=1, stddev=0.0252], bias-{mean,stddev}=-0.06978,1.032, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-affine-task-1.relu type=RectifiedLinearComponent, dim=768, self-repair-scale=1e-05, count=5.63e+03, self-repaired-proportion=0.286558, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.0004,0.01,0.26,0.85,1.2 1.5,1.8,2.0,2.8), mean=0.452, stddev=0.508], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.003,0.04,0.46,0.83,0.93 0.97,0.99,1.0,1.0), mean=0.456, stddev=0.351], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-09,7e-09,8e-09,3e-06 3e-05,0.0003,0.003,0.005,0.005 0.006,0.006,0.006,0.007), mean=0.00285, stddev=0.00204], oderiv-count=6912
component name=prefinal-affine-task-1.renorm type=NormalizeComponent, input-dim=768, output-dim=768, target-rms=1, add-log-stddev=false
component name=output-1.affine type=NaturalGradientAffineComponent, input-dim=768, output-dim=192, learning-rate=0.00122628, max-change=1.5, linear-params-rms=0.01305, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.07 0.07,0.07,0.07,0.53,0.58 0.61,0.68,0.75,0.79), mean=0.276, stddev=0.233], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,4e-07,4e-07,0.0002 0.001,0.02,0.16,0.25,0.28 0.30,0.32,0.33,0.37), mean=0.146, stddev=0.106], bias-{mean,stddev}=2.058e-08,0.001833, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-1.log-softmax type=LogSoftmaxComponent, dim=192, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.02,0.02 0.03,0.05,0.05,0.07), mean=0.00806, stddev=0.0119], oderiv-count=6912
nnet3-show-progress --use-gpu=no MTL/exp/nnet3/multitask/7.raw MTL/exp/nnet3/multitask/8.raw 
LOG (nnet3-show-progress[5.4.217~1-8ae5]:SelectGpuId():cu-device.cc:123) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:1.51838 tdnn2.affine:1.30607 tdnn3.affine:1.57814 tdnn4.affine:1.47136 tdnn5.affine:1.41048 tdnn6.affine:1.38106 tdnn7.affine:1.41619 tdnn8.affine:1.46903 tdnn9.affine:1.54168 tdnn10.affine:1.61276 tdnn11.affine:1.70996 tdnnFINAL.affine:1.9517 prefinal-affine-task-0.affine:1.31974 output-0.affine:1.8475 prefinal-affine-task-1.affine:0.333513 output-1.affine:0.677693 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:40.6393 tdnn2.affine:40.537 tdnn3.affine:39.75 tdnn4.affine:39.6497 tdnn5.affine:39.8724 tdnn6.affine:39.7418 tdnn7.affine:39.1156 tdnn8.affine:40.8845 tdnn9.affine:39.6345 tdnn10.affine:40.1876 tdnn11.affine:40.0888 tdnnFINAL.affine:39.0491 prefinal-affine-task-0.affine:39.6949 output-0.affine:9.58137 prefinal-affine-task-1.affine:39.8756 output-1.affine:5.01246 ]
LOG (nnet3-show-progress[5.4.217~1-8ae5]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0375178 tdnn2.affine:0.0322433 tdnn3.affine:0.0397484 tdnn4.affine:0.0371549 tdnn5.affine:0.0354217 tdnn6.affine:0.0348004 tdnn7.affine:0.036263 tdnn8.affine:0.0359897 tdnn9.affine:0.0389697 tdnn10.affine:0.0402085 tdnn11.affine:0.0427426 tdnnFINAL.affine:0.0501073 prefinal-affine-task-0.affine:0.0332945 output-0.affine:0.203912 prefinal-affine-task-1.affine:0.00836425 output-1.affine:0.143076 ]
# Accounting: time=2 threads=1
# Ended (code 0) at Fri Jul 27 01:03:09 UTC 2018, elapsed time 2 seconds
